---
layout: post
title:  大杂烩, 硬盘安装Linux（legacy）, Mac OS X
category: linux 
---

* toc
{:toc}

# Symbian开发

1)试着装好了Carbide c++以及S60 3rd SDK后，却发现不能在C盘以外的地方建工程（在默认的C:\Symbian\Carbide\workspace之外建工程是可以的），真没想到Nokia出的工具还有这样不友好的限制。

PS：它的说明说工程要和SDK放在同一个盘中，结果我把SDK装在E盘，结果还是在C盘建工程可以，在E盘建不行，而且多次安装之后，我的系统崩溃了，郁闷，这个系统用了2年，都没有重装...

2)Symbian S60 2nd 和 3rd 的区别

http://www.opda.com.cn/viewthread.php?tid=182217&page=1#pid3004888

3)Carbide c++的一个小BUG

如果在开始利用向导生成代码时，没有选择armv5或gcce，而只选择了模拟器的情况下，在代码生成之后，再添加armv5或gcce的话，是不能自动生成sis文件的，可以在Project->Properties->Carbide c++->Build Configurations->SIS Builder中添加。

# Apache与CGI

本来以为CGI编程会比较复杂，没想到从原理的角度，似乎比之前的JSP还要简单一些。这次主要是用C来编写CGI，使用的web服务器是Apache 2.0.55。网上看到了几篇同类的文章，但大多过于简略，有的甚至颇有错误，所以自己就重新写一篇吧。

## 1）配置httpd.conf

如果是默认安装的话，只要将

`AddHandler cgi-script .cgi`

改为

`AddHandler cgi-script .cgi .exe`

即可。其他的完全不用改，只要你将后面编好后的.exe放到默认的cgi-bin中就行了。如果你要将.exe放到其他路径下的话，ScriptAlias和Options ExecCGI会派上用场。（详细的用法，翻手册查吧！）别忘了修改了配置之后，要重启Apache。

## 2）最简单的例子

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, char* argv[])
{
    char buf[256];
    char *req;
    printf("Content-type: text/html\n\n");
    printf("");
    printf("hello world!");
    strcpy(buf,"HTTP_ACCEPT");
    req = getenv(buf);
    printf("%s",req);
    strcpy(buf,"HTTP_REFERER");
    req = getenv(buf);
    printf("%s",req);
    strcpy(buf,"QUERY_STRING");
    req = getenv(buf);
    printf("%s",req);
    printf("");
    return 0;
}
```

网上的例子只有输出，没有输入，其实不算好例子。用VC之类的编译器编好后，放到cgi-bin中，在浏览器中输入以下地址http://localhost/cgi-bin/cgi.exe?abc就可以看到效果了。还有`printf("Content-type: text/html\n\n");`是一定要有的，没有的会报HTTP 500的错误，有的例子中说`printf("\n");`就行了，这是不对的，至少在默认配置下，这样做的结果是你可以下载该.exe，但不能把它当做CGI来执行。

从这个例子，以及Apache官方的例子（http://httpd.apache.org/docs/1.3/howto/cgi.html）

```perl
#!/usr/bin/perl
print "Content-type: text/html\r\n\r\n";
print "Hello, World.";
```

中可以看出，Apache的作用其实是重定义了这些CGI程序的标准输入输出，以及设置了一些系统变量。这才是它支持多种编程语言编写的CGI的真正原因，试想还有哪种语言不支持标准输入输出呢？

可以在：

http://www.boutell.com/cgic/

中获得CGIC的代码，这是一个C写的CGI开发库，本文的示例就是在这个库的代码的启示下写出来的。

## 3)Linux下的Apache目录结构
Windows下Apache的各个目录都放在一起，因此使用起来比较方便，而Linux下Apache的各个目录分散在各个地方不是太好找，特记录一下，以作备忘。

conf在/etc/apache2下，但是Linux下的httpd.conf实际上是个空文件，它的内容被分散到该目录下的其他文件中。

cgi-bin在/usr/lib/cgi-bin下。

bin下的文件在/usr/sbin下可以找到。

modules在/usr/lib/apache2下。

参考：

https://mp.weixin.qq.com/s/9oi-zkuUtjv0P6GyBLmatg

简单说明CGI和动态请求是什么

https://mp.weixin.qq.com/s/vmIscEgDotR6ntiIdjGBLg

关于CGI和FastCGI的理解

# 硬盘安装Linux（legacy）

2013.9

最近重新开始研究Android和Linux，由于已经快2年没有弄过了。因此之前下载的linux发行版也不打算再继续用了，省得到了Android开发的时候还要更新一大堆的包。

看了一下Google官网上对于Android source的编译条件，再结合2年前编译Android 2.2（Froyo）的经验，在虚拟机上跑Linux的方案首先被排除。开玩笑，16G的RAM/SAWP的开销，哪是VM能搞得定的。就连Froyo在虚拟机上都编不过去，何况是4.3（Jelly Bean）了。

2年前编译Froyo，用的是Wubi安装的Ubuntu 10.04。这次看了一下Jelly Bean的编译条件，100GB+的空间。忽然觉得做软件这么多年，还从来没有在PC上认认真真的安装个双系统用用，实在是职业生涯的一个污点。于是在下载了Ubuntu 12.04之后，老老实实的在网上搜索起如何硬盘安装的办法来。

之所以选择硬盘安装，其实实在是觉得刻张盘太麻烦了。如今就连卖本本的厂商都不提供Recovery CD，而改用Recovery分区来恢复系统。想来硬盘安装Ubuntu也早无技术难度可言了。

硬盘安装的步骤如下：

- EasyBCD和ISO

- `C:\NST\menu.lst`：

```bash
title Install Ubuntu
root (hd0,0)
kernel (hd0,0)/vmlinuz boot=casper iso-scan/filename=/ubuntu-11.10-i386.iso ro quiet splash locale=zh_CN.UTF-8
initrd (hd0,0)/initrd.lz
```

>现在的电脑，一般都有一个Recovery分区，用于在系统崩溃时，恢复系统之用。因此，(hd0,0)需要修改为(hd0,1)，甚至是(hd0,2)。

- 把准备好的iso用压缩软件或者虚拟光驱打开，找到casper文件夹，复制initrd.lz和vmlinuz到C盘,然后在把iso也拷贝到C盘。

- 正式安装之前：

`sudo umount -l /isodevice`

- 安装好之后，没有GRUB开机菜单的话：

```bash
sudo -i
mount /dev/sda7 /mnt
grub-install --root-directory=/mnt /dev/sda
```

- 最近硬盘安装Ubuntu之后，出现了无法进入Windows的问题。原因是由于公司的Dell笔记本的Recovery分区是第一个主分区，因此被错误的认为是Windows分区。

这种情况可用boot-repair修复之。

```bash
sudo add-apt-repository ppa:yannubuntu/boot-repair
sudo apt-get update
sudo apt-get install -y boot-repair
sudo boot-repair
```

- 最近Win10升级，把我的grub弄乱了，导致开机出现了grub rescue提示符。

用`grub rescue> ls (hd0,msdos1)/`依次尝试每个分区，直到找到linux分区。

```bash
grub rescue> set root=hd0,msdos1
grub rescue> set prefix=(hd0,msdos1)/root/grub
grub rescue> insmod normal
grub rescue> normal
```

这样就能进入linux系统了。进入之后：

```bash
sudo update-grub
sudo grub-install /dev/sda
```

下面针对最近几天的安装实践，做一个总结性的概括：

1）刚开始的时候，由于不熟悉Ubuntu 12.04的安装步骤，选择了错误的选项，发现之后中断系统安装。重启，结果不但Ubuntu没有安装好，就连Windows也进不去。这时由于之前没有刻录Live CD的原因，只好使用Recovery分区恢复Windows系统。

2）我的本本是ASUS的，在开机时候按住F9，即可启动一键恢复功能。由于这个功能也是第一次使用，因此当选择将Windows恢复到第一个分区，并在恢复过程中出错的时候，我选择了重启。然后选择将Windows恢复到一个硬盘。。。结果除了Recovery分区之外的所有分区都被删除了。保存在电脑中的数据也全部丢失。看来装系统始终是件危险的工作。安装之前一定要将重要数据备份到移动硬盘上。

3）ASUS的一键恢复功能，会重启机器若干次，且每次的画面高度雷同，因此很让人觉得是不是机器陷入了有问题的死循环之中。在反复折腾几次之后，我也泄了气，任由它先无限重启下去。后来大概是重启到第4次之后，我发现桌面的分辨率有改变，然后才意识到这些重启估计是正常现象，并不是死循环。

4）Ubuntu的虚拟内存默认使用的是交换分区的方式，而不是Windows的交换文件。因此要单独划一个分区用于虚拟内存的数据交换。

5）Win7的压缩卷功能对于系统分区不好使，由于有不可移动的数据存在，系统盘最小也要460G（硬盘总共1T），这实在是太大了。可以使用Acronis Disk Director Suite调整系统分区的大小。但是需要注意的是，Windows下的分区工具对分区数量的调整，会影响到GRUB的执行，需要通过grub shell的命令切换到Linux下，然后执行grub update，方可恢复正常。而Linux下的分区工具（如GParted）就没有这个问题。

6）GParted在调整分区大小，主要是分区首地址右移方面，执行效率非常慢。Acronis Disk Director Suite没试过，没准会好些。

7）分区的话题说完了，继续谈谈对Linux启动过程的心得。会提到一些名词，但是不会展开来说。首先是BIOS和UEFI。它们决定从哪个存储介质启动。

8）MBR的结构。MBR决定了一个介质最多只有3个主分区和1个扩展分区。一个扩展分区可包含若干个逻辑分区。

9）GRUB和LILO。

10）initrd和vmlinuz。initrd包括image-initrd和cpio-initrd。zImage和bzImage的区别和作用。

----

既然有安装，当然也有卸载教程了。

参见：

https://blog.csdn.net/aisikaov5/article/details/49847005

win10和Linux双系统怎么在win10下用EasyBcd卸载Linux系统

注意：正如安装有legacy和UEFI的区别，卸载也是一样的，需要找对应的工具才行。

# Mac OS X

最近对iOS开发产生了兴趣，于是准备在PC上搭建一个iOS的开发环境。

首先，我搜了一下在Linux上搭建相关环境的方法，搜到了一些结果。但历史比较老，基本都是3、4年前的东西，就算搭好，也不见得有什么用。

于是，目标改为在PC上使用Virtual Box搭建Mac OS X虚拟机。目标版本为Mac OS X 10.10。

1.下载镜像文件。

镜像文件主要有dmg和iso两种。前者必须在Mac OS X中才能执行，而后者和其他OS镜像差别不大。

2.boot

原版镜像由于Apple的硬件检测机制，并不能在PC上运行。这时就需要破解，这一步一般是在boot中做的。

可用的boot工具，早期有empireEFI、HackBoot。较新的有chameleon、Niresh。
