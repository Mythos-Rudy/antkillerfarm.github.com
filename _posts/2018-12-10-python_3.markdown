---
layout: post
title:  Python（四）
category: language 
---

# Python

## Captcha

Captcha是一个Python验证码库，能够生成音频和图片验证码。

>CAPTCHA是Completely Automated Public Turing Test to Tell Computers and Humans Apart (全自动区分计算机和人类的图灵测试)的简称. CAPTCHA的目的是区分计算机和人类的一种程序算法，是一种区分用户是计算机和人的计算程序，这种程序必须能生成并评价人类能很容易通过但计算机却通不过的测试。

代码：

https://github.com/lepture/captcha

这个库可用于生成大量有标签的验证码，是DL入门的必备工具。

参考：

https://mp.weixin.qq.com/s/m4rNUFV4VGUBI7aWv5fgbw

中文项目：快速识别验证码，CNN也能为爬虫保驾护航

https://zhuanlan.zhihu.com/p/26078299

使用深度学习来破解captcha验证码

https://mp.weixin.qq.com/s/NsaMcgufLYO3i6eG1WO_VA

我不是机器人：谷歌最新版验证码系统ReCaptcha破解已开源

其他类似项目还包括：

| 语言 | 名称 | 网址 |
|:--:|:--:|:--:|
| Java | JCaptcha | http://jcaptcha.sourceforge.net/ |
| Java | SimpleCaptcha | http://simplecaptcha.sourceforge.net/ |
| Java | kcaptcha | http://captcha.ru/en/kcaptcha/ |
| Java | patchca | https://github.com/pusuo/patchca |
| Java | SkewPassImage | http://skewpassim.sourceforge.net/ |
| Java | Internet Captcha | http://www.icaptcha.com/ |
| Java | Cage | http://akiraly.github.io/cage/ |

## 如何通过需认证的代理获取HTTP网页

Python内置的urllib和urllib2模块都可用于获取HTTP网页，但使用范围是不同的。urllib只支持HTTP 0.9和HTTP 1.0，所以如果只是使用代理可以使用urllib.FancyURLopener类，如果该代理还需要认证的话urllib就不行了。因为代理认证是HTTP 1.1中引入的。

这时可以考虑使用urllib2模块。代码如下：

{% highlight python %}
import urllib2
l_proxy_info = {
'user' : 'user',
'pass' : 'pass',
'host' : 'host',
'port' : 3128
}

l_proxy_support = urllib2.ProxyHandler({"http" : "http://%(user)s:%(pass)s@%(host)s:%(port)d" % l_proxy_info})
l_opener = urllib2.build_opener(l_proxy_support, urllib2.HTTPHandler)

urllib2.install_opener(l_opener)
usock = urllib2.urlopen('http://www.sohu.com')
{% endhighlight %}

## Requests

>上一小节大概写作于2008年，已经10年了，urllib3都出来了。

Requests是Python语言编写，基于urllib3，采用Apache2 Licensed开源协议的HTTP库。

参考：

https://mp.weixin.qq.com/s/a4mGDzKdEs7-tAPsfyL29w

Python Requests库使用指南

https://mp.weixin.qq.com/s/cyG_TpPA9eyzG70VT2m2Ww

Requests的基本用法

## Celery

Celery是一个专注于实时处理和任务调度的分布式任务队列，可用于执行定时任务。

参考：

https://zhuanlan.zhihu.com/p/22304455

使用Celery

## Gunicorn

Gunicorn是一个高效的Python WSGI Server，地位相当于Java中的Tomcat。

官网：

http://gunicorn.org/

参考：

http://www.cnblogs.com/ArtsCrafts/p/gunicorn.html

Gunicorn快速入门

## 并行计算

python异步并发模块concurrent.futures，主要用来实现多线程和多进程的异步并发。

代码示例：

{% highlight python %}
from concurrent import futures

def test(num):
    import time
    return time.ctime(),num

with futures.ThreadPoolExecutor(max_workers=1) as executor:
    future = executor.submit(test,1)
    print future.result()

>>>
('Tue Jan 17 15:23:10 2017', 1)
{% endhighlight %}

如果是多进程的话，可使用ProcessPoolExecutor。由于python是解释语言的关系，多线程设计基本就是残废状态，因此，通常情况下，**不要使用多线程，请使用多进程**

参考：

http://lovesoo.org/analysis-of-asynchronous-concurrent-python-module-concurrent-futures.html

python异步并发模块concurrent.futures简析

https://mp.weixin.qq.com/s/QIfxxY6z7y77RDE_8gDEIg

并行运算Process Pools

## Cython

https://mp.weixin.qq.com/s/ODA74xgoS8X1HFxp4BfshQ

如何将Python自然语言处理速度提升100倍：用spaCy/Cython加速NLP

https://mp.weixin.qq.com/s/1Iyhsp5-2DyTfOb0JzqLZg

比Python快100倍，利用spaCy和Cython实现高速NLP项目

https://mp.weixin.qq.com/s/l-zmvQvmosw81G1wFCIDbQ

用Cython造个轮子

## 处理eml文件

代码示例：

https://github.com/antkillerfarm/antkillerfarm_crazy/blob/master/python/misc/hello_eml.py

这个示例主要使用email包来解析eml文件。

同时为了处理其中的html的内容，还用到了Beautiful Soup包。其网址为：

https://www.crummy.com/software/BeautifulSoup/

参见：

https://mp.weixin.qq.com/s/p86yvl3uAm3FXw4V9NlNoA

一文带你上手Python网页抓取神器BeautifulSoup库

https://mp.weixin.qq.com/s/3o_T7Tyrstur6jkj0gexMA

BeautifulSoup的使用

## PDF

https://mp.weixin.qq.com/s/fBz__E2Xu4GC7w1Uqx5NAA

手把手教你如何用Python从PDF文件中导出数据

https://mp.weixin.qq.com/s/xCKC3cz7jUvrwl4uvMNKTA

20行Python代码教你批量将PDF转为Word

https://mp.weixin.qq.com/s/IznKbG3cEF6uxP0Fe_0oaQ

印度小哥“神剑”：PDF提取表格so easy！

https://mp.weixin.qq.com/s/1U3NqvlSvr6jL1e3yFxXgw

20多行 Python 代码优雅搞定PDF转换成图片

## PLY

Python Lex-Yacc是一个python版本的lex/yacc实现。

官网：

http://www.dabeaz.com/ply/

参考：

https://blog.csdn.net/feixiaoxing/article/details/79123776

python编程（ply库）

https://blog.csdn.net/chosen0ne/article/details/8077880

Python语法解析器PLY——lex and yacc in Python

## SWIG

Simplified Wrapper and Interface Generator可以为C/C++的库生成其他高级脚本语言的Wrapper。

官网：

http://swig.org/

PLY和SWIG的作者都是David Beazley。

>David M. Beazley，犹他大学博士。IEEE Gordon Bell Prize(1993,1998)。先后在Los Alamos和University of Chicago工作执教。超算领域专家。python语言核心开发者。

## SLY

Sly Lex Yacc是David Beazley的新作，号称新一代的PLY。

官网：

https://sly.readthedocs.io/en/latest/

## glob

glob的历史可以追溯到早期的UNIX系统。用它可以查找符合特定规则的文件路径名。

参考：

https://blog.csdn.net/csapr1987/article/details/7469769

python glob模块

## Sphinx

Sphinx可用于为python库生成doc。目前绝大多数python库的帮助文档都是用Sphinx生成的。

官网：

http://www.sphinx-doc.org/en/master/

代码：

https://github.com/sphinx-doc/sphinx

Sphinx是如下网站的默认解决方案：

https://readthedocs.org/

Read the Docs网站包含了大量python库的帮助文档，还为另外一些库提供了Hosting服务，即便后者有独立的域名。

参考：

https://blog.csdn.net/preyta/article/details/73647937

使用Sphinx为你的python模块自动生成文档

https://www.ibm.com/developerworks/cn/opensource/os-sphinx-documentation/

使用sphinx制作简洁而又美观的文档

## python调用GTK函数的一般规则

众所周知，GTK库是用C语言编写的，其相关的文档提供的也是C函数的接口，python接口的文档相对较少，获得也不太容易。因此有必要掌握一下这方面基本的命名规则。（这里只讲方法，对深层次的调用原理不做探究。）

1）类初始化函数

C:`GtkWidget * gtk_button_new (void);`

python:`button = Gtk.Button()`

这里除了把C函数式的写法，替换成python的类的写法之外，并无其他差异。

2）普通类成员函数

C:`void gtk_container_add (GtkContainer *container, GtkWidget *widget);`

python:`button.add(image)`

可以看出，C函数的第一个表示self类指针的参数被省略掉了。

3）回调函数

这里以按钮的click事件回调为例：

C:`void user_function (GtkButton *button, gpointer user_data)`

python:

`button.connect("clicked", self.playToggled)`

`def playToggled(self, w):`

这里的情况要复杂的多。首先在事件回调注册的时候，由于我们并没有给user_data赋值，因此照理说playToggled函数，只有button这一个参数。但实际传递给playToggled函数的有两个参数，self是一个用于占位的参数，w对应button，没有东西对应user_data。

4）用于输出的参数

C:`void gst_message_parse_error (GstMessage *message, GError **gerror, gchar **debug);`

python:`err, debug = message.parse_error()`

这个例子中的gerror和debug都是用于输出的参数。如果只想得到其一，还可用以下方法:

`debug = message.parse_error()[2]`

5）枚举类型

C:

{% highlight c %}
enum GstSeekFlags
{
  GST_SEEK_FLAG_FLUSH,
  ...
}
{% endhighlight %}

python:`Gst.SeekFlags.FLUSH`

6）宏常量

C:`#define GST_CLOCK_TIME_NONE ((GstClockTime) -1)`

python:`Gst.CLOCK_TIME_NONE`

7）类型转换

大多数情况下，类型转换自动完成，并无什么问题。这里只讨论特殊的情况。

C:

{% highlight c %}
gst_element_seek (pipeline, 1.0, GST_FORMAT_TIME, GST_SEEK_FLAG_FLUSH,
                         GST_SEEK_TYPE_SET, time_nanoseconds,
                         GST_SEEK_TYPE_NONE, GST_CLOCK_TIME_NONE))
{% endhighlight %}

python:

{% highlight python %}
self.player.seek(1.0, Gst.Format.TIME, Gst.SeekFlags.FLUSH, Gst.SeekType.SET,\
                 time_nanoseconds, Gst.SeekType.NONE, Gst.CLOCK_TIME_NONE)
{% endhighlight %}

这里首先按照一般的方法，将C代码转化成python代码。但是运行之后，产生如下错误：

`OverflowError: long too big to convert`

究其原因，gst_element_seek的最后一个参数是uint64类型的。但python原生并不支持该类型，而是将之转换成int类型（实际上是int64类型），这样的话，GST_CLOCK_TIME_NONE的值显然超出了int64所能表示的范围。

解决的办法是使用ctypes库，将

`Gst.CLOCK_TIME_NONE`

改为

`c_long(Gst.CLOCK_TIME_NONE).value`

## 参考

https://mp.weixin.qq.com/s/PC0bGKzIC_GXLOcVqDAZmA

Python学习思维导图

https://mp.weixin.qq.com/s/_OmRvwFmvuuOpBf7DQG8IA

Python30个编程技巧

https://github.com/leisurelicht/wtfpython-cn

《What the f*ck Python!》中文版

https://mp.weixin.qq.com/s/-CaMHjsY580et8Hh_D2FSg

简约而不简单的Django新手图文教程

https://mp.weixin.qq.com/s/O5okcuVKuf339BZzhmxiew

13个Python GUI库

https://mp.weixin.qq.com/s/jHnkmpnOz1LApVCLJL-8Tw

如何写出优雅又地道的Python代码？

https://mp.weixin.qq.com/s/5xs1ivkrUAP_Rr9P-EMc5g

代码优化指南：人生苦短，我用Python。这篇blog主要介绍了如何追踪Python脚本的CPU使用情况。

https://mp.weixin.qq.com/s/HGH2e_0ocHv2VWsjOje9BQ

程序员必知的Python陷阱与缺陷列表

http://blog.csdn.net/linda1000/article/details/8315892

单引号、双引号和三双引号的区别

https://mp.weixin.qq.com/s/czqO4Lo1Jt9zqg2UKNlLYg

手把手教你用Python创建微信聊天机器人
