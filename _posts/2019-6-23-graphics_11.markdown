---
layout: post
title:  图像处理理论（十一）——CV/CG参考资源, 计算机图形学, 计算机体系结构
category: graphics 
---

* toc
{:toc}

# ILSVRC 2010考古

ILSVRC 2010的冠军是NEC和UIUC的联合队伍。这也是DL于2012年大放光彩之前比较杰出的成果。虽然现在它通常作为反面教材，出现在与DL的对比场景中，然而不可否认的是，它仍然是一个算法的杰作。

>林元庆，清华大学硕士+宾夕法尼亚大学博士（2008年）。原百度研究院院长。

![](/images/article/ILSVRC_2010.png)

上图是NEC算法的基本流程图。这里不打算描述整个算法，而仅对其中涉及的术语做一个解释。

# 模板匹配

https://blog.csdn.net/liyuanbhu/article/details/49837661

OpenCV学习笔记（模板匹配）

https://blog.csdn.net/xxboy61/article/details/38319757

OpenCV实现之模板匹配（Template Matching）

https://mp.weixin.qq.com/s/ZqFtDQ4OLHL94QTr-GXKnQ

OpenCV实现边缘模板匹配算法

https://zhuanlan.zhihu.com/p/110425960

模板匹配

# Superpixel

论文：

《Superpixels: An Evaluation of the State-of-the-Art》

超像素最直观的解释，便是把一些具有相似特性的像素“聚合”起来，形成一个更具有代表性的大“元素”。

而这个新的元素，将作为其他图像处理算法的基本单位。

一来大大降低了维度；二来可以剔除一些异常像素点。

至于根据什么特性把一个个像素点聚集起来，可以是颜色、纹理、类别等。

![](/images/img3/superpixel.jpg)

由于Superpixel的粒度在pixel和segmentation之间，因此又被称为over segmentation。

三维的Superpixel，也被称作Supervoxel。

参考：

https://zhuanlan.zhihu.com/p/50996404

超像素、语义分割、实例分割、全景分割 傻傻分不清？

https://www.zhihu.com/question/27623988

超像素(Superpixel)的大致原理以及State-of-the-art？

https://zhuanlan.zhihu.com/p/41874735

龙生龙，凤生凤，SLIC生超像素

# CV/CG参考资源

![](/images/img2/l_hires.jpg)

原图地址：

http://www.lenna.org/full/l_hires.jpg

>Lena Söderberg，1951年生，瑞典人。Playboy Playmate（1972.11）。

https://mp.weixin.qq.com/s/XyKQ9sg97eh5K7vDd14DsQ

一张大尺度美女图，竟然推进了图片算法的进步。。。

https://mp.weixin.qq.com/s/-CF69Soq9Bdw-Wsffyv9Hw

这40个冷知识，据说只有1%的人知道……颠覆你的认知！

----

https://github.com/gzr2017/ImageProcessing100Wen

图像处理入门100题

https://zhuanlan.zhihu.com/p/32752535

立体匹配成像算法BM，SGBM，GC，SAD一览

https://mp.weixin.qq.com/s/cVTfk0xK6F_gHRnoHYUxSw

计算机视觉基本原理介绍—RANSAC

https://blog.csdn.net/wanghanthu/article/details/52777512

Tracking算法：Discriminative Correlation Filter (DCF)

https://blog.csdn.net/wanghanthu/article/details/53375393

Kernelized Correlation Filters (KCF) Tracking算法

https://mp.weixin.qq.com/s/1lLrbi_Dtyq4ixMfR4pPnA

线性卷积积分及其在图像增强和特效方面的应用

https://blog.csdn.net/iverson_49/article/details/38160081

薄板样条函数(Thin plate splines)的讨论与分析

https://blog.csdn.net/autocyz/article/details/48136473

相关滤波跟踪（MOSSE）

https://blog.csdn.net/qq_17783559/article/details/82254996

MOSSE原理及代码解析

https://mp.weixin.qq.com/s/XqFe9d72CepdfTSOq2gWJg

半全局匹配SGM

https://mp.weixin.qq.com/s/3Z7DUr6s-XGsthF8WrrXDA

基于曲率的图像处理

https://mp.weixin.qq.com/s/F0KKqBjRG4w10Z16iJGkeg

页面扭曲矫正

https://mp.weixin.qq.com/s/bq_CPJU66lx1li8lxbAFDg

如何从失焦的图像中恢复景深并将图像变清晰？

https://mp.weixin.qq.com/s/nAxbljcLeGWsPK6ITunzTA

深度学习对机器视觉的影响

----

http://coderskychen.cn/2015/12/11/%E6%9A%97%E9%80%9A%E9%81%93%E5%8E%BB%E9%9B%BE%E7%AE%97%E6%B3%95%E7%9A%84C-%E5%AE%9E%E7%8E%B0%E4%B8%8E%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/

暗通道去雾算法的C++实现与优化（一）

http://coderskychen.cn/2015/12/11/%E6%9A%97%E9%80%9A%E9%81%93%E5%8E%BB%E9%9B%BE%E7%AE%97%E6%B3%95%E7%9A%84C-%E5%AE%9E%E7%8E%B0%E4%B8%8E%E4%BC%98%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89/

暗通道去雾算法的C++实现与优化（二）

这两篇blog介绍了何恺明的成名之作。

https://mp.weixin.qq.com/s/-ALThz4RR9tIhTl5cVbJ8Q

生成组合仿射变换矩阵，裁剪+缩放+平移+斜切+旋转

https://mp.weixin.qq.com/s/B8LU892NA7Pz7-HjI58LWg

Python还能实现图片去雾？FFA去雾算法、暗通道去雾算法用起来！

https://mp.weixin.qq.com/s/mEUhBnEuGxbU6_wALt0crw

基于Python查找图像中最常见的颜色

# 计算机图形学

https://mp.weixin.qq.com/s/hI9Z3l2eVJxkPbL8zG5uGA

图形学基础，427页pdf

http://15462.courses.cs.cmu.edu/fall2020/courseinfo

Computer Graphics

https://www.zhihu.com/column/graphicon

一个图形学方面的专栏

https://github.com/KrisYu/computer-graphics-from-scratch-Notes

一个图形学方面的专栏

http://blog.csdn.net/pizi0475/article/details/6650851

全局光照模型与Rendering Equation

https://www.zhihu.com/question/29863225

Ray Tracing，Ray Casting，Path Tracing，Ray Marching的区别？

https://www.zhihu.com/question/310930978

实时光线追踪（real-time ray tracing）技术还有哪些未攻克的难题？

https://www.jianshu.com/p/4ec47871973c

Path Tracing介绍

https://mp.weixin.qq.com/s/h-vgHkzLjh9AAa6Z0lZqlg

基于物理渲染(PBR)的车漆技术

https://zhuanlan.zhihu.com/p/32095589

在《硬影像》与罗登老师/导演聊渲染技术

https://blog.csdn.net/jaccen2012/article/details/80328043

跨平台渲染引擎简介

https://www.cnblogs.com/mengdd/p/3237991.html

图形学理论知识BRDF双向反射分布函数（Bidirectional Reflectance Distribution Function）

https://zhuanlan.zhihu.com/p/163305630

如何判断点在三角形内部

## 术语

Material Point Method（物质点法）

## Taichi

Taichi是胡渊鸣开发的一套计算机图形库。它拥有一套特有的DSL，并可将之编译为能在不同backend硬件上运行程序。

官网：

http://taichi.graphics/

代码：

https://github.com/yuanming-hu/taichi

胡渊鸣还开发了一个物理模拟方面的自动微分器——DiffTaichi：

https://github.com/yuanming-hu/difftaichi

参考：

https://zhuanlan.zhihu.com/p/97700605

99行代码的《冰雪奇缘》

https://mp.weixin.qq.com/s/zPvvf1VptQ1M7iVEcxN-AQ

计算机图形也能自动可微：MIT学神的微分太极框架开源

## Halide

Halide也是一个高性能的图形DSL+编译器的项目。它影响了后来的TVM、Taichi等计算引擎项目。

如果你想用普通的CPU做加速，又不想去优化算法，那么halide将是非常优秀的选择。唯一要做的，就是把算法用halide重写一遍即可。

官网：

https://halide-lang.org/

参考：

https://www.zhihu.com/question/294625837

如何评价Halide？

https://zhuanlan.zhihu.com/p/122217135

halide编程技术指南

## Lift

Lift也是一种并行编程及优化的语言。

官网：

http://www.lift-project.org/

参考：

https://www.zhihu.com/question/313697268

如何评价lift编程语言?

# 计算机体系结构

按照Michael J. Flynn的分类方法，计算机的体系结构可分为如下四类：

**Single instruction stream single data stream (SISD)**

**Single instruction stream, multiple data streams (SIMD)**

**Multiple instruction streams, single data stream (MISD)**

**Multiple instruction streams, multiple data streams (MIMD)**

![](/images/article/simd_mimd.png)

原图地址：

https://en.wikipedia.org/wiki/Flynn%27s_taxonomy

论文：

《Very High-Speed Computing Systems》

>Michael J. Flynn，1934年生，美国计算机科学家。Manhattan College本科（1955）+Syracuse University硕士（1960）+Purdue University博士（1961）。Stanford教授，IEEE Fellow，ACM Fellow。

CPU通常是SISD和SIMD的，而GPU则是SIMD的，超级计算机则是MIMD的。

SIMT: Single Instruction Multiple Threads.

SIMT最早是Nvidia发明的概念，仅用于GPU领域。它和SIMD的差异很小。

参考：

https://zhuanlan.zhihu.com/p/31271788

SIMD指令集

https://zhuanlan.zhihu.com/p/113360369

从现代GPU编程角度看SIMD与SIMT

## 术语

Shared Virtual Memory，SVM

Memory consistency model

Multisample anti-aliasing，MSAA

## 参考

https://blog.csdn.net/do2jiang/article/details/4545889

流水线、超流水线、超标量技术对比

https://blog.csdn.net/edonlii/article/details/8755205

单发射与多发射

https://mp.weixin.qq.com/s/FJX9eeRkxS5nJ4XIhRVwkg

从ServerSwitch到SONiC Chassis：数据中心交换机技术的十年探索历程

## GPU体系结构

![](/images/img4/SGI.png)

上图是SGI公司1993年的一款显卡的模块图。可以看出，早期的显卡是一个具有固定流水线的专用芯片，只能处理特定任务，没有多少可编程的能力。

![](/images/img4/Tesla.png)

到了2005年左右，这些渲染流水线的功能被统一到一个叫做Shader Processor的可编程单元中。此后，显卡也被称为GPU（Graphics Processing Unit）。

![](/images/img4/Shader.png)

无论是CPU，还是GPU，或者是现在比较火的NPU，一个Processing Unit，一般都是由上图所示的三部分组成：

- Fetch/Decode。数据的输入/输出单元。

- ALU（arithmetic and logic unit）。运算单元。

- Execution Context。寄存器单元。

CPU强调单core的极致性能，因此广泛使用了如下技术：

- Out-of-order control logic

- Fancy branch predictor 

- Memory pre-fetcher

![](/images/img4/GPU.png)

GPU不追求单core的性能，因此也没有那些复杂的控制逻辑。这样省下来的电路，可以变成更多的ALU。由于数据处理的局部性，通常可以若干ALU共享一套Fetch/Decode和Ctx。
