---
layout: post
title:  数学狂想曲（四）——矩阵&向量的积, 20世纪10大算法, 双曲函数和悬链线
category: math 
---

# 统计杂谈

### Mersenne Twister（续）

官方的代码由于要考虑各种兼容性，写的复杂无比，这里有一个精简版：

https://github.com/antkillerfarm/antkillerfarm_crazy/blob/master/Tool/Gcc/random/philox.c

还有一个进阶版，增加了多线程并行生成、均匀分布变换、正态分布变换的功能：

https://github.com/antkillerfarm/antkillerfarm_crazy/blob/master/Tool/Gcc/random/philox_1.c

----

https://bashtage.github.io/randomgen/index.html

这是一个RNG（Random Number Generation）项目，集成了多种算法。

参考：

https://blog.csdn.net/wuha391/article/details/78486021

随机算法mt19937

https://blog.csdn.net/caimouse/article/details/55668071

mt19937是什么鬼？

http://michaelbrundage.com/note/2005/01/05/random-number-generation/

这是一篇RNG方面的综述。

http://www.azillionmonkeys.com/qed/random.html

这篇blog讲述了将随机整数变为浮点数，需要注意的问题。

## 统计力学与组合优化

MCMC和Gibbs Sampling最早都是统计力学的概念，后来才被用于机器学习领域。现将统计力学与组合优化的对应关系罗列如下：

| 统计力学 | 组合优化 |
|:--:|:--:|
| 样本 | 问题实例 |
| 状态（构形） | 构形 |
| 能量 | 代价函数 |
| 温度 | 控制参数 |
| 基态能量 | 最小代价 |
| 基态构形 | 最小构形 |

## 频率统计学派 vs. 贝叶斯学派

对数学史感兴趣的朋友，可以看看陈希孺院士的《数理统计学简史》一书。rickjin文章的内容有相当部分取自该书。

>注：陈希孺，1934～2005，数理统计学家。1956年毕业于武汉大学数学系，1997年当选为中国科学院院士。

该书中关于频率统计学派和贝叶斯学派的争议，引起了我的注意。

频率统计学派是所谓的正统派，由于其简单且便于理解的特点，多数入门级的数理统计学教程，一般都是按照该学派的思路写的。

而贝叶斯学派可谓另辟蹊径，它和频率统计学派的差异，参见[《机器学习（九）》](/ml/2016/09/02/Machine_Learning_9.html#Bayes)。由于该派系的思想比较新颖，我一度以为它和频率统计学派的关系，就犹如相对论之于经典力学。

然而，陈希孺院士告诉我们，两者各有优劣，尚未到一方决出胜负的阶段。比如，贝叶斯学派的先验估计，既是其成功的奥秘，也是其不成功的软肋。比如，对于“无信息先验分布”，目前尚处于“信则灵，不信则无”的境地。

陈院士的观点是：**各取所长，为我所用**。

近年来，贝叶斯学派的广泛应用，更多的原因在于计算机的计算能力大幅提升之后，由于随机样本获取成本的下降，导致了蒙特卡洛方法大行其道。

参考：

https://mp.weixin.qq.com/s/uFeyZ-6gFo2oOYKTnt2R9Q

揭示贝叶斯公式应用中的认识误区

https://mp.weixin.qq.com/s/AsZyjwUclEoxxl2VRBekHA

拟合目标函数后验分布的调参利器：贝叶斯优化

https://mp.weixin.qq.com/s/psMlGLOZcmX-SmEKr2gUOg

从贝叶斯定理到概率分布：综述概率论基本定义

http://mp.weixin.qq.com/s/axwRMb8lCyMEh2WGIZR1rA

实例详解贝叶斯推理的原理

https://mp.weixin.qq.com/s/rTpmFvgRC-cKbVxQkygdNQ

从概率论到多分类问题：综述贝叶斯统计分类

https://mp.weixin.qq.com/s/TQfaBddaDh_jIhcaKJFx7w

概率论之概念解析：用贝叶斯推断进行参数估计

https://mp.weixin.qq.com/s/i4G2k5yZZV_Q8U4T30XX2A

概率论之概念解析：边缘化（Marginalisation）

https://mp.weixin.qq.com/s/Jcwxx5oxACjDEVZr9qgPGQ

一个我们几乎每天都在使用的数学工具

https://mp.weixin.qq.com/s/vuFBY99-TDdyQELcUdXjTQ

浅谈贝叶斯和MCMC

https://mp.weixin.qq.com/s/eIiFLW5pShrCnK5mZalLSw

贝叶斯统计数据如何说服我去健身房

# 矩阵&向量的积

矩阵&向量有很多种积的定义，特罗列如下：

## 向量的数乘

Scalar multiplication的定义如下：

$$c\mathbf{a}=c[a_1,\dots,a_n]=[ca_1,\dots,ca_n]$$

## 向量的点积

Dot product，又称inner product。

代数定义：

$$\mathbf{a}\cdot\mathbf{b}=\sum_{i=1}^n a_ib_i=a_1b_1+a_2b_2+\cdots+a_nb_n$$

几何定义：

$$\mathbf{a}\cdot\mathbf{b}=\|\mathbf{a}\|\ \|\mathbf{b}\|\cos(\theta)$$

复变积分定义：

$$\left\langle \psi , \chi \right\rangle = \int_a^b \psi(x) \overline{\chi(x)} d x $$

## 矩阵的积

matrix product的定义如下（以3阶方阵为例）：

$$\mathbf{AB} = \begin{pmatrix}
a & b & c \\
p & q & r \\
u & v & w
\end{pmatrix} \begin{pmatrix}
\alpha & \beta & \gamma \\
\lambda & \mu & \nu \\
\rho & \sigma & \tau \\
\end{pmatrix} =\begin{pmatrix}
a\alpha + b\lambda + c\rho & a\beta + b\mu + c\sigma & a\gamma + b\nu + c\tau \\
p\alpha + q\lambda + r\rho & p\beta + q\mu + r\sigma & p\gamma + q\nu + r\tau \\
u\alpha + v\lambda + w\rho & u\beta + v\mu + w\sigma & u\gamma + v\nu + w\tau
\end{pmatrix}$$

可以看出，积矩阵的每个元素是矩阵A、B相应行列向量的内积。

## 向量的向量积

Cross product是一个向量，其定义如下：

$$\mathbf{a} \times \mathbf{b} = \left\| \mathbf{a} \right\| \left\| \mathbf{b} \right\| \sin (\theta) \ \mathbf{n}$$

它还有个更出名的定义：

$$\mathbf{u\times v} = \begin{vmatrix}
  \mathbf{i}&\mathbf{j}&\mathbf{k}\\
  u_1&u_2&u_3\\
  v_1&v_2&v_3\\
\end{vmatrix}$$

由于Cross product和a、b所在平面垂直，因此多用于求解平面的法向量，且该法向量的方向符合“右手定则”。

## 向量的混合积

triple product，又称mixed product或box product。

$$\mathbf{a}\cdot(\mathbf{b}\times \mathbf{c}) \equiv \det \begin{bmatrix}
  a_1 & a_2 & a_3 \\
  b_1 & b_2 & b_3 \\
  c_1 & c_2 & c_3 \\
\end{bmatrix}={\rm det}\left(\mathbf{a},\mathbf{b},\mathbf{c}\right)$$

混合积相当于求解以a、b、c为棱的六面体的体积。由体积的唯一性，易得混合积具有交换律和结合律。

## 向量的笛卡尔积

Cartesian product实际上是集合论中的概念。

$$A\times B = \{1,2\} \times \{3,4\} = \{(1,3), (1,4), (2,3), (2,4)\}$$

## 向量的张量积

Tensor product，又称outer product。

$$\begin{align}\mathbf{u} \otimes \mathbf{v} = \mathbf{u} \mathbf{v}^\mathrm{T}
= \begin{bmatrix}u_1 \\ u_2 \\ u_3 \\ u_4\end{bmatrix}
\begin{bmatrix}v_1 & v_2 & v_3\end{bmatrix}
= \begin{bmatrix}u_1v_1 & u_1v_2 & u_1v_3 \\ u_2v_1 & u_2v_2 & u_2v_3 \\ u_3v_1 & u_3v_2 & u_3v_3 \\ u_4v_1 & u_4v_2 & u_4v_3\end{bmatrix}\end{align}$$

可以看出，Tensor product和Cartesian product，虽然形式上都是各向量的组合，然而前者是2维的，而后者是1维的。

>外积这个术语，在中文中也可以指Cross product，所以最好避免使用外积这个术语，避免混淆。

## 矩阵的张量积

张量积推广到矩阵，即所谓Kronecker product。

>注：Leopold Kronecker，1823～1891，德国数学家。柏林大学博士和教授。导师Dirichlet。他最牛逼的地方是，当Riemann去世的时候，拒绝了哥廷根大学的offer。而这个位置的前任分别是：Carl Gauss、Dirichlet、Riemann。

$$\mathbf{A}\otimes\mathbf{B} = \begin{bmatrix} a_{11} \mathbf{B} & \cdots & a_{1n}\mathbf{B} \\ \vdots & \ddots & \vdots \\ a_{m1} \mathbf{B} & \cdots & a_{mn} \mathbf{B} \end{bmatrix}$$

## Hadamard product

又叫Schur product或entrywise product。

>注：Jacques Salomon Hadamard，1865～1963，法国数学家。巴黎高等师范学校博士，波尔多大学教授。他曾于1936年访华，执教于清华大学。中国偏微分方程研究事业的主要创始人之一——吴新谋教授，就是他的学生。

$$\left(\begin{array}{ccc}
    \mathrm{a}_{11} & \mathrm{a}_{12} & \mathrm{a}_{13}\\
    \mathrm{a}_{21} & \mathrm{a}_{22} & \mathrm{a}_{23}\\
    \mathrm{a}_{31} & \mathrm{a}_{32} & \mathrm{a}_{33}
  \end{array}\right) \circ \left(\begin{array}{ccc}
    \mathrm{b}_{11} & \mathrm{b}_{12} & \mathrm{b}_{13}\\
    \mathrm{b}_{21} & \mathrm{b}_{22} & \mathrm{b}_{23}\\
    \mathrm{b}_{31} & \mathrm{b}_{32} & \mathrm{b}_{33}
  \end{array}\right) = \left(\begin{array}{ccc}
    \mathrm{a}_{11}\, \mathrm{b}_{11} & \mathrm{a}_{12}\, \mathrm{b}_{12} & \mathrm{a}_{13}\, \mathrm{b}_{13}\\
    \mathrm{a}_{21}\, \mathrm{b}_{21} & \mathrm{a}_{22}\, \mathrm{b}_{22} & \mathrm{a}_{23}\, \mathrm{b}_{23}\\
    \mathrm{a}_{31}\, \mathrm{b}_{31} & \mathrm{a}_{32}\, \mathrm{b}_{32} & \mathrm{a}_{33}\, \mathrm{b}_{33}
  \end{array}\right)$$

参考：

https://mp.weixin.qq.com/s/K_aNhzaxmchynDWTE1QFCQ

给你一些点与线，只用动画就能看懂张量乘法，还能证明迹循环定理

# 20世纪10大算法

2000年，IEEE评选出20世纪10大算法。名单如下：

1.[Metropolis Algorithm for Monte Carlo](http://en.wikipedia.org/wiki/Metropolis_Algorithm)

2.[Simplex Method for Linear Programming](http://en.wikipedia.org/wiki/Simplex_Method)

3.[Krylov Subspace Iteration Methods](http://en.wikipedia.org/wiki/Krylov_subspace_methods)

4.[The Decompositional Approach to Matrix Computations](http://en.wikipedia.org/wiki/Matrix_(mathematics)#Decomposition)

5.[The Fortran Optimizing Compiler](http://en.wikipedia.org/wiki/Fortran#History)

6.[QR Algorithm for Computing Eigenvalues](http://en.wikipedia.org/wiki/QR_algorithm)

7.[Quicksort Algorithm for Sorting](http://en.wikipedia.org/wiki/Quicksort)

8.[Fast Fourier Transform](http://en.wikipedia.org/wiki/Fast_Fourier_Transform)

9.[Integer Relation Detection](http://en.wikipedia.org/wiki/Integer_relation_algorithm)

10.[Fast Multipole Method](http://en.wikipedia.org/wiki/Fast_Multipole_Method)

详细内容参见：

http://www.uta.edu/faculty/rcli/TopTen/topten.pdf

中文版本：

http://blog.csdn.net/v_JULY_v/article/details/6127953

类似的，还有奥地利符号计算研究所（Research Institute for Symbolic Computation，简称RISC）的Christoph Koutschan博士，针对计算机科学家所做的调查，选出的最重要的32个算法：

https://mp.weixin.qq.com/s/AFTaowkCz1pfFzaMDen-RA

# 双曲函数和悬链线

悬链线 (Catenary) 是一种曲线，因其与两端固定的绳子在均匀引力作用下下垂相似而得名。适当选择坐标系后，悬链线的方程是一个双曲余弦函数。

悬链线背后的故事和推导，百度百科已经比较详细了，不再赘述。参见：

http://baike.baidu.com/view/45656.htm
