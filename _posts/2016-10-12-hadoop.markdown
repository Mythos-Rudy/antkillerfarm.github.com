---
layout: post
title:  Hadoop
category: AI 
---

* toc
{:toc}

# Hadoop

最近（2016.4），参加公司组织的内部培训，对Hadoop有了一些认识，特记录如下。

## IOE

![](/images/img2/IOE.jpg)

在Google开发GFS之前，业界主流的数据库方案是IOE，即：**IBM大型机+Oracle数据库+EMC存储设备**。

这套方案的主要缺陷在于：

1.服务上限有限。单个机器再强也有上限，对于PB级数据有时会力不从心。

2.IOE方案是商用的专有方案，价格高昂。

## 概述

Hadoop项目由Doug Cutting创建。Doug Cutting也是Lucene项目的创建者。

PS：Lucene是我2007年学习搜索引擎技术时，所接触到的开源项目。回想起来，简直恍如隔世啊。

官网：

http://hadoop.apache.org/

官方文档：

http://hadoop.apache.org/docs/current/

广义的Hadoop包含一个庞大的生态圈：

http://cqwjfck.blog.chinaunix.net/uid-22312037-id-3969789.html

Hadoop初探之Hadoop生态圈

http://www.360doc.com/content/14/0113/17/15109633_345010019.shtml

Hadoop的“生态圈”

狭义的Hadoop包含如下组件：

>Hadoop Common   
>Hadoop Distributed File System(HDFS)   
>Hadoop YARN   
>Hadoop MapReduce

![](/images/article/big_data.png)

![](/images/img3/hadoop.png)

## 编译

Hadoop目前不在Ubuntu的官方软件仓库中，无法使用apt-get安装。使用源代码编译Hadoop的相关步骤，可在源码包的BUILDING.txt中找到。这里仅作为补遗之用。总的来说，如无必要还是直接下载bin包比较好，编译还是很麻烦的。

### 安装FindBugs

Hadoop的大部分软件依赖，都可以使用apt-get安装。BUILDING.txt里已经写的很详细了。

FindBugs是一个Java代码的静态分析检查工具。它的官网：

http://findbugs.sourceforge.net/index.html

它的安装方法有3种：

1.源代码安装。下载源代码之后，运行`ant build`，然后设定相关路径，以供Hadoop使用。

2.apt-get安装。FindBugs目前不在Ubuntu 14.04的软件仓库中，而在Ubuntu 15.10的软件仓库中，需要设置源方可安装。这种方法也需要设定相关路径，以供Hadoop使用。

2.maven安装。

`mvn compile findbugs:findbugs`

这种方法最简单。安装完成之后的FindBugs位于maven repository中，而后者通常在~/.m2/repository/下。

这种方法的好处是：由于Hadoop使用maven编译，maven安装之后，可以免去设置路径的步骤。但坏处是：其他不用maven的程序，无法使用该软件。

这一步只要不出下载不成功之类的错误，就算成功。错误留给下一步来解决。

PS：maven下载的文件，大约有180MB，且多为小文件，初次运行相当费时。

### 编译Hadoop

`mvn package -Pdist -DskipTests -Dtar`

这里一定要`-DskipTests`，原因是test不仅速度非常慢，会导致系统响应缓慢，而且即使是官方代码，也不一定能通过所有的test case。

编译的结果在hadoop-dist/target下

## 安装

Hadoop有Single Node和Cluster两种安装模式。一般的部署，当然采用后者。得益于Java的可移植性，Hadoop甚至可以部署到由Raspberry Pi组成的集群中。

前者主要用于开发和学习之用。这里只讨论前者。

Single Node又可分为两种模式：Standalone和Pseudo-Distributed。前者一般仅用于检验程序逻辑的正确性，因为这种模式下，并没有Hadoop常见的各种节点和HFS的概念，所有的程序都运行在一个Java进程中。而后者在配置和运行方面，与Cluster已经相差无几。

http://www.cnblogs.com/serendipity/archive/2011/08/23/2151031.html

## CDH

Cloudera’s Distribution Including Apache Hadoop，简称CDH，是目前用的比较多的Hadoop版本，相比于Apache官方的Hadoop来说，有以下优点：

1.CDH基于稳定版Apache Hadoop，并应用了最新Bug修复或者Feature的Patch。Cloudera常年坚持季度发行Update版本，年度发行Release版本，更新速度比Apache官方快，而且在实际使用过程中，CDH表现无比稳定，并没有引入新的问题。

2.CDH支持Yum/Apt包，Tar包，RPM包，Cloudera Manager四种方式安装，可自动处理软件包之间的依赖和版本匹配的问题。

官网：

www.cloudera.com/downloads/cdh.html

## 何时使用hadoop fs、hadoop dfs与hdfs dfs命令

hadoop fs：使用面最广，可以操作任何文件系统。

hadoop dfs与hdfs dfs：只能操作HDFS文件系统相关（包括与Local FS间的操作），前者已经Deprecated，一般使用后者。

这些命令的选项大部分与linux shell相同，差异点主要在于：

1.HDFS->Local FS。

`hadoop fs -get`

1.Local FS->HDFS。

`hadoop fs -put`

## 服务端口

Hadoop自带了一些web服务端口，如下表所示：

| 默认端口 | 设置位置 | 描述信息 |
|:--|:--|:--|
| 8020 |  | namenode RPC交互端口 |
| 8021 |  | JT RPC交互端口 |
| 8080 |  | Storm UI |
| 50030 | mapred.job.tracker.http.address | JOBTRACKER的HTTP服务器和端口 |
| 50070 | dfs.http.address | NAMENODE的HTTP服务器和端口 |
| 50010 | dfs.datanode.address | DATANODE控制端口，主要用于DATANODE初始化时，向NAMENODE提出注册和应答请求 |
| 50020 | dfs.datanode.ipc.address | DATANODE的RPC服务器地址和端口 |
| 50060 | mapred.task.tracker.http.address | TASKTRACKER的HTTP服务器和端口 |
| 50075 | dfs.datanode.http.address | DATANODE的HTTP服务器和端口 |
| 50090 | dfs.secondary.http.address | 辅助DATANODE的HTTP服务器和端口 |

## jps

jps是Java提供的虚拟机进程查看工具。

使用方法：

`jps -ml`

查到的进程，可用如下方法kill：

`kill -9 <进程号>`

和hadoop有关的进程包括：

| 名称 | 说明 |
|:--|:--|
| QuorumPeerMain | ZooKeeper Daemon |
| DataNode | HDFS Data Node |
| HRegionServer | Hbase Region Server |
| HMaster | Hbase Master |
| NodeManager | YARN Node Manager |
| ResourceManager | YARN Resource Manager |
| nimbus | Storm nimbus |
| supervisor | Storm supervisor |

其他JDK工具还有：

jshell：交互式的Java命令行工具。

jcmd：一个强大的工具集。

jhsdb：一个可视化的Java内存调试工具。

jmap：查看堆信息。

jstack：查看栈信息。

jstat：一个JVM监控工具

参考：

https://www.cnblogs.com/noKing/p/9457541.html

JDK常用命令行工具

## MapReduce编程

教程：

http://hadoop.apache.org/docs/current/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html

## 参考

https://mp.weixin.qq.com/s/Koz2xOnmVgKFeCr2Xqe9VQ

YARN，母系社会的运行架构

https://mp.weixin.qq.com/s/goXmXMc8JyAgU_GKyWXDzw

白话Hadoop架构原理

https://mp.weixin.qq.com/s/s-kOquVbIuJAMSQqkfmaAA

Hadoop之HDFS简介

https://mp.weixin.qq.com/s/0qgaJnZjYsf0WP2z5yGgrg

面试集锦：HDFS

https://mp.weixin.qq.com/s/9A0z0S9IthG6j8pZe6gCnw

YARN在字节跳动的优化与实践

# Pytorch+

https://www.zhihu.com/question/303070254

PyTorch中在反向传播前为什么要手动将梯度清零？

https://mp.weixin.qq.com/s/HQnI8rzPvZN6Q_5c8d1nVQ

唯快不破：基于Apex的混合精度加速

https://mp.weixin.qq.com/s/NupSd4e01cvQ3CRnjy1npw

超原版速度110倍，针对PyTorch的CPU到GPU张量迁移工具开源

https://zhuanlan.zhihu.com/p/87572724

一文看懂align_corners

https://www.zhihu.com/question/274635237

Pytorch有什么节省内存（显存）的小技巧？

https://zhuanlan.zhihu.com/p/76638962

Pytorch分布式训练

https://mp.weixin.qq.com/s/0aSBHvscloEnPMRLyNjQsg

PyTorch分布式训练简明教程

https://mp.weixin.qq.com/s/S1dRfmqpiLzR3tnsocmfvw

Pytorch中的数据增强方式最全解释

https://mp.weixin.qq.com/s/BTFMvV2ppmRBXYg95YlK4w

PyTorch实现L2和L1正则化的方法

https://zhuanlan.zhihu.com/p/98535650

研究生应当掌握的并行训练方法（单机多卡）

https://zhuanlan.zhihu.com/p/86441879

pytorch多gpu并行训练

https://mp.weixin.qq.com/s/52Wz4pUI8egKugMFuknWKw

Pytorch中的Distributed Data Parallel与混合精度训练（Apex）

https://mp.weixin.qq.com/s/KP4etDrGlJmRAMQmR1mTJA

基于C++的PyTorch模型部署

https://mp.weixin.qq.com/s/uUxwMFGF9nJiraVQsIqu2Q

PyTorch重大更新：将支持自动混合精度训练！

https://zhuanlan.zhihu.com/p/145427849

PyTorch Parallel Training（单机多卡并行、混合精度、同步BN训练指南文档）

https://mp.weixin.qq.com/s/Y6sJhnmjRwN2uopHgr7nFA

让PyTorch更轻便，这款深度学习框架你值得拥有！

https://mp.weixin.qq.com/s/_3iJCO4gQz7mWcW7G8kimQ

Pytorch实现卷积神经网络训练量化（QAT）

https://zhuanlan.zhihu.com/p/104019160

PyTorch常用代码段

https://mp.weixin.qq.com/s/MJgQqwWa4wyNgtKZaX_ADQ

Tensorboard可视化与Hook机制

https://mp.weixin.qq.com/s/x1Z4jkMvfo4mD-_rKqvjuw

在PyTorch中使用DistributedDataParallel进行多GPU分布式模型训练

https://mp.weixin.qq.com/s/jnV_4REXOR-ema1kOC95Nw

跨越重重“障碍”，我从PyTorch转换为了TensorFlow Lite

https://mp.weixin.qq.com/s/0VNTBY1KrOXBldRoi1Ky5A

Pytorch autograd,backward详解

https://zhuanlan.zhihu.com/p/272767300

Pytorch转ONNX-理论篇

https://zhuanlan.zhihu.com/p/273566106

Pytorch转ONNX-实战篇1（tracing机制）

https://zhuanlan.zhihu.com/p/286298001

Pytorch转ONNX-实战篇2（实战踩坑总结）

# 模型压缩与加速进阶++

https://mp.weixin.qq.com/s/NsvjADgQZrYkUGNN6fzXVg

驭势科技推出“东风网络”：如何找到速度-精度的最优解？

https://mp.weixin.qq.com/s/HzgRHtVwdmW6_m7OJwK-ew

SysML 2019论文解读：Accurate and Efficient 2-Bit Quantized Neural Netowrks

https://mp.weixin.qq.com/s/oah61YozMB2fMfpDqPwHjw

Deep Compression神经网络压缩经典之作

https://mp.weixin.qq.com/s/ulrPhfsPunKAWYohBhkh9w

寻找最佳的神经网络架构，韩松组两篇论文解读

https://mp.weixin.qq.com/s/oDwvMtET0moHVGgtQLfCow

5个可以让你的模型在边缘设备上高效推理的算法

https://mp.weixin.qq.com/s/nbEa0csbaMvEM3TCI3fn0Q

当前模型剪枝有哪些可用的开源工具？

https://mp.weixin.qq.com/s/0_66CScEk0qhGlTvfpmqBA

2019年的最后一个月，这里有6种你必须要知道的最新剪枝技术

https://mp.weixin.qq.com/s/u94NZVwb_ywqjTMla2upbQ

模型压缩究竟在做什么？我们真的需要模型压缩么？

https://mp.weixin.qq.com/s/Qr2Q2ARht0pEP3F8l3k98g

滴滴&东北大学提出自动结构化剪枝压缩算法框架，性能提升高达120倍

https://zhuanlan.zhihu.com/p/104447447

剪枝实践：图像检索如何加速和省显存？

https://zhuanlan.zhihu.com/p/105064255

Slimmable Networks

https://mp.weixin.qq.com/s/EBCcBWob_iFa51-gOVPYQA

揭秘微信“扫一扫”识物为什么这么快？

https://mp.weixin.qq.com/s/H6OTkpdIgSdugDrEMBLybw

超越MobileNetV3的轻量级网络（GhostNet）

https://mp.weixin.qq.com/s/Vh5Y9Ru_hbN0CzM7_xGg6A

超越GhostNet！吊打MobileNetV3！MicroNet通过极低FLOPs实现图像识别

https://mp.weixin.qq.com/s/KuZ-mZKt7bTWhzygK1lmSg

加速目标检测

https://zhuanlan.zhihu.com/p/261146248

原生模型上的战斗
