---
layout: post
title:  C/C++编程心得（三）, boost
category: language 
---

# C/C++编程心得

## 类型转换（续）

{% highlight cpp %}
template <class Derived, class Base>
inline auto polymorphic_pointer_cast(Base x);
// Throws: std::bad_cast if ( dynamic_pointer_cast<Derived>(x) == 0 )
// Returns: dynamic_pointer_cast<Derived>(x)

template <class Derived, class Base>
inline auto polymorphic_pointer_downcast(Base x);
// Effects: assert( dynamic_pointer_cast<Derived>(x) == x );
// Returns: static_pointer_cast<Derived>(x)
{% endhighlight %}

参考：

https://www.cnblogs.com/chenyangchun/p/6795923.html

C++强制类型转换：static_cast、dynamic_cast、const_cast、reinterpret_cast

## std::bind & std::placeholders

{% highlight cpp %}
void f(int n1, int n2, int n3, const int& n4, int n5)
{
    std::cout << n1 << ' ' << n2 << ' ' << n3 << ' ' << n4 << ' ' << n5 << '\n';
}

auto f2 = std::bind(f, _3, std::bind(g, _3), _3, 4, 5);
f2(10, 11, 12); // 进行到 f(12, g(12), 12, 4, 5); 的调用
{% endhighlight %}

## 特化（traits）

{% highlight cpp %}
template<class T1, class T2>      // 普通版本，有两个模板参数
class B { ..... };

template<class T2>         // 偏特化版本，指定其中一个参数，即指定了部分类型
class B<int , T2> { ..... };// 当实例化时的第一个参数为int 则会优先调用这个版本
{% endhighlight %}

**偏特化**的条件：

1.必须有一个主模板。

2.模板类型被部分明确化。

相应的，如果模板参数全被指定，则为**全特化**。

对主版本模板类、全特化类、偏特化类的调用优先级从高到低进行排序是：全特化类>偏特化类>主版本模板类。

traits一方面，在面对不同的输入类时，能找到合适的返回型别；另一方面，当型别对应有不同的实现函数的时候，能起到一个提取型别然后分流的作用。

标准库已经内置了一些常见的traits操作，例如std::pointer_traits，该模板可返回迭代器指向对象的型别。

参考：

https://www.cnblogs.com/yyehl/p/7253254.html

C++ 模板偏特化－来自STL的思考

https://www.cnblogs.com/mangoyuan/p/6446046.html

C++ traits技术浅谈

## typename

`vector<T>::size_type`可能有三种解释：

- 静态数据成员

- 静态成员函数

- 嵌套类型

前两者比较好区分，函数名后一般有括号。但是嵌套类型就不好区分了，因此需要用typename关键字指定之。

参考：

https://blog.csdn.net/zhangxiao93/article/details/50569924

C++ typedef typename作用

## C++ thread

长期以来，C/C++的线程编程主要依赖pthread库，但是这个情况在C++ 11之后有所改观，因为C++ 11的标准库已经支持thread了。

thread基本用法：

https://www.runoob.com/w3cnote/cpp-std-thread.html

std::thread

配合thread还提出了thread_local关键字：

https://www.cnblogs.com/pop-lar/p/5123014.html

thread_local变量

mutex同步：

https://www.cnblogs.com/xudong-bupt/p/9194394.html

C++并发编程，std::unique_lock与std::lock_guard区别示例

条件等待：

http://hengyunabc.github.io/cpp11-mutex-lock-condition/

C++11中的mutex, lock，condition variable实现分析

https://www.zhihu.com/question/24116967

pthread_cond_wait为什么需要传递mutex参数？

https://segmentfault.com/a/1190000006679917

条件变量（Condition Variable）

## explicit

可以通过将构造函数声明为explicit，来防止隐式类型转换。explicit关键字只能用于类内部的构造函数声明上，而不能用在类外部的函数定义上。

参考：

https://www.cnblogs.com/winnersun/archive/2011/07/16/2108440.html

C++中explicit关键字的作用

## 小细节

对于std::vector来说，begin()/end()返回iterator，而front()/back()返回的是element。

----

除了for循环遍历之外，C++还可以用std::for_each/std::find_if进行循环遍历，尤其是后者可以用于条件筛选。

----

std::map用二叉树实现，相当于Java中的TreeMap，而std::unordered_map用hash表实现，相当于Java中的HashMap。

C++11之前的一些非标准STL还实现了一种叫做hash_map的容器，原理上也是使用hash表，C++11标准为了不与之前的非标实现冲突，换了个名字而已。

----

map：存储key-value pair。`iterator->first`指向key，而`iterator->second`指向value。

set：只有value。set也有unordered_set这样的变种。

## 参考

https://mp.weixin.qq.com/s/Hpn7KqYlBKz0JdryiozqyQ

每个开发者都应该了解的一些C++特性

https://www.cnblogs.com/wuchanming/p/3913492.html

emplace_back与push_back的区别

# boost

## 安装&编译

boost直接安装：

`sudo apt install libboost-all-dev`

编译：

{% highlight bash %}
./bootstrap.sh
./b2 install link=static cxxflags=-fPIC --with-test --prefix=</path/to/install>
{% endhighlight %}

boost的组件有很多，这里只编译了test组件。

>注意：指定生成目录的时候，stage使用stagedir选项，而install使用prefix选项。

## boost.test

boost.test是一个C++的单元测试框架。

代码示例：

https://github.com/antkillerfarm/antkillerfarm_crazy/tree/master/cpp/boost_test

要点：

- 测试代码无须main函数。

- 编译：`-DBOOST_TEST_DYN_LINK`

- 链接：`-lboost_unit_test_framework`

打印所有的log：

`unit_test --log_level=all`

参考：

https://www.ibm.com/developerworks/cn/aix/library/au-ctools1_boost/

了解Boost单元测试框架

https://www.ibm.com/developerworks/cn/aix/library/au-ctools2_cppunit/index.html

了解CppUnit

https://www.ibm.com/developerworks/cn/aix/library/au-ctools3_ccptest/

了解CppTest。上面这3篇算是比较权威的C++单元测试工具的教程了，作者都是Arpan Sen。

https://my.oschina.net/vaero/blog/227528

C++单元测试：boost.test

https://remonstrate.wordpress.com/2011/07/06/boost-%e7%9a%84-unit-test/

boost的unit test

## googletest

安装：

`sudo apt install libgtest-dev`

代码：

https://github.com/google/googletest

参考：

https://www.ibm.com/developerworks/cn/aix/library/au-googletestingframework.html

Google C++ Testing Framework简介

https://www.cnblogs.com/coderzh/archive/2009/04/06/1426755.html

玩转Google开源C++单元测试框架Google Test系列(gtest)

## boost::format

{% highlight cpp %}
cout << boost::format("%1%"
    "%1t 十进制 = [%2$d]\n"
    "%1t 格式化的十进制 = [%2$5d]\n"
    "%1t 格式化十进制，前补'0' = [%2$05d]\n"
    "%1t 十六进制 = [%2$x]\n"
    "%1t 八进制 = [%2$o]\n"
    "%1t 浮点 = [%3$f]\n"
    "%1t 格式化的浮点 = [%3$3.3f]\n"
    "%1t 科学计数 = [%3$e]\n"
    ) % "example :\n" % 15 % 15.01 << endl;
{% endhighlight %}

参考：

https://www.cnblogs.com/WuErPIng/archive/2005/04/21/142308.html

浅尝boost之format
