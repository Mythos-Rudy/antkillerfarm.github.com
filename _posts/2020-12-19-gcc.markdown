---
layout: post
title:  gcc, LLVM, ANTLR, 虚拟机比较, CMake, Ninja
category: technology 
---

* toc
{:toc}

# gcc

GNU C Compiler在1987年3月22日发布了第一个beta版本，Richard Stallman原本想利用Free University Compiler Kit，但作者Andy Tanenbaum不想免费提供，RMS因此决定GNU的首个项目将是编译器。GCC是基于一个现有的Pastel编译器，使其扩展支持编译C，后用C进行重写。

代码：

`git clone git://gcc.gnu.org/git/gcc.git`

## 资料

http://www.hellogcc.org/

一个有关GCC和GDB的博客。其中的大牛teawater（朱辉）开发了一个Linux动态跟踪器KGTP，他的blog：

http://teawater.github.io/

https://www.cnblogs.com/kuoAT/p/9590606.html

深入分析GCC（王亚刚 著）

## gcc和ld的差异

理论上gcc做链接和ld做链接，应该是一样的效果，然而实际情况要复杂一些。有的厂商的工具链会给gcc添加一些环境变量之类的私货，所以两者的行为就变的很有差异了。遇到这种问题，互换是一种好的解决问题的思路。

## 链接顺序

有的链接器对链接顺序有要求，一般按照c代码、自定义库、标准库的顺序来链接，也就是越基础底层的库，越在后面。（这个顺序正好和声明的顺序相反）

`gcc -c ./sparse_matrix.c -o sparse_matrix.o -luserlib -lm`

但是如果有一系列很底层的库，他们太底层了，以至于会出现相互依赖的情况(circular dependence)，那gcc提供了一个option很好的解决了这个情况：

`-Wl,--start-group -lmy_lib -lyour_lib -lhis_lib -Wl,--end-group`

再比如下面的例子：

https://github.com/antkillerfarm/antkillerfarm_crazy/tree/master/helloworld/linux_so

`gcc -o main_link main_link.c -L. -lhello`

这条命令中的main_link.c如果放到`-lhello`之后就会出问题。也考虑使用`--start-group`和`--end-group`之类的链接选项解决链接顺序问题。

参考：

https://stackoverflow.com/questions/27475977/c-undefined-reference-to-sqrt-even-with-lm

C - undefined reference to “sqrt” even with '-lm'

https://mp.weixin.qq.com/s/TnqAqpmuXsGFfpcSUqZ9GQ

今日头条优化实践：iOS包大小二进制优化，一行代码减少60MB下载大小

## -Werror

有的时候会遇到`-Werror=XXXX`这样的编译错误，如果确实不想改代码的话，可以用`-Wno-error=XXXX`或者`-Wno-XXXX`来回避之。

## nm和readelf

这两个命令都可以查看可执行文件的符号表。

示例：

`nm XXX.so`

`readelf -h XXX.so`

这两个命令虽然很早就在gcc工具链中了，但是早期版本只能查看本工具链编译的可执行文件。现在的话，主流的CPU指令集都可以支持了，不必采用`arm-readelf`这样的特殊前缀版本了。

## 切换gcc版本

`sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 40`

`sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 50`

`sudo update-alternatives --config gcc`

## 编译加速

- 并行编译

`make -j 4`

可用`nproc`命令动态获取编译机的CPU核数。

- 分布式编译

利用Distcc和Dmucs构建大规模、分布式C++编译环境。

- 预编译头文件

PCH（Precompiled Header）

- CCache

CCache（Compiler Cache）是一个编译缓存工具，其原理是将cpp的编译结果保存在文件缓存中，以后编译时若对应文件无变动可直接从缓存中获取编译结果。需要注意的是，Make本身也有一定缓存功能，当目标文件已编译（且依赖无变化）时，若源文件时间戳无变化也不会再次编译；但CCache是按文件内容做的缓存，且同一机器的多个项目可以共享缓存，因此适用面更大。

- Module编译

C++20之前的版本会把每一个cpp当做一个编译单元处理，会存在引入的头文件被多次解析编译的问题。而Module的出现就是解决这一问题。

- 自动依赖分析

Google推出了开源的Include-What-You-Use工具（简称IWYU），使用该工具可以扫描出文件依赖问题，同时该工具还提供脚本解决头文件依赖问题。

https://mp.weixin.qq.com/s/yITNjo_UQi8-OKQNOfGrPw

C++服务编译耗时优化原理及实践

## gdb

设置参数：

`set args -l`

参考：

https://mp.weixin.qq.com/s/30Zh_8H6QfDgJuG9e9ORSQ

使用gdb调试多进程程序

https://zhuanlan.zhihu.com/p/254879649

GDB的那些奇淫技巧

https://mp.weixin.qq.com/s/y3c07Hk7g3P-rd0oDzszlA

GDB底层实现原理

## 白手起家

- Stage0 部分

Hex0：起点，Binary不超过1KB，用来从带注释的hex dump生成binary。

Hex1、Hex2：Hex0+偏移量计算，用来简化后续过程；每一级由上一级实现和编译。

M0：宏汇编器，由Hex2实现和编译。

cc_*：用汇编写的C子集编译器（支持x86、x644、ARMv7和v8）；由M0编译。

M2-Planet + mescc-tools：用先前的C子集制作的用于生成Mes的基础工具。

- Mes部分

Mes + MesCC -> 一个修改过的TCC -> GCC 4.7 -> 现代的GCC

https://www.zhihu.com/question/441129390

假如有某种力量使得世界上所有编译器都被删除了, 人类是否需要从打孔卡开始写第一个编译器?

## 参考

https://zhuanlan.zhihu.com/p/372526494

GCC的整体架构

https://www.zhihu.com/question/478761697

`gcc -O3`具体做了些什么事情？

# LLVM

## 概述

LLVM最初设计时，主要做优化方面的研究，所以当时的全称叫Low Level Virtual Machine。后来因为成为了编译器，官方放弃了这个称呼，但保留了LLVM的简称。

官网：

http://llvm.org/

代码：

https://github.com/llvm/llvm-project

LLVM的主要作者是Chris Lattner。

他的个人主页：

http://nondot.org/sabre/

>Chris Lattner，1978年生，美国人。University of Portland本科（2000）+UIUC博士（2005）。LLVM、Swift、MLIR的作者。先后任职于Apple、Tesla、Google、SiFive。

架构设计：

http://www.aosabook.org/en/llvm.html

>顺便提一下，这个网站本身就是个宝库。

## 参考

https://mp.weixin.qq.com/s/FSlJKnC0y51nsLDp1B3tXg

Swift编译器Crash—Segmentation fault解决方案

https://zhuanlan.zhihu.com/p/392381317

LLVM IR的第一个 Pass：上手官方文档 Hello Pass

# ANTLR

ANTLR—Another Tool for Language Recognition，其前身是PCCTS，它为包括Java，C++，C#,python在内的语言提供了一个通过语法描述来自动构造自定义语言的识别器（recognizer），编译器（parser）和解释器（translator）的框架。

官网：

http://www.antlr.org/

参考：

http://yuzhouwan.com/posts/55501/

Antlr

https://www.ibm.com/developerworks/cn/java/j-lo-antlr/index.html

使用Antlr开发领域语言

# MPS

MPS是jetbrains推出的用于构建DSL的工具。

官网：

https://www.jetbrains.com/mps/

# 虚拟机比较

早期如Bochs之类的没用过，现在估计也没什么人用了吧。

现在主要是以下三个选择：

1.VMware。商业收费软件。有免费版本的VMware Player，但该版本不可创建虚拟机，只可使用别人已经建好的虚拟机。

2.VirtualBox。开源免费软件。

3.Qemu。Qemu的易用性不佳，作为使用的话，能不用就不用了。但其不仅开源，而且支持的架构也很多，有的时候往往是唯一之选。作为研究学习来说，这个是首选。

这里主要讨论前两者的选择。

VMware由于是收费软件之故，因此用户的软件升级是个大问题。（土豪除外，有钱的话，这个就不是事了。）而旧的软件，往往对新的Linux发行版的支持较差。很多情况下，VMware Tool因为这个原因总是无法完美运行。严重影响了软件的易用性。

反之，VirtualBox就没有这些问题。虽然比较同期的VMware来说，VirtualBox的性能略逊。但是一般来说，科技行业里领先半年就已经是巨大的优势了。我相信现在的VirtualBox，无论如何也不会弱于两年前的VMware。

因此与其守着过时的VMware 8.0，还不如换用VirtualBox，这就是我的选择。

# CMake

添加头文件目录

`include_directories(../../../thirdparty/comm/include)`

添加需要链接的库文件目录

`link_directories("/home/server/third/lib")`

查找库所在目录

`find_library(RUNTIME_LIB rt /usr/lib  /usr/local/lib NO_DEFAULT_PATH)`

添加需要链接的库文件路径

`link_libraries(“/home/server/third/lib/libcommon.a”)`

设置要链接的库文件的名称

`target_link_libraries(myProject libcomm.so)`

为工程生成目标文件

`add_executable(demo main.cpp)`

下载文件

`file(DOWNLOAD url file)`

参考：

https://www.cnblogs.com/binbinjx/p/5626916.html

cmake添加头文件目录，链接动态、静态库

https://mp.weixin.qq.com/s/67lPVyWUXG0SPJm4AOHmBA

一份CMAKE中文实战教程

## cross compile

需要用`-DCMAKE_TOOLCHAIN_FILE=XXXX`来指定toolchain file。后者的示例如下：

https://github.com/antkillerfarm/antkillerfarm_crazy/blob/master/other/toolchain-arm-imx8qm.cmake

# Ninja

Ninja是Make的替代品，它和后者的区别在于：

1.Ninja只实现了Make的常用功能，能力上没有后者强。

2.Ninja脚本易于人阅读（方便调试），但不易于人直接书写（方便机器解析）。需要借助CMake之类的高级构建系统生成Ninja脚本。

3.Make中有些功能虽然能实现，但需要复杂脚本，执行也很慢。Ninja将这些功能直接集成进程序，无需写脚本。

正因为这些设计上的不同，Ninja的执行速度远超Make。

官网：

https://ninja-build.org/

Cmake生成Ninja脚本：

`cmake .. -G Ninja`

Cmake这样的高级构建系统，也被称为meta-build software。

https://github.com/ninja-build/ninja/wiki/List-of-generators-producing-ninja-build-files

上面的网页列出了能生成Ninja脚本的构建系统，比较值得关注的有：

GN：Chromium项目的构建工具。

xmake：一个Lua编写的构建工具。

参考：

https://blog.codingnow.com/2021/05/make_to_ninja.html

构建工具从Make到Ninja
