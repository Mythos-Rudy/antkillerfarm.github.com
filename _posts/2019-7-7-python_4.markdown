---
layout: post
title:  Python（四）
category: language 
---

# Python

## python调用GTK函数的一般规则

众所周知，GTK库是用C语言编写的，其相关的文档提供的也是C函数的接口，python接口的文档相对较少，获得也不太容易。因此有必要掌握一下这方面基本的命名规则。（这里只讲方法，对深层次的调用原理不做探究。）

1）类初始化函数

C:`GtkWidget * gtk_button_new (void);`

python:`button = Gtk.Button()`

这里除了把C函数式的写法，替换成python的类的写法之外，并无其他差异。

2）普通类成员函数

C:`void gtk_container_add (GtkContainer *container, GtkWidget *widget);`

python:`button.add(image)`

可以看出，C函数的第一个表示self类指针的参数被省略掉了。

3）回调函数

这里以按钮的click事件回调为例：

C:`void user_function (GtkButton *button, gpointer user_data)`

python:

`button.connect("clicked", self.playToggled)`

`def playToggled(self, w):`

这里的情况要复杂的多。首先在事件回调注册的时候，由于我们并没有给user_data赋值，因此照理说playToggled函数，只有button这一个参数。但实际传递给playToggled函数的有两个参数，self是一个用于占位的参数，w对应button，没有东西对应user_data。

4）用于输出的参数

C:`void gst_message_parse_error (GstMessage *message, GError **gerror, gchar **debug);`

python:`err, debug = message.parse_error()`

这个例子中的gerror和debug都是用于输出的参数。如果只想得到其一，还可用以下方法:

`debug = message.parse_error()[2]`

5）枚举类型

C:

{% highlight c %}
enum GstSeekFlags
{
  GST_SEEK_FLAG_FLUSH,
  ...
}
{% endhighlight %}

python:`Gst.SeekFlags.FLUSH`

6）宏常量

C:`#define GST_CLOCK_TIME_NONE ((GstClockTime) -1)`

python:`Gst.CLOCK_TIME_NONE`

7）类型转换

大多数情况下，类型转换自动完成，并无什么问题。这里只讨论特殊的情况。

C:

{% highlight c %}
gst_element_seek (pipeline, 1.0, GST_FORMAT_TIME, GST_SEEK_FLAG_FLUSH,
                         GST_SEEK_TYPE_SET, time_nanoseconds,
                         GST_SEEK_TYPE_NONE, GST_CLOCK_TIME_NONE))
{% endhighlight %}

python:

{% highlight python %}
self.player.seek(1.0, Gst.Format.TIME, Gst.SeekFlags.FLUSH, Gst.SeekType.SET,\
                 time_nanoseconds, Gst.SeekType.NONE, Gst.CLOCK_TIME_NONE)
{% endhighlight %}

这里首先按照一般的方法，将C代码转化成python代码。但是运行之后，产生如下错误：

`OverflowError: long too big to convert`

究其原因，gst_element_seek的最后一个参数是uint64类型的。但python原生并不支持该类型，而是将之转换成int类型（实际上是int64类型），这样的话，GST_CLOCK_TIME_NONE的值显然超出了int64所能表示的范围。

解决的办法是使用ctypes库，将

`Gst.CLOCK_TIME_NONE`

改为

`c_long(Gst.CLOCK_TIME_NONE).value`

## 参考

https://mp.weixin.qq.com/s/PC0bGKzIC_GXLOcVqDAZmA

Python学习思维导图

https://mp.weixin.qq.com/s/_OmRvwFmvuuOpBf7DQG8IA

Python30个编程技巧

https://github.com/leisurelicht/wtfpython-cn

《What the f*ck Python!》中文版

https://mp.weixin.qq.com/s/-CaMHjsY580et8Hh_D2FSg

简约而不简单的Django新手图文教程

https://mp.weixin.qq.com/s/O5okcuVKuf339BZzhmxiew

13个Python GUI库

https://mp.weixin.qq.com/s/hIMwss4h5k10oLanCYYS1g

49个Python学习资源

https://mp.weixin.qq.com/s/jHnkmpnOz1LApVCLJL-8Tw

如何写出优雅又地道的Python代码？

https://mp.weixin.qq.com/s/5xs1ivkrUAP_Rr9P-EMc5g

代码优化指南：人生苦短，我用Python。这篇blog主要介绍了如何追踪Python脚本的CPU使用情况。

https://mp.weixin.qq.com/s/HGH2e_0ocHv2VWsjOje9BQ

程序员必知的Python陷阱与缺陷列表

http://blog.csdn.net/linda1000/article/details/8315892

单引号、双引号和三双引号的区别

https://mp.weixin.qq.com/s/czqO4Lo1Jt9zqg2UKNlLYg

手把手教你用Python创建微信聊天机器人

https://mp.weixin.qq.com/s/DMK3gwMKbpsfOrWMxjb5lg

不到20行代码，用Python做一个智能聊天机器人

https://mp.weixin.qq.com/s/wIXCIMzZmh75SV-qJIKbCw

Python程序员最常犯的10个错误，你中招了吗？

https://mp.weixin.qq.com/s/W1j4G_QQqlzDYru231dZFA

Python：编写条件分支代码的技巧

http://www.cnblogs.com/Python666/p/7506546.html

Python单例模式

https://mp.weixin.qq.com/s/ST7TQ5Wkn_owv5bpTiTKVA

2018年最好用的5个python网站开发框架

https://mp.weixin.qq.com/s/3nr8uHnRoSgs-Zu6QxGiqw

Python实现数据库一键导出为Excel表格！大大的增加了工作效率！

https://mp.weixin.qq.com/s/dmJI2GlzgUJgYllfVOPt4g

两句话轻松掌握Python最难知识点

https://mp.weixin.qq.com/s/PkzD1ig_D5AIUTkO5zH8pQ

Python字节码介绍

https://mp.weixin.qq.com/s/_ZvF6jK5Jo4rFGwHvEoAig

一文读懂Python装饰器由来

https://mp.weixin.qq.com/s/RdnAQPAn9E8qDvtnCEgcKw

Tkinter可视化窗口

https://mp.weixin.qq.com/s/_fi4fpfN8Whe7_ZpkPL0tA

怎么给Python写C扩展？

https://mp.weixin.qq.com/s/-erFsz8NvLZ5mOIXyDosFg

使用PyInstaller将python转成可执行文件exe笔记

https://mp.weixin.qq.com/s/b19SLduKoiOIeE5CA3ZOjg

Python标准库之LRU缓存实现学习

https://mp.weixin.qq.com/s/VPCUd5op6Vd-b0LbFEMSYQ

秒懂Python编程中的if __name__ == 'main' 的作用和原理

https://mp.weixin.qq.com/s/FtlAkInyXgvUxDnSCikTIw

全面深入理解Python面向对象编程

https://mp.weixin.qq.com/s/_PtdgGElw0mvr_rRm5xrCg

Python性能优化的20条招数

https://mp.weixin.qq.com/s/0Rpbuo7LCRo1SnbE8NcH4Q

快速学习Python的全套14张思维导图

https://mp.weixin.qq.com/s/Cujl2nxITCuZL7B72uKVrQ

为什么Python这么慢？

https://mp.weixin.qq.com/s/a3YTmQMfpnviHnidXrhYtg

这17个骚操作你都Ok吗

https://zhuanlan.zhihu.com/p/41293278

把python翻译成C++

https://mp.weixin.qq.com/s/XV4LOBM1pO0N8oShZl7MzQ

手把手教你用Python设计一个命令行界面

https://mp.weixin.qq.com/s/EZh5PAUgXkIDzGbim6wqLQ

用Python带你看白雪飘扬~

https://mp.weixin.qq.com/s/SUyRNz_M7B6bcdV7-YxlZQ

Python制作一款简易音乐播放器

https://mp.weixin.qq.com/s/d2_MTvfbOFZmppej5UOwUw

关于使用Python析构函数的正确姿势

https://mp.weixin.qq.com/s/weEZEr4g8pI11Gijc-St0Q

DeBug Python代码全靠print函数？换用这个一天2K+Star的工具吧

https://mp.weixin.qq.com/s/wr18ylCJyJOX83BhbvGXng

13个Python开发者必知的Python GUI库

https://mp.weixin.qq.com/s/S_mIspLOrmj8ny0VHP52ZA

Python高级技巧：lazy property

https://mp.weixin.qq.com/s/06-iOG5TkRkHb4RZl1bXNQ

史上最全Python迭代器与生成器

https://mp.weixin.qq.com/s/lv_sjvXx8vWf6TsVoYoxFw

Python处理文件系统的10种方法

https://mp.weixin.qq.com/s/la9srinIeibkXZEDRvv5pA

手把手教你用Python实现“坦克大战”，附详细代码！

https://mp.weixin.qq.com/s/KCiR6ZE1EpYVfySaCG097A

上半年最常见的Python面试题

https://mp.weixin.qq.com/s/0dw2LHsIKFv8B_JaIMoekg

python 字符编码处理总结

https://mp.weixin.qq.com/s/fTs_r7DLbLWoos4uRM3KYA

10个Python常见面试题，这些弄不明白不要说学过Python！

https://mp.weixin.qq.com/s/zIHJsyankFEf_ig4Xnb0Uw

工具推荐！我是如何使用Python脚本分析CPU使用情况的？

https://mp.weixin.qq.com/s/v-N5jUTVFBb-wV0a_RAg5A

Python实现代码雨效果

https://mp.weixin.qq.com/s/0wJRlGS2QXpEL2XaU_Ke-g

Python实现烟花特效

https://mp.weixin.qq.com/s/5YWAgp8LKi5q_NDrNUtyGQ

在GitHub上收获6519颗Star的Python面试题资料

https://mp.weixin.qq.com/s/toh59s2-UlqiZfkE5ThxZw

谈一谈python中的魔法变量*args和**kwargs

https://mp.weixin.qq.com/s/8y7IIQWxXx3bCD8cK8Z3XQ

这17个骚操作你都Ok吗

https://mp.weixin.qq.com/s/rE5OEFwwFxJNb_Omwmqvzw

符合语言习惯的Python优雅编程技巧

https://blog.csdn.net/longerzone/article/details/17889969

Python下调用Linux的Shell命令

https://mp.weixin.qq.com/s/zLTEzMczlrHrX9by0ccp5w

史上最全Python Re模块讲解

# Rust

官网：

https://www.rust-lang.org/

教程：

http://wiki.jikexueyuan.com/project/rust-primer/

Rust的包管理器叫做cargo。它的官网：

https://crates.io

## 安装

`curl https://sh.rustup.rs -sSf | sh`

或者

`sudo apt install rustc cargo`

Rust的更新比较快，3个月就会发布一个新版本，因此推荐使用前者。

更新：

`rustup update`

参考：

https://blog.csdn.net/xiangxianghehe/article/details/53471936

如何利用科大源提速Cargo和Rust

## Cargo

Rust的编译工具叫做`rustc`，然而正如我们很少使用`gcc`，而更多使用`make`一样，我们更多使用Cargo来编译工程。

文档：

https://doc.rust-lang.org/cargo/guide/

编译：

`cargo build`

运行：

`cargo run`

Cargo可以像maven一样自动下载依赖，也可以手动安装：`cargo install`。

## GTK示例

Rust的gtk支持：

https://gtk-rs.org/

代码：

https://github.com/gtk-rs/gtk

示例：

