---
layout: post
title:  Java, Javascript（二）
category: language 
---

# Java

## Java反射机制

Java反射机制容许程序在运行时加载、探知、使用编译期间完全未知的classes。参见：

http://blog.csdn.net/yongjian1092/article/details/7364451

反射机制的一个副产品是可以访问私有变量和私有方法。（笔试题的常客）

http://blog.csdn.net/nisaijie/article/details/5692901

## JavaFX

使用Java开发GUI是一个很冷门的技能树，即使是多年的Java程序员，也未必接触过这个领域。我上次接触该技能，还是2005年的AWT时代。

Java的GUI框架，大致有：

1.awt。最古老的框架。

2.swt。Eclipse项目的早期产物，现在Eclipse也不用它了。

2.swing。和swt差不多同时期的东西，Sun的产物。

3.JavaFX。目前最新的GUI框架，其设计思路和实现，均与WPF是同一档次，已经成为官方推荐的标准框架，并集成到JRE中。

官网：

https://openjfx.io/

文档：

https://openjfx.io/openjfx-docs/

教程：

http://www.javafxchina.net/

参考：

https://www.ibm.com/developerworks/cn/opensource/os-swingswt/index.html

SWT、Swing或AWT：哪个更适合您？

## Ubuntu安装Oracle JDK

`sudo apt install software-properties-common`

`sudo add-apt-repository ppa:webupd8team/java`

这一步，可能会出现安装密钥失败的情况。不过不要紧，后面安装jdk的时候，手动选择Yes就可以了。

`sudo apt update`

`sudo apt install oracle-java7-installer`

这样安装之后，还需要设置环境变量JAVA_HOME。（在/etc/profile中）

`export JAVA_HOME=/usr/lib/jvm/default-java/`

`cd /usr/lib/jvm`

`sudo ln -s java-7-oracle default-java`

## Java的注释型配置

Spring等框架中，有很多配置项是以注释（annotation）的形式出现在代码中，这也成为Java代码中很有特色的一点。

早期的Java代码中，虽然已经开始使用注释，然而这时的注释并不参与自身程序的运行，而主要是为第三方程序提供帮助，比如最著名的Java Doc。

从Java 1.5之后，JDK开始提供相关的注释接口。参见：

http://www.open-open.com/lib/view/open1353144218545.html

全面解析Java注解

还有一个叫做ADP4J用于简化处理注释。参见：

http://www.open-open.com/lib/view/open1369278937654.html

基于Java注释注入配置属性：ADP4J

参考：

http://www.cnblogs.com/peida/archive/2013/04/24/3036689.html

深入理解Java：注解（Annotation）自定义注解入门

## main函数

和一般的C/C++程序只有一个main函数不同，Java允许每个类都有自己的main函数。只要在程序执行时，指定使用某个类的main函数即可，这个类被称作“主类”。

这种设计方式对调试程序、模块测试很有帮助。我们可以设定某个小模块中的类为主类，来单独测试该模块，而不必将整个系统运行起来。

# static block

```java
class A  
{  
    ...
    static  
    {  
        System.out.println("static block executed.");  
    }
    ...
}
```

这样的结构被称为static block，它会在类被加载的时候执行且仅会被执行一次，相当于是特殊的构造函数。

参见：

http://www.cnblogs.com/icejoywoo/archive/2011/05/09/2041449.html

从Java的Hello,World!说到Static Block

## POJO

POJO（Plain Ordinary Java Object）：简单的Java对象。

这个名词被创造出来，用以和JavaBean做一个区分。后者通常是被容器所创建，还要实现Serializable接口用于实现Bean的持久性。

## IntelliJ IDEA

Alt+Enter：自动import

双编辑窗口：在代码的标签上右键->Split Horizontally

## Java各集合类的比较 

<table>
<tr>
<th colspan="2"></th>
<th>有序否</th>
<th>允许元素重复否</th>
</tr>
<tr>
<td colspan="2">Collection</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td colspan="2">List</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td rowspan="3">Set</td>
<td>AbstractSet</td>
<td rowspan="2">否</td>
<td rowspan="3">否</td>
</tr>
<tr>
<td>HashSet</td>
</tr>
<tr>
<td>TreeSet</td>
<td>是（用二叉树排序）</td>
</tr>
<tr>
<td rowspan="3">Map</td>
<td>AbstractMap</td>
<td rowspan="2">否</td>
<td rowspan="3">使用key-value来映射和存储数据，Key必须惟一，value可以重复</td>
</tr>
<tr>
<td>HashMap</td>
</tr>
<tr>
<td>TreeSet</td>
<td>是（用二叉树排序）</td>
</tr>
</table>

## Log4j & SLF4J & Logback

Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。

SLF4J，即简单日志门面（Simple Logging Facade for Java），不是具体的日志解决方案，它只服务于各种各样的日志系统。按照官方的说法，SLF4J是一个用于日志系统的简单Facade，允许最终用户在部署其应用时使用其所希望的日志System。

假设你打算将你使用log4j的产品卖给要求使用JDK 1.4 Logging的用户时，面对成千上万的log4j调用的修改，相信这绝对不是一件轻松的事情。但是如果开始便使用SLF4J，那么这种转换将是非常轻松的事情。

Logback是由log4j创始人设计的另一个开源日志组件。官方网站：

http://logback.qos.ch

上面三者可以组合使用（slf4j+log4j和slf4j+logback），它们的配置文件主要是logback.xml和log4j.properties。

## Save/Load序列化对象

代码：

https://github.com/antkillerfarm/antkillerfarm_crazy/blob/master/java/HanLP/KnowlegeModel.java

要点：

1.implements Serializable接口。不但对象本身要实现，它包含的子对象也要实现该接口。

2.save/load函数。

3.不想序列化的成员使用transient关键字修饰。

## Guava

Guava: Google Core Libraries for Java。这个库提供了很多JDK没有包含的基础功能，非常不错。

官网：

https://github.com/google/guava/wiki

## Netty

如果没有Netty？

远古：

java.net + java.io

近代：

java.nio

其他：

Mina，Grizzly

## 参考

https://mp.weixin.qq.com/s/t1Cx1n6irN1RWG8HQyHU2w

从实际案例聊聊Java应用的GC优化

http://blog.csdn.net/u014717036/article/details/52234679

Java语言中的协变和逆变

https://mp.weixin.qq.com/s/h3MB8p0sEA7VnrMXFq9NBA

Java魔法类：Unsafe应用解析

https://mp.weixin.qq.com/s/_hSaI5yMvPTWxvFgl-UItA

Java动态追踪技术探究

https://mp.weixin.qq.com/s/feJKRqYJTVEIxl6jvjevAg

咱们从头到尾说一次Java的垃圾回收

https://mp.weixin.qq.com/s/9xGsz5TpTSN0LxeOdNV8zA

一文看懂JVM内存布局及GC原理

https://mp.weixin.qq.com/s/CH9D-E7fxuu462Q2S3t0AA

Java字节码增强探秘

https://mp.weixin.qq.com/s/RKqmy8dw7B7WtQc6Xy2CLA

JVM CPU Profiler技术原理及源码深度解析

https://mp.weixin.qq.com/s/MxMcpJlqSEZRO0CssQglOg

Android兼容Java 8语法特性的原理分析

https://mp.weixin.qq.com/s/ZlNcvwJ_swspifWTLHA92Q

Java动态调试技术原理及实践

https://mp.weixin.qq.com/s/23-S5tXTqi2LSe84OoQvvA

跑得好好的Java进程，怎么突然就瘫痪了？

https://mp.weixin.qq.com/s/GaK4iyTNvDsO9nMCXxrWkQ

看完这篇Exception和Error，和面试官扯皮就没问题了

# Javascript

### Step2：回调函数嵌套问题（续）

回调嵌套的解决方法有三种：

1.使用Promise。

2.使用Generator。

3.使用递归函数。

虽然JS递归函数的例子在教程中不太多，但和C语言类似，JS也拥有定义递归函数的能力，且语法也和C类似。这里使用递归函数解决回调嵌套的问题，代码在：

https://github.com/antkillerfarm/antkillerfarm_crazy/tree/master/nodejs/js/hello/super_button2.html

### Step3:延迟动画

除了Step2的办法之外，还可以用设置延迟属性animation-delay的办法，设定动画的播放次序。这种方法的灵活性超过前种方法，但控制难度较高，需要通过公式计算各动画的起始时间，以达到正确的效果。示例代码：

https://github.com/antkillerfarm/antkillerfarm_crazy/tree/master/nodejs/js/hello/super_button3.html

这里还解决了Step2的一个Bug。在Step2中，每点击一次按钮，就会添加一次AnimationEnd事件处理函数，但是新添加的函数并不会覆盖原来的事件处理函数。而是在原来的事件处理函数之后，执行新添加的事件处理函数。利用console.log可以很容易的确认这一点。

因此，AnimationEnd事件处理函数仅需要在开始时，添加一次即可。

Step3还添加了fadeOutLeft动画，为了在两种动画之间切换，引入了全局变量flag，作为状态变量。

由于JS事件处理函数，不能传递参数。因此，也就不能很方便的将动画开始播放时的flag值传递过去，留待动画结束时使用。所以，flag值只有在所有动画都结束之后，才能改变。

这里通过添加引用计数的方法，来判定所有动画是否都已结束。不用担心引用计数的临界问题，因为JS是单线程执行的。

此外，还要注意display和opacity的差异，前者如果不显示了，就会彻底消失，而后者不显示时，仍然还会占据它原来所在的位置。

### JS细节

#### onclick与href='javascript:function()'的区别

1.onclick事件会比href属性先执行。

2.`<a href="javascript:void(0);" onclick="function()"></a>`或者`<a href="javascript:;" onclick="function()"></a>`表示这个链接不跳转，而执行一段js脚本。

#### import js的时机

和C/Java/Python等不同，js的加载并不一定需要在html的开头，而可以在任意位置。有些特效甚至必须在布局元素之后，再加载。

比如D3的绘图代码，必须出现在需要绘图的div之后。否则d3.select之类的操作选择不到任何对象。

## JS特效资料

https://github.com/wagerfield/flat-surface-shader

这个网站提供一种浮动的多边形表面的特效，适合作为登录页的背景。

https://mp.weixin.qq.com/s/p8ll1R9aXc5aELtL3MAEcA

用H5打造用户专属的3D机房（WebGL）

## Monaco Editor

Monaco Editor是MS开源的一个在线代码编辑工具，可提供类似VS code的功能。

官网：

https://microsoft.github.io/monaco-editor/

参考：

https://www.cnblogs.com/isaboy/p/monaco-editor.html

微软开源代码编辑器monaco-editor
