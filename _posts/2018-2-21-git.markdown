---
layout: post
title:  Git, 爬虫, ZeroMQ
category: technology 
---

# Git

## 教程

https://learngitbranching.js.org

这个网站提供了一个可视化的交互式git教程。非常不错。

## git常用命令

0.在linux下有个叫做gitk的Git GUI工具。

`sudo apt install gitk`

1.创建版本库

`git init`

2.撤销add

`git rm --cached FILE`

3.暂存本地修改及恢复

如果`git pull`的时候，本地有修改，就需要暂存，并在`git pull`之后，恢复之。

`git stash`

`git stash pop`

4.回退和前进

回退历史版本：

`git checkout`

回退之后，如果不满意，就需要前进操作，以恢复后续的更新。然而这个时候有个麻烦的地方，在`git log`中已经找不到后续的更新记录，也就查不到commit id。这时可以用`git reflog`查看git操作记录，以获得想要的commit id，并checkout之。

5.远程操作

查看远程仓库的地址：

有的时候时间一长，就会搞忘当初下载代码时的远程仓库的地址。这时可以使用`git remote -v`查看之。

查看远程分支：

`git branch -r`

checkout远程分支：

`git checkout -b dev origin/dev`

6.check out有submodule的版本库

`git clone --recursive URL`

7.checkout和reset的区别

http://wbj05791467.blog.163.com/blog/static/120329697201331735158420/

git reset和git checkout

https://segmentfault.com/a/1190000006185954

git的reset和checkout的区别

8.制作和应用patch

制作patch主要有两种方式：`git diff`和`git format-patch`。前者生成通用patch，而后者生成git专用patch。使用示例：

`git diff SHA1 SHA2` 比较两个历史版本之间的差异，SHA1和SHA2是两次commit的SHA值。

应用patch：`git am`

9.使用tag

打标签：

`git tag -a v0.1.2 -m "v0.1.2"`

列出标签：

`git tag`

检出标签：

`git checkout v0.1.2`

10.强制更新

当发生冲突，需要放弃修改，强制更新的时候，可以：

`git reset --hard origin/master`

11.保存密码

编辑仓库目录中本地的”.git/config”文件，增加如下属性：

{% highlight bash %}
[credential]
    helper = store
{% endhighlight %}

12.`git cherry-pick`用于把另一个本地分支的commit修改应用到当前分支。

13.`git commit --amend`将当前的修改合并到上一个commit中。

这个在代码review的时候比较有用。如果上一个commit在review的时候发现问题，可以再次修改后，合并到上一个commit中，如此反复直到review成功。

14. SSH

{% highlight bash %}
cd ~/.ssh
ssh-keygen
cat ~/.ssh/id_rsa.pub
{% endhighlight %}

>`ssh-keygen`命令会生成两个文件id_rsa和id_rsa.pub，前者是私钥，后者是公钥，不要弄错了。

参考：

https://git-scm.com/book/en/v2/Git-on-the-Server-Generating-Your-SSH-Public-Key

Generating Your SSH Public Key

15.`git blame`查看一行代码是谁改的。

16.`HEAD`表示当前版本，`HEAD^^`表示当前版本之前的两个版本，如果回溯的版本较多也可以写作`HEAD~100`。

## 如何git超大版本库

自从两次git完整的linux kernel，都因为网络问题，而中途失败之后，不甘心的我，继续在网上寻找答案。

目前已知的答案是git不支持断点续传，也不支持object原子下载。网上所谓的git fetch能断点续传一说，纯属误会。那只不过是重新下载的命令，即使成功，那也是由于第二次的网络环境变好导致的。

其他的办法包括git bundle，但是这个需要服务器支持才行，而多数站点都没有这个功能。Android代码的网站就采用了这种方法。

其实对付超大版本库，git已经提供了相应的办法：

`git pull --depth N`

N表示深度，具体的含义我也不太清楚。基本上，N=1就是只下载当前的版本，N>1的话，还会下载以前的历史版本。这样我们可以通过不断增加N的方式，将完整的版本库下载到本地。

N增加到多大，才能把整个版本库下载完呢？

使用命令行的话，如果增加N，没有继续下载，就说明版本库已经完全下载到本地了。

如果使用TortoiseGit的话，下载完全之后，再git pull的话，就没有depth选项了。

下载失败，会在本地留下一堆无用的临时文件，可用`git prune`清除之。

日常使用中，git版本库更新次数越多，碎小文件越多。这时可用`git gc`将之打包成几个大文件。

参考文章：

http://blogs.atlassian.com/2014/05/handle-big-repositories-git/

## git查看远端仓库地址

`git remote -v`

## Git Extensions

除了Tortoisegit之外，Git Extensions也是一个常用的GUI shell。

官网：

https://gitextensions.github.io/

## .gitignore

有的文件或文件夹，你不想将它加入版本控制中，但恼人的是，每次commit的时候，这些文件都会出现在候选列表中，稍有不慎，甚至会错误选中。

这时，你可以编辑.gitignore来忽略这些文件，相当于是加了一个黑名单。但其实.gitignore也可定义白名单：

{% highlight bash %}
*/
!src/
!src/**
{% endhighlight %}

参考：

http://ybin.cc/git/gitignore-syntax/

彻底理解.gitignore

https://github.com/github/gitignore

包含各种常见开发环境的.gitignore示例

## LF与CRLF转换

{% highlight bash %}
#提交时转换为LF，检出时转换为CRLF
git config --global core.autocrlf true

#提交时转换为LF，检出时不转换
git config --global core.autocrlf input

#提交检出均不转换
git config --global core.autocrlf false

#拒绝提交包含混合换行符的文件
git config --global core.safecrlf true

#允许提交包含混合换行符的文件
git config --global core.safecrlf false

#提交包含混合换行符的文件时给出警告
git config --global core.safecrlf warn
{% endhighlight %}

参考：

http://www.cnblogs.com/sdgf/p/6237847.html

git换行符LF与CRLF转换问题

## 下载单个文件夹

使用Git拉去github上的一些开源项目，无比方便，但是有些项目比较庞大，而我们只想拉取其中指定的一部分文件夹或者文件，那就需要我们另外动些手脚了。

1.使用SVN。

需要修改URL：

https://github.com/Sarasra/models/tree/master/research/capsules

将`/tree/master/`换成`/trunk/`即可。

2.使用Sparse checkout。

{% highlight bash %}
git init
git remote add -f origin <url>
git config core.sparsecheckout true
echo “libs” >> .git/info/sparse-checkout
{% endhighlight %}

参考：

https://blog.csdn.net/deeplies/article/details/52754980

如何在github上下载单个文件夹？

https://www.zhihu.com/question/25369412

如何从GitHub上下载单个文件夹？

## 缺点

git对于大的二进制文件不太友好，对于文件/历史的部分导出也支持的不太好。所以对于大公司的项目来说，并不太好用。

>目前的公司使用Perforce作为版本控制工具，和git相比这种老工具的功能实在是弱爆了。但是P4对于大文件支持的很好，所以还是不得不用。

参考：

http://www.ruanyifeng.com/blog/2016/07/google-monolithic-source-repository.html

谷歌的代码管理

https://www.zhihu.com/question/25491925/answer/175222330

代码版本控制用SVN还是Git好？

## Git Server

### Bonobo Git Server

一个基于IIS的Git服务器。操作简单，但是没有提供文件夹一级的权限管理。

官网：

https://bonobogitserver.com/

### Gerrit

Gerrit，一种免费、开放源代码的代码审查软件，它使用Git作为底层版本控制系统。

官网：

https://www.gerritcodereview.com/

## 参考

https://mp.weixin.qq.com/s/0Cv968LpSSYKJpAbW1MlMA

手把手教你git全操作

https://mp.weixin.qq.com/s/DbvRbaH7BJKeTCT4LVXUoA

Git的4个阶段的撤销更改

# 爬虫

## 自动解析网页的结构化数据

抽取结构树，对比两个网页的dom tree的相似度（卷积核），找出并抽取相似节点。

参考：

http://www.doc88.com/p-2045913772352.html

Web页面中结构化数据抽取的实现与应用

http://www.cnblogs.com/codemind/p/smart_spider_parser.html

爬虫数据采集技术趋势－智能化解析

## 参考

https://mp.weixin.qq.com/s/X9NPFFTHTk62V21o63ceOA

Python 爬虫的工具列表大全

http://www.gooseeker.com/

一个基于FireFox的网络爬虫。

https://mp.weixin.qq.com/s/0yDokR2dYzetUy4NI9edSQ

那些你不知道的爬虫反爬虫套路

https://mp.weixin.qq.com/s/yR_wENRSbxvfrcYr9O9BuQ

23个Python爬虫开源项目代码：爬取微信、淘宝、豆瓣、知乎、微博等

https://mp.weixin.qq.com/s/38ofY693bXwFWIMNqYx4-A

常用的Python爬虫技巧总结

https://mp.weixin.qq.com/s/Hp6tEQujSgCnPwSKhAE72g

关于Python爬虫，这里有一条高效的学习路径

https://mp.weixin.qq.com/s/0QnOgT8F090MOzazzsZfZA

不会编程也能爬数据！3个爬虫小工具教你实现

https://mp.weixin.qq.com/s/7HxZGSTJvxjvpAsF5LfS-g

零基础的我是这样开始写Python爬虫的

https://mp.weixin.qq.com/s/5sVrSxRAXWBn3-NBSlYMIg

不踩坑的Python爬虫：如何在一个月内学会爬取大规模数据

https://mp.weixin.qq.com/s/z2uWLEWF6e0TJWIpXyY6mQ

如何用Python爬虫获取那些价值博文

https://mp.weixin.qq.com/s/SkGUZMgBW_oFBygc4d1zQg

如何用Python编写知乎爬虫？

https://mp.weixin.qq.com/s/-PPlfkHhQzGF1N6-dMlRNA

高阶Python爬虫实战：破解极验滑动验证码

https://mp.weixin.qq.com/s/w8U-GkOhAQivuHmrVFpw3w

Python爬虫抓取智联招聘

https://mp.weixin.qq.com/s/2Su1jN_XDr--VRHB18d7dQ

爬虫大神，又出新招

https://mp.weixin.qq.com/s/AVoySo0s6l85wTG9mgkrYQ

Python网络爬虫与信息抽取系列笔记（共8篇）

https://mp.weixin.qq.com/s/SEpclyZ5Y6iF7YF7_ZjQGg

爬虫实战：爬取当当网所有Python书籍

https://mp.weixin.qq.com/s/6A9wYqTrz_h5cR15WZwedQ

你还在付费爱奇艺VIP？神级程序员教你用Python任意下！

https://mp.weixin.qq.com/s/2k2XdzpLx5syeg_68LL4Xg

12行Python暴力爬《黑豹》豆瓣短评

https://mp.weixin.qq.com/s/RccEAl2g6P66RBuvxg9N1w

从Google百度到微博，优酷腾讯到抖音，这些爬虫你用过了吗？

https://mp.weixin.qq.com/s/WDovrR4octHEIOqSEs9pxA

Python爬虫的两套解析方法和四种爬虫实现

https://mp.weixin.qq.com/s?__biz=MzIxODM4MjA5MA==&mid=2247487342&idx=2&sn=e709ff7972ee21086f0b4aedb7c676aa

一文读懂网络爬虫！

https://mp.weixin.qq.com/s/LkEfbW5oscOXyPmb5iqcGA

Python爬取并分析拉勾网招聘数据

https://mp.weixin.qq.com/s?__biz=MzU1NDA4NjU2MA==&mid=2247493477&idx=4&sn=b5906ee7b5af7bd414b5223549a30e64

五十种最好用的开源爬虫软件

https://mp.weixin.qq.com/s/G2oo6HMHnQtHPqsoSxUHqQ

权力的游戏收官，我用Python致敬这场血雨腥风

https://mp.weixin.qq.com/s/WDeF3o_M4RQRgwd2iex_bg

基于Selenium模拟浏览器爬虫详解

https://mp.weixin.qq.com/s/hvv2esNsyt3xpO9x1NkCTQ

充气娃娃什么感觉？Python告诉你

# ZeroMQ

ZeroMQ是个在Socket之上，而在MQ之下的网络通信库。正如名称所言，它实际上并不是一个完整的MQ，而仅仅只有MQ的一些子功能罢了。

http://zeromq.org

参考：

https://blog.csdn.net/w174504744/article/details/73187697

ZeroMQ
