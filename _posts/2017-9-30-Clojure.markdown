---
layout: post
title:  Clojure, Groovy, perl, Scala, VS Code, VS, MSYS2
category: language 
---

# Clojure

Clojure是Lisp语言在JVM上的实现。源代码以.clj为后缀。

官网：

http://clojure.org/

Clojure的安装主要有两种方法：

1.

`sudo apt-get install clojure1.6`

2.Clojure的全部功能都被放在clojure-1.8.0.jar中，因此实际上并不需要安装。所谓安装，不过是下载jar，然后让程序能够找到jar即可。因此，更好的办法是利用我们下面提到的leiningen，自动下载相关依赖。

## leiningen

leiningen是Clojure的自动管理工具。

官网：

http://leiningen.org/

project.clj是Leigingen为项目添加的配置文件，类似于Maven的pom.xml。

project.clj中可以定义项目所需的Clojure的版本，并自动下载依赖。因此，很多Clojure项目在依赖上，往往只写leiningen和maven，根本就不提Clojure。这一点和其他编程语言，包括同为JVM语言的scala，还是差异挺大的。

## Hello World

1.

`lein new app hello`

2.

`cd hello`

`lein run`

这里要注意路径，一定要在project.cl所在的路径下执行lein命令，否则会报如下错误：

`No :main namespace specified in project.clj.`

参见：

https://tonydeng.github.io/2016/07/19/leiningen-clojure-hello-world/

## JavaFX

JavaFX和Clojure的结合，本来不是什么新鲜的东西，然而由于相关环境（JDK、leiningen）的演进，网上的demo已经大多不可用了。

这些变动主要包括：

1.由于JDK7的较新版本之后，JavaFX已经集成到JDK中，因此JavaFX的运行时jar不再需要了。相关依赖需要去除。

2.由于leiningen新版本的改变，现在main函数必须在源代码和工程文件中显式定义。

代码参见：

https://github.com/antkillerfarm/antkillerfarm_rubbish/tree/master/clojure/javafx

# Hadopp生态圈的语言分布

| 项目 | 语言 |
|:--|:--|
| Hadoop | Java |
| Spark | 主要scala，少量Java |
| Kafka | 主要Java，少量scala |
| Storm | 主要Java，少量Clojure |

这里需要指出的是，Storm虽然被称为是Clojure语言的最知名作品，然而Clojure所占的代码比并不高，还是Java居多。

# Groovy

Groovy是另一种JVM语言，也是与Java最兼容的语言。普通Java代码可以无修改的在Groovy中编译。Groovy源代码以.groovy为后缀。

Groovy使用Gradle或Grape作为自动管理工具，其中后者是Groovy原生支持的，但是现在已经不如前者流行了。

官网：

http://www.groovy-lang.org/

代码参见：

https://github.com/antkillerfarm/antkillerfarm_rubbish/tree/master/groovy/javafx

# perl

中文教程：

http://www.runoob.com/perl/perl-tutorial.html

perl的语法和C差别不算太大，好多语法大致上从关键字也可以猜出来。这里仅对一些符号做个简短的说明。

`$name`：变量name。

`@name`：数组name。

`&name`：函数name。这种情况下，name的定义在使用之后。如果name的定义在使用之前，`&`可省略。

`%name`：哈希数组name。

perl的包管理器叫做cpan。这实际上也是该工具网站的名字。

# Scala

官网：

http://www.scala-lang.org/

教程：

http://www.runoob.com/scala/scala-tutorial.html

## sbt

sbt是scala的构建工具，其作用类似于Java的Ant和Maven。

官网：

http://www.scala-sbt.org/

教程：

https://github.com/CSUG/real_world_scala/blob/master/02_sbt.markdown

### 安装

```bash
echo "deb https://dl.bintray.com/sbt/debian /" | sudo tee -a /etc/apt/sources.list.d/sbt.list
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823
sudo apt-get update
sudo apt-get install sbt
```

参见：

http://www.scala-sbt.org/release/docs/Installing-sbt-on-Linux.html

### 常用命令

sbt有一个和scala类似的命令行交互界面，可以输入相关的命令。其中常用的有：

* compile

* package

* run

## GUI

scala的GUI方案和Java完全一致，只要Java能用的GUI，scala都能用。这里仅以JavaFX为例讨论scala的GUI开发。

方法一：采用一般的scala调用Java的方式。参见：

http://alvinalexander.com/scala/scala-javafx-hello-world-example

正如上面网页指出的，这里的main函数实际上是有一定技巧在里面的，写起来并不简洁，而且代码风格更像是Java，而不是scala。

方法二：ScalaFX

ScalaFX是对JavaFX的封装，风格更接近于scala。

官网：

http://www.scalafx.org/

sbt支持：

`libraryDependencies += "org.scalafx" %% "scalafx" % "8.0.92-R10"`

# VS Code

VS Code（Visual Studio Code）是由微软研发的一款免费、开源的跨平台文本（代码）编辑器。（首发于2015年）从文件来看应该是基于nodejs所做，据说脱胎于Atom。

目前我已经用VS Code替换了Source Insight。后者这么多年了，版本才4.0，而且由于收费的缘故，绝大多数人还是使用3.5版本，那可是我2009年刚接触时就有的版本。

官网：

https://code.visualstudio.com/

安装：

`umake ide visual-studio-code`

在Ubuntu 18.04中，umake安装方法没有处理好依赖，需要：

`sudo apt install libgconf-2-4`

## 细节

Ctrl+P 文件名搜索

Ctrl+Shift+P 命令行

View--> Toggle Word Wrap 自动换行

`"editor.rulers": []`：在一定数量的等宽字符后显示垂直标尺。输入多个值，显示多个标尺。

格式化对齐快捷键：

Windows：Shift + Alt + F

Ubuntu：Ctrl + Shift + I

列选择：Shift + Alt + 鼠标左键拖动

搜索框中可以用上下按键翻搜索历史。

查看数组内容：

`*(int(*)[10])arr_name`

`terminal.integrated.scrollback`：设置终端保存的最大行数。

## 插件

filesize：在底部状态栏显示当前文件大小，点击后还可以看到详细创建、修改时间。

Beautify：格式化JS/CSS/HTML代码。

Clang-format: 格式化C/C++/Java/Objective-C代码。需要安装Clang-format：

`sudo apt install clang-format`

## 调试

1.安装各个语言的插件。

2.按F5开始调试。首次调试时会让你设置调试配置。

3.调试python时，按下下方状态栏中的python版本信息，可以选择python环境，包括venv环境。

## 新版的空格显示问题

自2019.6之后，新版VS code在新版Ubuntu的默认显示总是很诡异，空格的宽度很小，总让人怀疑是否有空格。

解决办法：

首选项->设置->用户->Editor: Font Family

Consolas,'Courier New',monospace

## 参考

https://blog.csdn.net/GossipHHH/article/details/78132398

VsCode插件安装及推荐

https://mp.weixin.qq.com/s/cw_Bww22sgPtOeNLKQ7HHA

如何使用Visual Studio Code进行Java开发？

https://mp.weixin.qq.com/s/7vG2b900eKfVrvm-fi6IZQ

开发一个爆款VS Code插件这么简单！

https://mp.weixin.qq.com/s/DMzJxeEWVTcPy0ShVFH8Qg

20个必知必会VSCode小技巧

# Scintilla

Scintilla是Neil Hodgson出于对Richedit控件的失望，所开发的替代品（1990）。它是Notepad++等编辑器的基础控件。

官网：

https://www.scintilla.org

Scintilla官方还推出了一个名叫SciTE的编辑器，用于展示Scintilla的新功能。

# LSP

language server protocol是一种跨编辑器的语言支持实现规范。它由微软提出，目前vscode、vim、atom都已经支持了这个规范。

在过去，每个IDE遇到一门全新的语言，往往都需要重新实现一次基本功能：对于流行的语言来说还好，因为IDE厂商有动力提供支持。但对于一门全新的语言，往往需要语言的发明人自己实现各种IDE的语言支持。由于各个IDE的接口不同，需要将语言支持在各个IDE中重新移植一遍。

有了LSP规范后，语言支持插件开发者只需要编写一次，就可以很快地在IDE之间移植代码了。

官网：

https://microsoft.github.io/language-server-protocol/

# VS

## 分栏显示

1.Window -> New Window

2.Window -> New Vertical Tab Group

## Visual Studio Tab转换为空格的设置

打开“Tools --> Options --> Text Editor”，如果是编写C/C++程序，就打开“C/C++-->Tabs”，在这里，选中“Insert spaces”即可。

## 离线安装

VS2015以后，MS不再提供VS的离线安装包，因为安装文件实在是太大了（10GB+），取而代之的是offline模式。

1.首先下载在线安装器vs_community.exe，打开命令行：

`vs_community.exe --layout D:\vs2017\offline --lang zh-CN`

2.安装证书。证书在offline\certificates下。

3.运行offline\vs_community.exe。

# MSYS2

2015.11

稍早的时候，我在安装pygtk的环境时，发现pygi-aio安装程序提供的GTK版本已经到了3.14。但GTK官方这时仍然没有进展，版本停留在3.6.4。于是我又打算使用pygtk提供的更新来进行编程，但pygtk只提供了.dll文件，而没有.h和.lib文件，实际上并不好用，因此只得放弃之。

最近再上官网，发现其已经提供了更好的解决办法——MSYS2。MSYS2是Martell Malone维护的一个开源项目，旨在提供一个方便易安装的MSYS开发环境，其中也包括为各种开发包提供更新维护，GTK就是其中之一。（当前的版本为Gtk 3.18.3）

现将安装步骤罗列如下：

1.在http://www.msys2.org/，下载安装程序，并按照网页提示，更新pacman。

2.使用pacman下载必要的开发包。

`pacman -S autoconf autogen automake-wrapper pkg-config make gcc gdb`

`pacman -Ss <name>`: 查询相关的软件包是否存在。

`pacman -Syu`: 更新已安装的软件包。

MSYS2提供的环境除了安装友好，便于更新之外，对bash的支持也优于之前的版本。现在已经不需要单独为Windows平台提供特殊的makefile文件了。

还可在如下网址查询packages：

https://github.com/Alexpux/MINGW-packages

https://github.com/Alexpux/MSYS2-packages

MSYS2提供了两套API：mingw32和mingw64。可用以下方法（以gcc为例）查询需要安装的package的名字：

`pacman -Sl | grep gcc`

与MSYS2类似的还有Cygwin、MinGW等。

参见：

https://www.zhihu.com/question/22137175

Cygwin和MinGW的区别与联系是怎样的？

# WSL

Cygwin：提供了兼容POSIX接口的应用层接口，性能不佳。

MinGW：直接接Win32 API，只移植了GNU工具链，功能不全。

MSYS2：MinGW+Cygwin部分工具包+pacman。

WSL（Windows Subsystem for Linux），刚出来的时候叫“Bash on Ubuntu on Windows”：POSIX接口直接接到NT内核，性能超过Cygwin。

WSL2：虚拟机，有独立的Linux内核。和VirtualBox之类类似。

https://www.zhihu.com/question/50144689

win10 linux子系统和cygwin有什么不同？

https://mp.weixin.qq.com/s/ZCkboBBFYFm57pLEGftpCw

双系统的日子结束了：Windows和Linux将合二为一

https://zhuanlan.zhihu.com/p/57774611

盘点与Cygwin相似和相反的项目
