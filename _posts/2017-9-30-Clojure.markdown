---
layout: post
title:  Clojure, Groovy, Scala, VS Code, C++ Test framework
category: language 
---

* toc
{:toc}

# Clojure

Clojure是Lisp语言在JVM上的实现。源代码以.clj为后缀。

官网：

http://clojure.org/

Clojure的安装主要有两种方法：

1.

`sudo apt install clojure1.6`

2.Clojure的全部功能都被放在clojure-1.8.0.jar中，因此实际上并不需要安装。所谓安装，不过是下载jar，然后让程序能够找到jar即可。因此，更好的办法是利用我们下面提到的leiningen，自动下载相关依赖。

## leiningen

leiningen是Clojure的自动管理工具。

官网：

http://leiningen.org/

project.clj是Leigingen为项目添加的配置文件，类似于Maven的pom.xml。

project.clj中可以定义项目所需的Clojure的版本，并自动下载依赖。因此，很多Clojure项目在依赖上，往往只写leiningen和maven，根本就不提Clojure。这一点和其他编程语言，包括同为JVM语言的scala，还是差异挺大的。

## Hello World

1.

`lein new app hello`

2.

`cd hello`

`lein run`

这里要注意路径，一定要在project.cl所在的路径下执行lein命令，否则会报如下错误：

`No :main namespace specified in project.clj.`

参见：

https://tonydeng.github.io/2016/07/19/leiningen-clojure-hello-world/

## JavaFX

JavaFX和Clojure的结合，本来不是什么新鲜的东西，然而由于相关环境（JDK、leiningen）的演进，网上的demo已经大多不可用了。

这些变动主要包括：

1.由于JDK7的较新版本之后，JavaFX已经集成到JDK中，因此JavaFX的运行时jar不再需要了。相关依赖需要去除。

2.由于leiningen新版本的改变，现在main函数必须在源代码和工程文件中显式定义。

代码参见：

https://github.com/antkillerfarm/antkillerfarm_rubbish/tree/master/clojure/javafx

# Hadopp生态圈的语言分布

| 项目 | 语言 |
|:--|:--|
| Hadoop | Java |
| Spark | 主要scala，少量Java |
| Kafka | 主要Java，少量scala |
| Storm | 主要Java，少量Clojure |

这里需要指出的是，Storm虽然被称为是Clojure语言的最知名作品，然而Clojure所占的代码比并不高，还是Java居多。

# Groovy

Groovy是另一种JVM语言，也是与Java最兼容的语言。普通Java代码可以无修改的在Groovy中编译。Groovy源代码以.groovy为后缀。

Groovy使用Gradle或Grape作为自动管理工具，其中后者是Groovy原生支持的，但是现在已经不如前者流行了。

官网：

http://www.groovy-lang.org/

代码参见：

https://github.com/antkillerfarm/antkillerfarm_rubbish/tree/master/groovy/javafx

# Scala

官网：

http://www.scala-lang.org/

教程：

http://www.runoob.com/scala/scala-tutorial.html

## sbt

sbt是scala的构建工具，其作用类似于Java的Ant和Maven。

官网：

http://www.scala-sbt.org/

教程：

https://github.com/CSUG/real_world_scala/blob/master/02_sbt.markdown

### 安装

```bash
echo "deb https://dl.bintray.com/sbt/debian /" | sudo tee -a /etc/apt/sources.list.d/sbt.list
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823
sudo apt update
sudo apt install sbt
```

参见：

http://www.scala-sbt.org/release/docs/Installing-sbt-on-Linux.html

### 常用命令

sbt有一个和scala类似的命令行交互界面，可以输入相关的命令。其中常用的有：

* compile

* package

* run

## GUI

scala的GUI方案和Java完全一致，只要Java能用的GUI，scala都能用。这里仅以JavaFX为例讨论scala的GUI开发。

方法一：采用一般的scala调用Java的方式。参见：

http://alvinalexander.com/scala/scala-javafx-hello-world-example

正如上面网页指出的，这里的main函数实际上是有一定技巧在里面的，写起来并不简洁，而且代码风格更像是Java，而不是scala。

方法二：ScalaFX

ScalaFX是对JavaFX的封装，风格更接近于scala。

官网：

http://www.scalafx.org/

sbt支持：

`libraryDependencies += "org.scalafx" %% "scalafx" % "8.0.92-R10"`

# VS Code

VS Code（Visual Studio Code）是由微软研发的一款免费、开源的跨平台文本（代码）编辑器。（首发于2015年）从文件来看应该是基于nodejs所做，据说脱胎于Atom。

目前我已经用VS Code替换了Source Insight。后者这么多年了，版本才4.0，而且由于收费的缘故，绝大多数人还是使用3.5版本，那可是我2009年刚接触时就有的版本。

官网：

https://code.visualstudio.com/

安装：

`umake ide visual-studio-code`

在Ubuntu 18.04中，umake安装方法没有处理好依赖，需要：

`sudo apt install libgconf-2-4`

## 细节

Ctrl+P 文件名搜索

Ctrl+Shift+P 命令行

View--> Toggle Word Wrap 自动换行

`"editor.rulers": []`：在一定数量的等宽字符后显示垂直标尺。输入多个值，显示多个标尺。

格式化对齐快捷键：

Windows：Shift + Alt + F

Ubuntu：Ctrl + Shift + I

列选择：Shift + Alt + 鼠标左键拖动

注释代码：Ctrl + /

搜索框中可以用上下按键翻搜索历史。

查看数组内容：

`*(int(*)[10])arr_name`

`terminal.integrated.scrollback`：设置终端保存的最大行数。

`# (.*)\+\+`

文件标签栏多行显示: `workbench.editor.wrapTabs`

## 插件

filesize：在底部状态栏显示当前文件大小，点击后还可以看到详细创建、修改时间。

Beautify：格式化JS/CSS/HTML代码。

Clang-format: 格式化C/C++/Java/Objective-C代码。需要安装Clang-format：

`sudo apt install clang-format`

## 调试

1.安装各个语言的插件。

2.按F5开始调试。首次调试时会让你设置调试配置。

3.调试python时，按下下方状态栏中的python版本信息，可以选择python环境，包括venv环境。

## 新版的空格显示问题

自2019.6之后，新版VS code在新版Ubuntu的默认显示总是很诡异，空格的宽度很小，总让人怀疑是否有空格。

解决办法：

首选项->设置->用户->Editor: Font Family

Consolas,'Courier New',monospace

## remote-ssh

remote-ssh是vscode远程编辑/调试的组件。它分为本地端和服务器端两部分，且两者版本必须一致才行。所以，这里主要的问题就是如何下载服务器端，尤其在后者不能联网的时候。

下载地址：

`https://update.code.visualstudio.com/commit:<commit-id>/server-linux-x64/stable`

or

`https://update.code.visualstudio.com/commit:<commit-id>/server-linux-x64/insider`

这里的`commit-id`可以在vscode的“About”上查到。

将下载的`vscode-server-linux-x64.tar.gz`解压到`~/.vscode-server/bin/<commit-id>`下。

使用：

Press F1 and run the `Remote-SSH: Open SSH Host...` command.

---

问题：

```bash
==== AUTHENTICATING FOR org.freedesktop.policykit.exec ===
Authentication is needed to run '/home/danny/dev/tools/gdb' as the super user
```

解决：

`sudo sysctl -w kernel.yama.ptrace_scope=0`

---

参考：

https://blog.csdn.net/wyg1997/article/details/101460961

Remote-ssh服务器端vscode-server安装失败

https://mp.weixin.qq.com/s/n7zyDFOeHd9K5oSKz7Zg9Q

vsCode离线安装remote-ssh插件搭建远程开发环境

## C/C++ IntelliSense失效

检查`C_Cpp.IntelliSenseEngine`是否打开。

## 参考

https://blog.csdn.net/GossipHHH/article/details/78132398

VsCode插件安装及推荐

https://mp.weixin.qq.com/s/cw_Bww22sgPtOeNLKQ7HHA

如何使用Visual Studio Code进行Java开发？

https://mp.weixin.qq.com/s/7vG2b900eKfVrvm-fi6IZQ

开发一个爆款VS Code插件这么简单！

https://mp.weixin.qq.com/s/DMzJxeEWVTcPy0ShVFH8Qg

20个必知必会VSCode小技巧

https://mp.weixin.qq.com/s/1EKU6yUXMzhSl9zzgokkIA

VScode数据结构可视化

http://blog.haoji.me/vscode-plugin-overview.html

VSCode插件开发全攻略

http://blog.haoji.me/chrome-plugin-develop.html

Chrome插件(扩展)开发全攻略

# Scintilla

Scintilla是Neil Hodgson出于对Richedit控件的失望，所开发的替代品（1990）。它是Notepad++等编辑器的基础控件。

官网：

https://www.scintilla.org

Scintilla官方还推出了一个名叫SciTE的编辑器，用于展示Scintilla的新功能。

# LSP

language server protocol是一种跨编辑器的语言支持实现规范。它由微软提出，目前vscode、vim、atom都已经支持了这个规范。

在过去，每个IDE遇到一门全新的语言，往往都需要重新实现一次基本功能：对于流行的语言来说还好，因为IDE厂商有动力提供支持。但对于一门全新的语言，往往需要语言的发明人自己实现各种IDE的语言支持。由于各个IDE的接口不同，需要将语言支持在各个IDE中重新移植一遍。

有了LSP规范后，语言支持插件开发者只需要编写一次，就可以很快地在IDE之间移植代码了。

官网：

https://microsoft.github.io/language-server-protocol/

# C++ Test framework

## boost.test

boost.test是一个C++的单元测试框架。

代码示例：

https://github.com/antkillerfarm/antkillerfarm_crazy/tree/master/cpp/boost_test

要点：

- 测试代码无须main函数。

- 编译：`-DBOOST_TEST_DYN_LINK`

- 链接：`-lboost_unit_test_framework`

打印所有的log：

`unit_test --log_level=all`

参考：

https://www.ibm.com/developerworks/cn/aix/library/au-ctools1_boost/

了解Boost单元测试框架

https://www.ibm.com/developerworks/cn/aix/library/au-ctools2_cppunit/index.html

了解CppUnit

https://www.ibm.com/developerworks/cn/aix/library/au-ctools3_ccptest/

了解CppTest。上面这3篇算是比较权威的C++单元测试工具的教程了，作者都是Arpan Sen。

https://my.oschina.net/vaero/blog/227528

C++单元测试：boost.test

https://remonstrate.wordpress.com/2011/07/06/boost-%e7%9a%84-unit-test/

boost的unit test

## googletest

安装：

`sudo apt install libgtest-dev`

代码：

https://github.com/google/googletest

`gtest_filter`是一个很有用的选项。

示例：

`./foo_test --gtest_filter=FooTest*.*-FooTest.Bar:FooTest2.Bar`

运行所有“测试案例名称(testcase_name)”为FooTest的案例，但是除了FooTest.Bar和FooTest2.Bar。

`-`表示去除，`:`表示并列。

参考：

https://www.ibm.com/developerworks/cn/aix/library/au-googletestingframework.html

Google C++ Testing Framework简介

https://www.cnblogs.com/coderzh/archive/2009/04/06/1426755.html

玩转Google开源C++单元测试框架Google Test系列(gtest)

## CTest

CTest是CMake集成的一个测试工具。

参考：

https://www.cnblogs.com/457220157-FTD/p/4139149.html

CTest

## doctest

官网：

https://github.com/onqtam/doctest
