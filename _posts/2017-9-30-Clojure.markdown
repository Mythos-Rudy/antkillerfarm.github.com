---
layout: post
title:  Clojure, Groovy, Lisp, Javascript在客户端的使用, perl, Scala, VS Code, VS, Kotlin
category: language 
---

# Clojure

Clojure是Lisp语言在JVM上的实现。源代码以.clj为后缀。

官网：

http://clojure.org/

Clojure的安装主要有两种方法：

1.

`sudo apt-get install clojure1.6`

2.Clojure的全部功能都被放在clojure-1.8.0.jar中，因此实际上并不需要安装。所谓安装，不过是下载jar，然后让程序能够找到jar即可。因此，更好的办法是利用我们下面提到的leiningen，自动下载相关依赖。

## leiningen

leiningen是Clojure的自动管理工具。

官网：

http://leiningen.org/

project.clj是Leigingen为项目添加的配置文件，类似于Maven的pom.xml。

project.clj中可以定义项目所需的Clojure的版本，并自动下载依赖。因此，很多Clojure项目在依赖上，往往只写leiningen和maven，根本就不提Clojure。这一点和其他编程语言，包括同为JVM语言的scala，还是差异挺大的。

## Hello World

1.

`lein new app hello`

2.

`cd hello`

`lein run`

这里要注意路径，一定要在project.cl所在的路径下执行lein命令，否则会报如下错误：

`No :main namespace specified in project.clj.`

参见：

https://tonydeng.github.io/2016/07/19/leiningen-clojure-hello-world/

## JavaFX

JavaFX和Clojure的结合，本来不是什么新鲜的东西，然而由于相关环境（JDK、leiningen）的演进，网上的demo已经大多不可用了。

这些变动主要包括：

1.由于JDK7的较新版本之后，JavaFX已经集成到JDK中，因此JavaFX的运行时jar不再需要了。相关依赖需要去除。

2.由于leiningen新版本的改变，现在main函数必须在源代码和工程文件中显式定义。

代码参见：

https://github.com/antkillerfarm/antkillerfarm_rubbish/tree/master/clojure/javafx

# Hadopp生态圈的语言分布

| 项目 | 语言 |
|:--|:--|
| Hadoop | Java |
| Spark | 主要scala，少量Java |
| Kafka | 主要Java，少量scala |
| Storm | 主要Java，少量Clojure |

这里需要指出的是，Storm虽然被称为是Clojure语言的最知名作品，然而Clojure所占的代码比并不高，还是Java居多。

# Groovy

Groovy是另一种JVM语言，也是与Java最兼容的语言。普通Java代码可以无修改的在Groovy中编译。Groovy源代码以.groovy为后缀。

Groovy使用Gradle或Grape作为自动管理工具，其中后者是Groovy原生支持的，但是现在已经不如前者流行了。

官网：

http://www.groovy-lang.org/

代码参见：

https://github.com/antkillerfarm/antkillerfarm_rubbish/tree/master/groovy/javafx

# Lisp & GUI

客观的说，目前开源领域并没有很好用的和Lisp配套的GUI工具集，几个开源实现要么完工度不高，要么过于古老，好几个的样式都是90年代中期的风格。

更有人指出，GUI基本上是OO语言的天下了，Lisp根本不适合干这个事。

不过事实的真相是：

1.最早的交互式GUI生成工具是用Lisp写的。没错，就是苹果乔教主旗下的Interface Builder，时间是1986年。

2.PTC公司的CAD系统是用Lisp和C++写的。

3.苹果公司早期使用MCL作为GUI开发语言（from 1984），因此那个时代有大量的程序是用Lisp写的。包括Mac上最早的MS Word。Objective-C是乔教主到NextStep之后的事，最初和苹果并无交集。

4.由于Mac在艺术家群体的流行。很多音乐软件是用Lisp写的，包括Open Music, PWGL, ScoreCleaner, Igor Engraver和Symbolic Composer等。

5.有家叫做LispWorks（From 1989）的公司提供对Lisp GUI的商业支持，而且提供的界面并不逊色于GTK、Qt等当代GUI工具集。上面提到的音乐软件基本上都是基于LispWorks的。

综上可见，Lisp开发GUI不是可能性的问题，而是一个有待重新发掘的问题。

# Javascript在客户端的使用

Javascript在服务器前端的成功，促使人们思考其在客户端的使用。

最早的尝试，是MS提供的web broswer控件（例如MFC的CHtmlView类）。然而，当时的目的，并不是美化应用程序外观，而只是给程序提供一个访问互联网的机会。其最常见的用处，就是给About添加一个网站链接。这种方式不光用途简陋，更关键的是从外观来看，网页和应用程序完全是两种风格。

网站的外观在随后的几年中进化的很快，由于CSS和Javascript的出现，网页前端不再是一成不变的静态网页，而是具有了一定的动画和交互能力。强大的功能促进了分工的发展，网站设计逐渐分成了前端和后端两大工种。这种分工又促进了网页交互技术的进步。

反观普通的应用程序，由于受限于编程的复杂度，前端人员一直难于介入，很多年都处于停滞阶段。这期间一些不甘平庸的公司，在UI技术方面也做了一些尝试。

首先是DirectUI。这个是MS对于Win32窗口模型的一个重大改进。

在原始的Win32窗口模型中，每个控件都是一个窗口，拥有一个窗口句柄（相当于窗口资源的描述符）。窗口事件的处理和资源管理都在OS层面进行，开销比较大。（比如包含10000个按钮的窗口怎么处理的问题）窗口之间的交互，比如透明、动画，也由于需要跨窗口句柄，而变得非常复杂。

DirectUI的思路，是将控件降级为贴图，并接管整体窗口事件的处理，以模拟的方式实现控件的行为。开销和扩展性得到了很大的提升。

DirectUI技术最早出现在Windows XP中。比如，“我的电脑”左侧的控制面板。由于它的HWND的名字叫做DirectUI，故名。GTK项目实际上也采用了类似的方案。

DirectUI技术国内做的比较好的有:

https://www.douban.com/group/topic/27583755/

各种DirectUI技术，普遍引入了UI配置文件的概念，而且UI配置文件的功能也越来越强。比如，GTK的设计器Glade，早期的时候是根据UI设计，导出代码，但现在已经改为导出UI配置文件了。

然而，由于低层实现的限制，这些UI配置文件语法各异，虽然有设计器来简化设计难度，但注定不能做的太复杂。因此，功能上无论如何都无法与网页相比，更不必说和HTML 5相比了。

2012年以后，以CEF（Chromium Embedded Framework）和XULRunner为代表的浏览器派，开始逐渐崭露头角。从此，开发桌面应用程序，不再是Javascript的禁区。桌面应用UI和网页前端开始呈现融合的局面。

# perl

中文教程：

http://www.runoob.com/perl/perl-tutorial.html

perl的语法和C差别不算太大，好多语法大致上从关键字也可以猜出来。这里仅对一些符号做个简短的说明。

`$name`：变量name。

`@name`：数组name。

`&name`：函数name。这种情况下，name的定义在使用之后。如果name的定义在使用之前，`&`可省略。

`%name`：哈希数组name。

perl的包管理器叫做cpan。这实际上也是该工具网站的名字。

# Scala

官网：

http://www.scala-lang.org/

教程：

http://www.runoob.com/scala/scala-tutorial.html

## sbt

sbt是scala的构建工具，其作用类似于Java的Ant和Maven。

官网：

http://www.scala-sbt.org/

教程：

https://github.com/CSUG/real_world_scala/blob/master/02_sbt.markdown

### 安装

{% highlight bash %}
echo "deb https://dl.bintray.com/sbt/debian /" | sudo tee -a /etc/apt/sources.list.d/sbt.list
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823
sudo apt-get update
sudo apt-get install sbt
{% endhighlight %}

参见：

http://www.scala-sbt.org/release/docs/Installing-sbt-on-Linux.html

### 常用命令

sbt有一个和scala类似的命令行交互界面，可以输入相关的命令。其中常用的有：

* compile

* package

* run

## GUI

scala的GUI方案和Java完全一致，只要Java能用的GUI，scala都能用。这里仅以JavaFX为例讨论scala的GUI开发。

方法一：采用一般的scala调用Java的方式。参见：

http://alvinalexander.com/scala/scala-javafx-hello-world-example

正如上面网页指出的，这里的main函数实际上是有一定技巧在里面的，写起来并不简洁，而且代码风格更像是Java，而不是scala。

方法二：ScalaFX

ScalaFX是对JavaFX的封装，风格更接近于scala。

官网：

http://www.scalafx.org/

sbt支持：

`libraryDependencies += "org.scalafx" %% "scalafx" % "8.0.92-R10"`

# VS Code

VS Code（Visual Studio Code）是由微软研发的一款免费、开源的跨平台文本（代码）编辑器。（首发于2015年）从文件来看应该是基于nodejs所做，据说脱胎于Atom。

目前我已经用VS Code替换了Source Insight。后者这么多年了，版本才4.0，而且由于收费的缘故，绝大多数人还是使用3.5版本，那可是我2009年刚接触时就有的版本。

官网：

https://code.visualstudio.com/

安装：

`umake ide visual-studio-code`

在Ubuntu 18.04中，umake安装方法没有处理好依赖，需要：

`sudo apt install libgconf-2-4`

## 细节

ctrl+P 命令行

View--> Toggle Word Wrap 自动换行

`"editor.rulers": []`：在一定数量的等宽字符后显示垂直标尺。输入多个值，显示多个标尺。

格式化对齐快捷键：

Windows：Shift + Alt + F

Ubuntu： Ctrl + Shift + I

## 插件

filesize：在底部状态栏显示当前文件大小，点击后还可以看到详细创建、修改时间。

Beautify：格式化代码。

## 新版的空格显示问题

自2019.6之后，新版VS code在新版Ubuntu的默认显示总是很诡异，空格的宽度很小，总让人怀疑是否有空格。

解决办法：

首选项->设置->用户->Editor: Font Family

Consolas,'Courier New',monospace

## 参考

https://blog.csdn.net/GossipHHH/article/details/78132398

VsCode插件安装及推荐

https://mp.weixin.qq.com/s/cw_Bww22sgPtOeNLKQ7HHA

如何使用Visual Studio Code进行Java开发？

# Kotlin

Kotlin是一门编程语言，由JetBrains公司开发，与Java 100%互通。

官网：

http://kotlinlang.org/

官网文档：

http://kotlinlang.org/docs/reference/android-overview.html

国内中文文档：

https://huanglizhuo.gitbooks.io/kotlin-in-chinese/content/

国内中文文档2：

http://www.liying-cn.net/kotlin/docs/reference/

国内中文文档3：

https://www.kotlincn.net/

官方示例：

https://github.com/Kotlin/kotlin-examples
