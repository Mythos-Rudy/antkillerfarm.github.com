---
layout: post
title:  TVM实战, 性能分析工具
category: toolchain 
---

* toc
{:toc}

# TVM实战

## 问题的由来

最近客户反馈我们的backend导入Pytorch模型会出错，而TFLite模型是OK的。

打印模型的IR后，我们发现：

这是Pytorch模型的IR片段：

```text
  %0 = qnn.quantize(%input, 0.0186579f, 114, out_dtype="uint8", axis=1);
  %1 = nn.pad(%0, 114f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]]);
  %2 = qnn.quantize(%features.0.0_weight, 0.00288958f, 0, out_dtype="int8", axis=0);
  %3 = qnn.conv2d(%1, %2, 114, 0, 0.0186579f, 0.00288958f, strides=[2, 2], padding=[0, 0, 0, 0], channels=32, kernel_size=[3, 3], out_dtype="int32");
  %4 = qnn.quantize(%features.0.0_bias, 5.39136e-05f, 0, out_dtype="int32", axis=0);
  %5 = nn.bias_add(%3, %4);
  %6 = qnn.requantize(%5, 5.39136e-05f, 0, 0.0150183f, 0, axis=1, out_dtype="int32");
  %7 = clip(%6, a_min=0f, a_max=255f);
  %8 = cast(%7, dtype="uint8");
```

这是TFLite模型的IR片段：

```text
  %0 = qnn.quantize(%input, 0.0186579f /* ty=float32 */, 114 /* ty=int32 */, out_dtype="uint8", axis=1) /* ty=Tensor[(1, 3, 224, 224), uint8] */;
  %1 = nn.pad(%0, 114f /* ty=float32 */, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]]) /* ty=Tensor[(1, 3, 226, 226), uint8] */;
  %2 = qnn.conv2d(%1, meta[relay.Constant][0] /* ty=Tensor[(32, 3, 3, 3), int8] */, 114 /* ty=int32 */, 0 /* ty=int32 */, 0.0186579f /* ty=float32 */, 0.00288958f /* ty=float32 */, strides=[2, 2], padding=[0, 0, 0, 0], channels=32, kernel_size=[3, 3], out_dtype="int32") /* ty=Tensor[(1, 32, 112, 112), int32] */;
  %3 = nn.bias_add(%2, meta[relay.Constant][1] /* ty=Tensor[(32), int32] */) /* ty=Tensor[(1, 32, 112, 112), int32] */;
  %4 = qnn.requantize(%3, 5.39136e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0150183f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="uint8") /* ty=Tensor[(1, 32, 112, 112), uint8] */;
```

可以看出同一个QnnConv2D两者的展开形式存在一定的差异，但是语义上却基本是一致的。

## Relay IR

在继续主题之前，我们首先来看看这个展开形式的差异是如何造成的。

TFLite/Pytorch模型导入之后，有一个转换成Relay IR的过程，也就是所谓的frontend。

相关代码在：

TFLite: python/tvm/relay/frontend/tflite.py

Pytorch: python/tvm/relay/frontend/pytorch.py和python/tvm/relay/frontend/qnn_torch.py

可以看出Pytorch的量化模型的weight是浮点数，而TFLite的量化模型的weight是整数。

有frontend自然就有backend：

python/tvm/relay/op/contrib/ethosn.py

和切割计算图有关的代码主要是：

```python
seq = tvm.transform.Sequential(
    [
        ......
        transform.MergeComposite(pattern_table()),
        transform.AnnotateTarget("ethos-n"),
        transform.MergeCompilerRegions(),
        transform.PartitionGraph(),
    ]
)
seq(mod)
```

这里的Pass基本看名字就知道功能了，唯一需要关注的是MergeComposite。

这是pattern_table的其中一个表项：

```python
def qnn_conv_pattern():
    pattern = is_op("nn.pad")(wildcard(), wildcard()) | wildcard()
    pattern = is_op("qnn.conv2d")(
        pattern, is_constant(), is_constant(), is_constant(), is_constant(), is_constant()
    )
    pattern = is_op("nn.bias_add")(pattern, is_constant())
    pattern = is_op("qnn.requantize")(
        pattern, is_constant(), is_constant(), is_constant(), is_constant()
    )
    return pattern
```

通常IR会定的比较细粒度，而AI硬件更喜欢粗粒度的op。所以往往若干个IR op组合起来，才能得到一个AI硬件op。这时就需要进行模板匹配。

一般来说，数据可以分为变量和常量（`is_constant()`），如果既可能是变量，也可能是常量的话，就用`wildcard()`匹配。

MergeComposite会将这个模板打包成一个函数，其中的变量会写为该函数的参数，而其中的常量则被放到全局的meta data里。

## 添加Pass

下面我们来看看如何添加Pass进行这样的转换。

```cpp
class QnnQuantizeConstFold : public DFPatternRewrite {
 public:
  QnnQuantizeConstFold() {
    data_pat_ = IsConstant();
    pattern_ = IsOp("qnn.quantize")({data_pat_, IsConstant(), IsConstant()});
  }

  Expr Callback(const Expr& pre, const Expr& post,
                const Map<DFPattern, Array<Expr>>& node_map) const override {
    ......

    if (output->dtype == DataType::Int(8)) {
      return QuantizeData<int8_t>(......);
    } else if (output->dtype == DataType::Int(32)) {
      return QuantizeData<int32_t>(......);
    }
    return post;
  }

 protected:
  DFPattern data_pat_;
};
```

`Rewrite_`是Pass最重要的函数。

Pass有很多种，其中最简单的当属`DFPatternRewrite`。它的`Rewrite_`已经写好了，我们仅仅需要实现`Callback`即可。

`Callback`的参数中，`pre`表示原始`Expr`，`post`表示替换后的`Expr`，返回值也是替换后的`Expr`。（方便使用链式调用？）

如果Pass什么都不做的话，直接返回`post`就可以了。

PS：虽然`pre`和`post`在运行之初是相同的，但是一旦替换开始，两者就有差异了，所以如果是写入的内容，一定要引用`post`里的那份。

## Python版的Pass

Pass不仅能用C++写，也可用python写。

```python
class QnnQuantizeConstFold(tvm.relay.dataflow_pattern.DFPatternCallback):
    def __init__(self, require_type=False):
        super().__init__(require_type)
        self.pattern = is_op("qnn.quantize")(
            is_constant(), is_constant(), is_constant()
        )

    def callback(self, pre, post, node_map):
        ......
        if (dtype == "int8"):
             return tvm.relay.Constant(tvm.nd.array(data.astype(np.int8)))
        if (dtype == "int32"):
            return tvm.relay.Constant(tvm.nd.array(data.astype(np.int32)))
        return post
```

可以看出，写法也是大同小异，只是更便于集成，也不用写FFI接口了。

使用方法：

```python
func = mod["main"]
func = tvm.relay.Function(func.params, func.body, None, func.type_params, func.attrs)
func = tvm.relay.dataflow_pattern.rewrite(RemoveClipAfterRequantize(), func)
func = tvm.relay.dataflow_pattern.rewrite(QnnQuantizeConstFold(), func)
mod = tvm.IRModule.from_expr(func)
```

这里展示了`DFPatternCallback`的使用方法，还有`IRModule`和`Expr`的相互转换方法。

参考：

https://tvm.apache.org/docs/reference/langref/relay_pattern.html

Pattern Matching in Relay

## tvmc

tvmc是tvm提供的一个命令行接口。

```bash
export TARGET="bnns, llvm -device=arm_cpu -mtriple=aarch64-linux-gnu"
python3 -m tvm.driver.tvmc compile ./mobilenet_v1_0.25_224_quant.tflite --target "$TARGET" -o tvmc.tar --cross-compiler "$CC" --cross-compiler-options "$CC_OPTIONS"
```

要点如下：

1. 注意`TARGET`的写法，这展示了如何将一个包含空格的字符串作为一个bash变量传递给命令行参数的做法。定义变量时的双引号和使用时的双引号都是必不可少的。

2. 有些backend需要partation，用来将可执行的op分配到该设备上，因此该`TARGET`包含了两部分（用逗号分隔），其中第一部分用于partation。

相关代码在：

python/tvm/driver/tvmc/composite_target.py

# SPIR-V

SPIR-V是一种用于GPU通用计算和图形学的中间语言。

https://blog.csdn.net/qwertyu1234/article/details/50163847

SPIR-V研究：编译器基本原理

# 性能分析工具

linux常用的调试工具：

vmstat、iostat、mpstat、netstat、sar、top：查看系统、程序信息等。

gprof、perf、perf top：定位到具体函数、调用等。

strace、ltrace：系统调用、函数调用、库函数调用等。

pstack、ptree、pmap：堆栈信息。

dmesg：系统log信息。

mallinfo：获得内存分配信息。

`sudo systemctl status xrdp -n50`：打印xrdp服务的log，显示最新的50行。

linux-tools-perf：Android中的perf。

Simpleperf: Android上的Native CPU剖析分析工具。

Android Stuido CPU Profiler：Android Studio提供的CPU剖析工具，本质上就是基于Simpleperf和systrace进行剖析。

GPU Profiler: GPU剖析工具。

heapprofd：Android进程本地内存分析工具。

Perfetto:针对Linux/Android/Chrome平台和用户空间应用性能检测和跟踪工具。基于ftrace，atrace和heapprofd。

Profilo: Facebook开发Android性能剖析库，用于在线收集应用程序的性能跟踪数据。

---

打印文件/proc/{pid}/maps查看内存地址和文件的映射关系，可以得到函数在哪个文件里。

---

https://blog.csdn.net/anualday/article/details/51483993

流量测试三个工具(iperf/netperf/Flowgrind)

## 黑盒测试

Linux上主要有perf、gprof和valgrind三个性能分析工具。

参考：

https://cloud.tencent.com/developer/article/1063652

Linux性能分析工具与图形化方法

https://mp.weixin.qq.com/s/HvADkICPYflS2VTuSB16rg

Linux入门必看：如何60秒内分析Linux性能

https://www.zhihu.com/question/63946754

C++怎么检测内存泄露，怎么定位内存泄露？

https://mp.weixin.qq.com/s/FMYimnxcAya6bhvdGD5LUw

惊魂48小时，阿里工程师如何紧急定位线上内存泄露？

https://blog.csdn.net/xiaowei_cqu/article/details/104238289

性能分析工具：开篇

## valgrind

官网：

https://valgrind.org/

它还有一个叫做QCacheGrind(KCacheGrind)的图形化性能分析工具。

参考：

https://zhuanlan.zhihu.com/p/111556601

valgrind排查内存泄露

https://developer.mantidproject.org/ProfilingWithValgrind.html

Profiling with Valgrind

## 白盒测试

上面提到的主要是黑盒测试工具。

白盒测试工具主要是Linux Test Project和Gcov。

官网：

http://linux-test-project.github.io/

代码：

https://github.com/linux-test-project/ltp

参考：

https://mp.weixin.qq.com/s/Od17bQhpd3FYE2GQd-kvaQ

iOS代码染色原理及技术实践（gcov，gcno，gcda）

https://www.sohu.com/a/329177032_120104204

一文详解C/C++代码覆盖率--gcov/lcov/gcovr

## 代码检查

clang-format：可以格式化排版多种不同语言的代码。

clang-tidy：一个基于clang的静态代码分析框架。

KLEE：一款开源的自动软件测试工具，基于LLVM编译底层基础，能够自动生成测试样例检测软件缺陷。

官网：

http://klee.github.io/

参考：

https://blog.csdn.net/weixin_43721070/article/details/122638851

C++代码自动检测工具clang-format和clang-tidy

## pahole

pahole可用来检查结构体中的内存漏洞，可作为内存优化的一个工具。

代码：

https://git.kernel.org/pub/scm/devel/pahole/pahole.git

## DWARF

DWARF第一版发布于1992年，主要是为UNIX下的调试器提供必要的调试信息。

https://zhuanlan.zhihu.com/p/419908664

DWARF, 调试信息存储格式
