---
layout: post
title:  编译原理, lex&yacc, ANTLR
category: technology 
---

* toc
{:toc}

# 编译原理

## 教程

《Principles of Compiler Design Compilers: Principles, Techniques, and Tools》。该书由于封面上有龙的图案，又被称为“龙书”。下面的虎书、鲸书也是一样的。

《Modern Compiler Implementation in C》，虎书。

《Advanced Compiler Design and Implementation》，鲸书。

以上三本书，被称为编译器领域的圣经。

## blog

https://zhuanlan.zhihu.com/frozengene

一个编译器方面的专栏

http://frozengene.github.io/

一个LLVM方面的blog

https://zhuanlan.zhihu.com/c_1250484713606819840

一个LLVM方面的专栏

## 术语

AST：abstract syntax tree

## Pass

![](/images/img3/single_pass.jpg)

![](/images/img3/multi_pass.jpg)

以上两图展示了One pass/Single pass与Two pass/Multi pass之间的差异。所谓Pass，就是将代码/AST扫描并处理一遍。

早期的编译器一般是Single pass的，它虽然结构简单，但是不便于扩展。所以后来又出现了Multi pass。与之对应的编译器流程，亦被分为前端和后端两部分。

前端：source code -> AST

后端：AST -> target code

而编译流程的每一步，则被抽象为Pass，这个称呼最早为LLVM采用，进而扩展到整个编译原理领域。

pass分为两类，一类是分析(analysis)pass，负责收集信息共其它pass使用，辅助调试或使程序可视化；另一类是变换(transform)pass，改变程序的dataflow/controlflow。

https://www.geeksforgeeks.org/single-pass-two-pass-and-multi-pass-compilers/

Single pass, Two pass, and Multi pass Compilers

https://xz.aliyun.com/t/7257

初探LLVM&clang&pass

http://llvm.org/docs/WritingAnLLVMPass.html

Writing an LLVM Pass

## Android编译

![](/images/img3/ART.png)

AOT：Ahead Of Time，指在运行前编译，比如普通的静态编译。

JIT：Just In Time，指在运行时编译，边运行边编译，比如java虚拟机在运行时就用到JIT技术。

![](/images/img3/aot_jit.jpg)

https://mp.weixin.qq.com/s/vnaI8FwB4Ot46weAgq18Eg

华为新贵！方舟编译器的荣光和使命

https://www.zhihu.com/answer/812481811

周志德（Fred Chow)

----

为了在Android中支持新的Java7-8-9的新特性，Google又开发了D8和R8。

https://juejin.im/post/5d70fb2ce51d4557ca7fddaa

Android CPU, Compilers, D8 & R8

## Polyhedral Model

基于多面体模型的编译优化技术代表了程序自动并行化领域众多方向最先进的水平,成为国际上多个编译研发团队的研究热点。

https://www.cs.colostate.edu/~pouchet/

888.11-Polyhedral Compilation Foundations

http://www.jos.org.cn/jos/ch/reader/create_pdf.aspx?file_no=5563

基于多面体模型的编译“黑魔法”

https://zhuanlan.zhihu.com/p/111680367

Polyhedral Model, Interval Analysis and Compilers

https://www.zhihu.com/question/65708935

深入学习auto vectorization和polyhedral变换方面的优化技术有哪些资料？

https://pliss2019.github.io/albert_cohen_slides.pdf

Polyhedral Compilation as a Design Pattern for Compiler Construction

https://mp.weixin.qq.com/s/QEooKxP1sm5O90AUiqKQEQ

Polyhedral Model—AI芯片软硬件优化利器（一）

https://mp.weixin.qq.com/s/NRtud1UImE5ArZ2zQWFRyg

Polyhedral Model—AI芯片软硬件优化利器（二）

https://mp.weixin.qq.com/s/bLBIrJb82IsnyoXSEr2xtw

Polyhedral Model—AI芯片软硬件优化利器（三）

## PPCG

Polyhedral Parallel Code Generation

代码：

https://github.com/Meinersbur/ppcg

## PLUTO

An automatic parallelizer and locality optimizer for affine loop nests

官网：

http://pluto-compiler.sourceforge.net/

参考：

https://www.zhihu.com/question/329294933

如何评价PLUTO编译器？

## 参考

https://github.com/compiler-explorer/compiler-explorer

一个web版本的编译器工具

https://mp.weixin.qq.com/s/MqfteZBSWbnBpHbFYw8Eqw

如何编写一个简单的Python编译器

https://zhuanlan.zhihu.com/p/28637279

使用LLVM+PLY实现一个C语言子集的玩具编译器

https://mp.weixin.qq.com/s/7wmBsJgPnOtPXcYaoQd1qA

基于LLVM的源码级依赖分析方案的设计与实现

https://mp.weixin.qq.com/s/vOJPxzH_1SUyXzNeE85zHQ

编译器入门：没有siri的那些年，我们如何实现人机对话？

https://zhuanlan.zhihu.com/p/66793637

A Tour to LLVM IR（上）

https://zhuanlan.zhihu.com/p/66909226

A Tour to LLVM IR（下）

https://mp.weixin.qq.com/s/4FJzxPyCmakjIU-9xlQmJQ

阁下可知文言编程之精妙？CMU本科生开源文言文编程语言，数天2K星

https://mp.weixin.qq.com/s/7PH8o1tbjLsM4-nOnjbwLw

Java即时编译器原理解析及实践

# lex&yacc

2014.2

* 前言

春节期间，空闲时间较多，于是研究了一下lex和yacc的用法。知道lex和yacc，那还是大四学习编译原理那门课时候的事情了。转眼之间，那已经是十年前的事情了。

编译原理在整个大学期间的专业课中，属于难度比较高的课程。而且如果不是计算机专业的话，基本没有可能学到这门课。当时的课程作业是完成一个支持脚本绘图的软件。其难度即使以我现在的眼光来看，也颇不容易。当时只有少数人能够做出来，但基本上是参考教这门课的老师出的一本教辅书来写的。

这个课程作业之所以复杂，主要在于老师要求词法和语法的分析器都必须要自己编码。如果退一步，可以使用lex和yacc的话，就没有那么困难了。当然这也与大学里以传授理论为主的思想有关，我还是相当认同这一点的。

再顺便说一句，lex的作者之一是google的前CEO Eric Schmidt，这是他20岁时，在贝尔实验室的作品。当然，不全是他的功劳。实际上lex和yacc都是贝尔实验室的作品，这从lex效仿yacc的书写风格就能略见一斑。相比而言，yacc的地位和复杂度更为重要些。

* 前置条件

要想研究lex和yacc，除了需要有C语言的基础之外。还需要对正则式和BNF（Backus-Naur Form）有所了解。

* 教材

LEX & YACC TUTORIAL by Tom Niemann——这本书比较简练，且附有代码，入门级的极品

* 心得

lex生成的代码中，最重要的是yylex函数，该函数每匹配一个词，就返回一次。yacc生成的代码中，最重要的是yyparse函数，这个函数调用yylex函数以获得所需要的语法词汇。

lex的词法分析，依据用法的不同，可分为三类：

1）需要匹配识别的词汇。

2）需要过滤的词汇。一般是空白、TAB之类的分隔符。

3）直译的词汇。就是那些lex不处理，也不吃掉，而是直接交给yacc分析的词汇。

这三类词汇必须仔细规划，因为被解析的文本中，一旦出现不在上述三类的任何一类中的词汇时，程序就会报错。

yacc的BNF中一般都要包括类似下面的语句：

```c
stmt_list:
          stmt                  { }
        | stmt_list stmt        { }
        ;
```

其中stmt表示单个语句的语法目标，而stmt_list则是一系列语句的集合。

为什么要添加这一句呢？因为yacc在处理被解析的文本时，如果文本不能最终归结为一个单一的语法目标的时候，程序也会报错。

代码示例参见：

https://github.com/antkillerfarm/antkillerfarm_crazy/tree/master/mylex

这里使用的是lex/yacc在linux上现代版本——flex/bison。

# ANTLR

ANTLR—Another Tool for Language Recognition，其前身是PCCTS，它为包括Java，C++，C#,python在内的语言提供了一个通过语法描述来自动构造自定义语言的识别器（recognizer），编译器（parser）和解释器（translator）的框架。

官网：

http://www.antlr.org/

参考：

http://yuzhouwan.com/posts/55501/

Antlr

https://www.ibm.com/developerworks/cn/java/j-lo-antlr/index.html

使用Antlr开发领域语言

# MPS

MPS是jetbrains推出的用于构建DSL的工具。

官网：

https://www.jetbrains.com/mps/

# 世说新语++

## 2020.10（续）

张威本是关陇士族，家中财力雄厚。到任第一年，张威在青州哄抬萝卜收购价，忽悠全郡百姓都开始种萝卜；第二年，青州萝卜大丰收，张威却不再在市场上收购萝卜，直到把萝卜价格压到跳楼价才肯出手。

张威这局棋布了两年，终于以极低的价格在本郡收购了萝卜，又在外郡卖了个好价钱，确实捞了一票。

观张威所作所为，充其量也就是个奸商。这件事情被门下省的御史上奏给隋文帝，经门下省合议，判定张威有罪，愣是因此将张威一个堂堂“省部级干部”削职为民。隋文帝在诏书中责备张威：“我将一州之地交付给你，等于跟你赤心相见，你却不珍惜名声，不检视自己的行为，只会唯利是图。**你是执笏大臣，官人怎可争百姓之利？官家多一分利，百姓失一家血**，如此，天下人当如何看我？”

----

https://new.qq.com/omn/20201024/20201024A01TSJ00.html

清朝满洲的八旗由什么姓氏掌握？旗主又是怎么更迭的？

----

金戈铁马入东陵，壮士长干斩妖清。

弘历狗头悬碧树，慈禧犬尸喂苍鹰。

驱除鞑虏复中华，尽除螨虫荡膻腥。

至今神州犹传诵，考古当如孙殿英。

“考古专家”孙殿英之子“摸金校尉”孙天义，退休后留在陕西为黄帝墓守灵，任陕西省政协副主席，黄帝陵基金会会长。

明陵的地下结构复杂，墓道九曲十八弯，地宫虽然也位于中轴线上，但墓道却是蛇形的（孝陵，长陵，定陵皆如此），墓道口可能出现在圆形宝城墙的任意一个方向。这样一来，除非极其幸运，否则理论上只有挖出一条环绕宝城的环形探沟才能找到墓道口。

反观清陵就耿直得令人瞠目，几乎一个模子刻出来的：包括墓道在内，所有建筑都在中轴线，诚实得可怕。过了方城明楼就是哑巴院，墓道口就在哑巴院琉璃影壁下。

历代皇陵中，唐陵最为坚固，其次就是明陵。如果放到相同生产力水平下比较，清陵的施工质量甚至还不如西夏陵和北魏陵，所以逢盗必失也就不奇怪了。

https://zhuanlan.zhihu.com/p/265634690

为什么明朝皇陵没有一个被盗，而清朝皇陵却被大肆光顾

----

英国18世纪作家、评论家塞缪尔·约翰逊现在一般被称为约翰逊博士，他当年考上了牛津大学，但因为父亲生意失败，无钱交纳学费，被迫从牛津退学。他给报纸写稿挣钱。后来有出版商邀请他编一部英文词典，词典出版20年后，牛津大学给了他博士学位。所以现在人们都称他为约翰逊博士。

----

https://mp.weixin.qq.com/s/urjMik7EMrPTzeP_UWocHw

《夺冠》背后的中国女排，到底有多牛

----

https://www.zhihu.com/question/426879301

《辛丑条约》赔款分39年还清，但10年后大清就亡了，剩下的债怎么办？
