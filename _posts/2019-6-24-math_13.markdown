---
layout: post
title:  数学狂想曲（十三）——最速降线, 泛函 & 变分, 双曲函数和悬链线, Gabriel's Horn, 20世纪10大算法
category: math 
---

# 最速降线（续）

1697年复活节的截止期限，伯努利共收到了5份答案，他自己和其老师莱布尼兹，第三份是他的哥哥雅可布·伯努利，洛必达是第四个，最后是一份匿名答案。伯努利在阅读最后一份解答时立即认出它的作者，他惊叹道：

**“从利爪上认出了这头狮子（recognizes a lion from his claw mark）”**

在给查尔斯的信里，牛顿还写道：**我不喜欢在数学上被外国人糊弄（I do not love to be dunned and teased by foreigners about mathematical things）。**

除了牛顿之外，雅可布·伯努利也是约翰·伯努利最想击败的对手。事实上，三个人虽然都正确回答了该问题，然而所用的方法竟然全都不同。下面提到的变分法，主要是雅可布·伯努利的贡献。

言归正传，最速降线的正确答案是——**摆线（Cycloid）：一个圆在一条定直线上滚动时，圆周上一个定点的轨迹，又称圆滚线、旋轮线。**

![](/images/img3/Cycloid.jpg)

伽利略虽然在最速降线问题上给出了错误的答案，然而他本人对于摆线还是研究颇深的。事实上，摆线的名字就是他起的（1599年）。

他还发现了以下结论：

1.摆线弧的长度等于旋转圆的直径的4倍。

2.摆线弧下方所围成的面积是旋转圆的面积的3倍。

在没有微积分的时代，他是如何发现这些结论的呢？答案：做实验。

是的，你没看错，就是实验。他用一根绳子附在摆线度量出这条绳子的长度再与旋转圆的直径作比较，得到了第一个事实；在一块薄板上画出摆线所围成的图形，再把这个图形切下来，称一下它的重量，然后在同样的薄板上画出旋转圆，再把旋转圆切下来，称一下重量，于是发现了第二条事实。

注意，伽利略虽然发现了摆的等时性，然而他用的摆是圆摆。直到惠更斯改进钟摆，钟摆和摆线才有了关系。这从摆线的英文名可以看的很清楚。伽利略显然采用的是圆滚线的定义。

# 泛函 & 变分

历史上对于最速降线的研究催生了泛函数（Functionals）和变分法（Calculus of Variations）的概念。

这里就以最速降线为例，说明一下泛函和变分的含义。

首先建立坐标系，水平方向为x轴，竖直方向为y轴。

则质点下落速率与下落高度间的关系为：

$$v=\sqrt{2gh}\Rightarrow \frac{\mathrm{d}s}{\mathrm{d}t}=\sqrt{2gy}$$

所以：

$$T=\int_{t_1(A)}^{t_2(B)}\mathrm{d}t=\int_{A}^{B}\frac{\mathrm{d}s}{\sqrt{2gy}}=\int_{A}^{B}\frac{\sqrt{1-y'^2}}{\sqrt{2gy}}\mathrm{d}x$$

显然，这是一个路径积分。

上式可改写为以下形式：

$$T=T[y(x)]=\int_{A}^{B}\frac{\sqrt{1-y'^2}}{\sqrt{2gy}}\mathrm{d}x=\int_{A}^{B}F(x,y,y')\mathrm{d}x$$

注意，这里的$$T[y(x)]$$不能理解为复合函数：

1.复合函数的变换是$$x\to y \to T$$。其中，x、y、T都是数值。换句话说，就是**数值的传递**。

2.在这个问题中，y的具体值，意义不大，如何到达y的路径才是关键。而路径其实可以表达为一个函数，即y是x的函数，而T是x的**函数的函数（也被称为“泛函”）**。

**泛函求极值的方法和过程，被称作变分法。**上述最速降线问题，实际上就是在一个泛函集合上求极值的问题。

对于任意定值$$x \in [x_0,x_1]$$，可取函数$$y(x)$$与另一可取函数$$y_0(x)$$之差$$y(x)-y_0(x)$$，称为函数$$y(x)$$在$$y_0(x)$$处的**变分或者叫函数的变分**，记作$$\delta y$$，其中$$\delta$$称为变分算子，那么：

$$\delta y = y(x)-y_0(x)$$

从上面的定义可以看出函数的变分$$\delta y$$与函数的增量$$\Delta y$$之间的区别：

1.函数的变分$$\delta y$$是两个不同的函数$$y(x)$$和$$y_0(x)$$在自变量x固定时的差，这是函数发生了改变。

2.函数的增量$$\Delta y$$是自变量x的增量使得函数$$y(x)$$产生的增量，函数依然是原来的函数。

被积函数F被称为**泛函的核**。

核的三要素：

1.自变量x。可以有多个自变量。

2.函数y。也可以是多个。

3.y的导数。可以是多个，也可以是高阶导数。

最速降线问题由于只涉及y的一阶导数，因此又被称为**一阶变分**问题。

这类问题是最简单的变分问题，它的极值通常符合Euler–Lagrange equation：

$$F_y-\frac{d}{dx}F'_y=0$$

泛函极值问题的求解方法，除了变分法之外，常见的还有动态规划和最优控制。

教程：

《变分法基础》，老大中著。

>老大中，北京理工大学宇航学院发射与推进工程系副教授。

参考：

https://zhuanlan.zhihu.com/yueaptx

一个变分法方面的专栏

https://blog.csdn.net/shenziheng1/article/details/54808173

泛函与变分初步（Euler-lagrange条件）

https://www.cnblogs.com/MagicXYoung/p/4906606.html

泛函与变分基础

https://blog.csdn.net/theonegis/article/details/86217916

变分法入门介绍

https://zhuanlan.zhihu.com/p/41573146

变分法理解1——泛函简介

https://zhuanlan.zhihu.com/p/41810184

变分法理解2——基本方法

# 双曲函数和悬链线

悬链线 (Catenary) 是一种曲线，因其与两端固定的绳子在均匀引力作用下下垂相似而得名。适当选择坐标系后，悬链线的方程是一个双曲余弦函数。

悬链线背后的故事和推导，百度百科已经比较详细了，不再赘述。参见：

http://baike.baidu.com/view/45656.htm

然而对于实际工程中的悬索结构，由于悬索自身的重量较其所提拉的跨度结构要轻得多，在力学简单计算中可以忽略，结构受力模式成为在水平长度范围内的均布荷载。这种荷载模式与拱结构相同，因此可以推导出在该荷载模式下的悬垂线为一抛物线，线型与拱结构相同，但内力为拉力。

在工程中完全按照悬链线进行设计的结构，恐怕只有高压输电线了。由于不承担任何自重以外的附加荷载，输电线的数学曲线会与悬链线完全一致。

双曲函数的性质，参见：

https://zhuanlan.zhihu.com/p/20042215

可能是最好的讲解双曲函数的文章

![](/images/article/trigonometric.jpg)

![](/images/article/hyperbolic.jpg)

# Gabriel's Horn

Gabriel's Horn，又名托里拆利小号（Torricelli's trumpet），是数学史上非常经典的模型。它最早由Evangelista Torricelli提出，故名。

>注：Evangelista Torricelli，1608~1647，意大利物理学家和数学家。主要研究气压、水压，提出了托里拆利原理，并发明了气压计。

![](/images/article/GabrielHorn.png)

上图是Gabriel's Horn的图像，它由$$y=\frac{1}{x}(x>1)$$绕x轴旋转得到。Torricelli发现Gabriel's Horn是个**体积有限，而表面积无限**的形状。

$$V=\pi\int\limits_1^a\left(\frac{1}{x}\right)^2\mathrm{d}x=\pi\left(1-\frac{1}{a}\right)$$

$$\lim_{a\to\infty}V=\lim_{a\to\infty}\pi\left(1-\frac{1}{a}\right)=\pi\cdot\lim_{a\to\infty}\left(1-\frac{1}{a}\right)=\pi$$

$$A=2\pi\int\limits_1^a {\frac{1}{x}}\sqrt{1+\left(-\frac{1}{x^2}\right)^2}\mathrm{d}x > 2\pi\int\limits_1^a \frac{\mathrm{d}x}{x}=2\pi\ln(a)$$

$$\lim_{a\to\infty}A\ge\lim_{a\to\infty}2\pi\ln(a)=\infty$$

但是反过来的情况，即表面积有限，而体积无限的情况，也就是所谓的Gabriel's horn逆现象，是不存在的。——实际上，众所周知的是表面积一定的形状中，球形体积最大。

Gabriel's horn现象不仅存在于表面积/体积中，也存在于长度/面积中，即所谓的无限长海岸线问题。对此的进一步研究，开拓了数学中的分形几何领域。

# 20世纪10大算法

2000年，IEEE评选出20世纪10大算法。名单如下：

1.[Metropolis Algorithm for Monte Carlo](http://en.wikipedia.org/wiki/Metropolis_Algorithm)

2.[Simplex Method for Linear Programming](http://en.wikipedia.org/wiki/Simplex_Method)

3.[Krylov Subspace Iteration Methods](http://en.wikipedia.org/wiki/Krylov_subspace_methods)

4.[The Decompositional Approach to Matrix Computations](http://en.wikipedia.org/wiki/Matrix_(mathematics)#Decomposition)

5.[The Fortran Optimizing Compiler](http://en.wikipedia.org/wiki/Fortran#History)

6.[QR Algorithm for Computing Eigenvalues](http://en.wikipedia.org/wiki/QR_algorithm)

7.[Quicksort Algorithm for Sorting](http://en.wikipedia.org/wiki/Quicksort)

8.[Fast Fourier Transform](http://en.wikipedia.org/wiki/Fast_Fourier_Transform)

9.[Integer Relation Detection](http://en.wikipedia.org/wiki/Integer_relation_algorithm)

10.[Fast Multipole Method](http://en.wikipedia.org/wiki/Fast_Multipole_Method)

详细内容参见：

http://www.uta.edu/faculty/rcli/TopTen/topten.pdf

中文版本：

http://blog.csdn.net/v_JULY_v/article/details/6127953

类似的，还有奥地利符号计算研究所（Research Institute for Symbolic Computation，简称RISC）的Christoph Koutschan博士，针对计算机科学家所做的调查，选出的最重要的32个算法：

https://mp.weixin.qq.com/s/AFTaowkCz1pfFzaMDen-RA

# 张量分析

在同构的意义下，第零阶张量（r = 0）为标量（Scalar），第一阶张量（r = 1）为向量（Vector），第二阶张量（r = 2）则成为矩阵（Matrix）。

《张量分析》，黄克智著。

>注：黄克智，1927年生，固体力学家。江西中正大学本科+清华硕士+莫斯科大学博士（因应召回国，放弃博士学位）。清华大学工程力学系教授、工程力学研究所所长，中国科学院院士。断裂力学领域权威。

# 拓扑学

《Topopogy Without Tears》，University of New South Wales的Sidney A. Morris著。

该书的中文版：

http://www.topologywithouttears.net/topbookchinese.pdf

# Lie Groups

《State estimation for Robotics: A Matrix Lie Group Approach》

>Marius Sophus Lie，1842～1899，挪威数学家。University of Christiania博士（1871），University of Leipzig教授。当时德国的大学，一个系只有一个教授，所以这里的教授相当于现在的系主任或者院长。Lie接的是Felix Klein的班，后者跑到University of Göttingen当教授去了。

参考：

https://zhuanlan.zhihu.com/p/33156814

李群和李代数

https://zhuanlan.zhihu.com/p/76959511

李群和李代数（一）：刚体的三维运动

https://zhuanlan.zhihu.com/p/77576417

李群和李代数（二）：矩阵李群基础

## Sophus

Sophus是一个C++写的Lie Groups的库。显然，它得名自Marius Sophus Lie。

代码：

https://github.com/strasdat/Sophus
