---
layout: post
title:  C/C++编程心得（四）
category: language 
---

* toc
{:toc}

# C/C++编程心得

## 虚函数

```cpp
class Shape {
public:
    virtual void Draw() const = 0;    // 1) 纯虚函数
    virtual void Error(const string& msg);  // 2) 普通虚函数
    int ObjectID() const;  // 3) 非虚函数
};

class Rectangle: public Shape { ... };
```
- 非虚函数：

基类和派生类都有该函数：

```cpp
Rectangel rc; // rc is an object of type Rectangle
Shape *pB = &rc; // get pointer to rc
Rectangle *pD = &rc; // get pointer to rc

pB->ObjectID(); // calls Shape::ObjectID()
pD->ObjectID(); // calls Rectagle::ObjectID()
```

如果派生类没有该函数，则无论`pB->ObjectID();`还是`pD->ObjectID();`都调用Shape::ObjectID()。

- 普通虚函数：

基类和派生类都有该函数：

```cpp
Rectangel rc; // rc is an object of type Rectangle
Shape *pB = &rc; // get pointer to rc
Rectangle *pD = &rc; // get pointer to rc

pB->ObjectID(); // calls Rectagle::ObjectID()
pD->ObjectID(); // calls Rectagle::ObjectID()
```

如果派生类没有该函数，则无论`pB->ObjectID();`还是`pD->ObjectID();`都调用Shape::ObjectID()。

- 纯虚函数虽然要求派生类必须实现该函数，但并不意味着基类就不可以实现。但需要用特殊的语法才能调用基类实现。

```cpp
ps1->Shape::Draw(); // calls Shape::draw
```

基类和派生类都有该函数的情况与普通虚函数相同。

----

这是override的4种错误情况：

```cpp
class Base {
public:
    virtual void mf1() const;
    virtual void mf2(int x);
    virtual void mf3() &;
    void mf4() const;// is not declared virtual in Base
};

class Derived: public Base {
public:
    virtual void mf1();// declared const in Base, but not in Derived.
    virtual void mf2(unsigned int x);// takes an int in Base, but an unsigned int in Derived
    virtual void mf3() &&;// is lvalue-qualified in Base, but rvalue-qualified in Derived.
    void mf4() const;
};
```

由于声明上的差异，这4种情况均无法override，且不易查找。

```cpp
class Derived: public Base {
public:
    virtual void mf1() const override;// adding "virtual" is OK, but not necessary
    virtual void mf2(int x) override;
    void mf3() & override;
    void mf4() const override; 
};
```
添加`override`关键字之后，就会去基类中查找是否有匹配成员函数，否则直接报错。

----

对`‘vtable for xxxx’`未定义的引用：

必须吐槽一下C++的错误提示，这个错误如果改成没有实现XXX虚函数，就直观的多了。

参考：

https://www.cnblogs.com/xinxue/p/5471708.html

C++11之override

## typedef struct

在C中：

```c
typedef struct Student
{
  int a;
}Stu;
```

于是在声明变量的时候就可：`Stu stu1;`

如果没有typedef就必须用`struct Student stu1;`来声明。

这里的Stu实际上就是struct Student的别名。

但是在C++中：

```cpp
struct Student
{
  int a;
};
```

声明变量时可直接`Student stu2；`

所以当给C++的库提供C的接口时，经常可以看见如下用法：

```cpp
typedef struct Student Student;
```

这样就可以抹平两者的差异了。

参考：

https://www.cnblogs.com/qyaizs/articles/2039101.html

struct和typedef struct彻底明白了

## cout格式化输出

```c
cout<<hex<<i<<endl; //输出十六进制数
cout<<oct<<i<<endl; //输出八进制数
cout<<dec<<i<<endl; //输出十进制数
```

## 小细节

对于std::vector来说，begin()/end()返回iterator，而front()/back()返回的是element。此外，还有cbegin()/cend()返回const iterator。

```cpp
template< class InputIt >
vector( InputIt first, InputIt last,
        const Allocator& alloc = Allocator() );
```

这个构造函数很有意思，可以用于复制一个[first, last)区间的数据。

----

除了for循环遍历之外，C++还可以用std::for_each/std::find_if进行循环遍历，尤其是后者可以用于条件筛选。

```cpp
for(auto& item: list)
{
  //do sth
}
```

还有一些方法可用于统计：

std::all_of, std::any_of, std::none_of：全都是/至少有一个是/全都不是XXX。

std::count, std::count_if：计数。

----

std::map用二叉树实现，相当于Java中的TreeMap，而std::unordered_map用hash表实现，相当于Java中的HashMap。

C++11之前的一些非标准STL还实现了一种叫做hash_map的容器，原理上也是使用hash表，C++11标准为了不与之前的非标实现冲突，换了个名字而已。

----

map：存储key-value pair。`iterator->first`指向key，而`iterator->second`指向value。

set：只有value。set也有unordered_set这样的变种。

map和set都不允许重复值，如果需要重复的话，可以使用multiset和multimap。

----

```cpp
template<typename T>
struct S {
    template<typename U> void foo(){}
};
 
template<typename T>
void bar()
{
    S<T> s;
    s.foo<T>(); // error: < parsed as less than operator
    s.template foo<T>(); // OK
}
```

上面是`template`的一种特殊用法，本来`s.foo<T>()`也就行了，然而编译器会把它当作`s.foo<T`，所以需要加上`template`以示区分。

----

数字转字符串：

```cpp
double a = 123.32;
string res;
stringstream ss;
ss << a;
ss >> res;//Or res = ss.str();
```

字符串转数字：

```cpp
string a = "123.32";
double res;
stringstream ss;
ss << a;
ss >> res;
```

----

```cpp
#define DispatchOnTensorType(tensor_type, function, ...)          \
  switch (tensor_type->AsPrimitiveDataType()->GetDataType()) {    \
    case ONNX_NAMESPACE::TensorProto_DataType_FLOAT:              \
      function<float>(__VA_ARGS__);                               \
      break;                                                      \
    case ONNX_NAMESPACE::TensorProto_DataType_BOOL:               \
      function<bool>(__VA_ARGS__);                                \
      break;                                                      \
    case ONNX_NAMESPACE::TensorProto_DataType_DOUBLE:             \
      function<double>(__VA_ARGS__);                              \
      break;                                                      \
```

## POD

POD，全称plain old data，plain代表它是一个普通类型，old代表它可以与c兼容，可以使用比如memcpy()这类c中最原始函数进行操作。

POD数据类型主要用来解决C++与C之间数据类型的兼容性，以实现C++程序与C函数的交互。

参考：

https://blog.csdn.net/fu_zk/article/details/17028669

C++的POD数据类型

https://www.cnblogs.com/DswCnblog/p/6371071.html

C++11 POD类型

## 命令行解析

https://github.com/jarro2783/cxxopts

https://github.com/tanakh/cmdline

https://github.com/gflags/gflags

前两个是轻量级的库，只要包含header即可。gflags是Google的产品，适合比较高端的用法。

此外，boost::program_options也是一个选择。

## inl文件

inl文件是内联函数的源文件。内联函数通常在C++头文件中实现，但是当C++头文件中内联函数过多的情况下，我们想使头文件看起来简洁点，能不能像普通函数那样将内联函数声明和函数定义放在头文件和实现文件中呢？

当然答案是肯定的，具体做法将是：将内联函数的具体实现放在inl文件中，然后在该头文件末尾使用#include引入该inl文件。

参考：

https://www.cnblogs.com/findumars/p/4340936.html

C++中的INL

## std::any & std::variant & std::optional

std::any：一个类型安全的容器，可以放置各种类型的数据。类似于`void*`。

std::variant：类型安全的union。

std::optional：该类型是用来表示一个值是不是存在的。std::optional有两个状态，即有值和无值。通常我们将std::optional用于函数的返回值，当函数执行成功了返回有值的状态，当函数执行失败了返回无值的状态。

参考：

https://www.jianshu.com/p/b2ec40c1c7c1

C++17：std::any, std::variant 和 std::optional

# C/C++参考资源

https://zhuanlan.zhihu.com/p/23016264

这么多款STL，总有一款适合你

https://mp.weixin.qq.com/s/Hpn7KqYlBKz0JdryiozqyQ

每个开发者都应该了解的一些C++特性

https://www.cnblogs.com/wuchanming/p/3913492.html

emplace_back与push_back的区别

https://zhuanlan.zhihu.com/p/82895086

当我们谈论C++时，我们在谈论什么？

https://mp.weixin.qq.com/s/pxyTlQn4wx-N_MaWZc0oAQ

漫谈C++的各种检查

https://mp.weixin.qq.com/s/LchYGGcSbIMVGxO0Uea0RA

深入C++回调

https://blog.csdn.net/hahahacff/article/details/39504699

Java中创建对象的时候代码执行顺序(这个问题C++应该也存在)

https://blog.csdn.net/msq19895070/article/details/7910969

嵌入式程序员应知道的几个基本问题

http://dev.yesky.com/393/3007393.shtml

深入理解C++中的mutable关键字

http://blog.csdn.net/apunix/archive/2008/01/14/2043945.aspx

UNREFERENCED_PARAMETER的作用

https://mp.weixin.qq.com/s/1ELGzBkIdO1xa6LZV80raQ

C++中Future和Promise的一种简单实现

https://www.zhihu.com/question/24301047

如何理解C++11的六种memory order？

https://mp.weixin.qq.com/s/en9T7WfQDvFan9tu1q8oRA

c++11与内存模型

https://mp.weixin.qq.com/s/2Lq93xPffOVZB8WvbkhCDg

函数调用的三种约定，你都清楚吗

https://mp.weixin.qq.com/s/m-dLZGAvY5BdVRfVWSpS2g

C++11的异步操作不只是thread

https://zhuanlan.zhihu.com/p/58976871

编程风格之声明式与命令式的区别

https://www.zhihu.com/question/447592340

C语言的源程序是可以直接运行吗？（C语言的解释执行）

# Java++

https://www.jianshu.com/p/25b328753017

压缩20M文件从30秒到1秒的优化过程

https://mp.weixin.qq.com/s/mdYZhkWkAILQz_JnVA5xvA

深入AQS(AbstractQueuedSynchronizer)

https://mp.weixin.qq.com/s/_MVTvyG3gcsJcpidtQEBqg

为什么Java中“1000==1000”为false，而”100==100“为true？

https://mp.weixin.qq.com/s/X0foqlams1wMMnRE017XmQ

JDK 5-15都有哪些经典新特性

https://mp.weixin.qq.com/s/6HKCnN2HDi84bwjElhZBcQ

打工人，从JMM透析volatile与synchronized原理

https://mp.weixin.qq.com/s/GaK4iyTNvDsO9nMCXxrWkQ

看完这篇Exception和Error，和面试官扯皮就没问题了

https://mp.weixin.qq.com/s/01fj7l3xsxHVstlkrJ0epw

Java如何实现动态脚本？

https://mp.weixin.qq.com/s/Uw7YaphnlMQGGazIBYplgQ

我调研了100来个Java开源博客系统，发现这5个最好用！

https://mp.weixin.qq.com/s/tMUUwT0g3bzxyRgq5GeMWg

从0到1!大话动静态代理

https://mp.weixin.qq.com/s/_sLQiyNm92n2LA5YMNTocQ

Java字符串String那些事
