---
layout: post
title:  boost, Test framework, C#, Objective-C, Haskell, Kotlin
category: language 
---

# C/C++编程心得

## 虚函数

```c++
class Shape {
public:
    virtual void Draw() const = 0;    // 1) 纯虚函数
    virtual void Error(const string& msg);  // 2) 普通虚函数
    int ObjectID() const;  // 3) 非虚函数
};

class Rectangle: public Shape { ... };
```
- 非虚函数：

基类和派生类都有该函数：

```c++
Rectangel rc; // rc is an object of type Rectangle
Shape *pB = &rc; // get pointer to rc
Rectangle *pD = &rc; // get pointer to rc

pB->ObjectID(); // calls Shape::ObjectID()
pD->ObjectID(); // calls Rectagle::ObjectID()
```

如果派生类没有该函数，则无论`pB->ObjectID();`还是`pD->ObjectID();`都调用Shape::ObjectID()。

- 普通虚函数：

基类和派生类都有该函数：

```c++
Rectangel rc; // rc is an object of type Rectangle
Shape *pB = &rc; // get pointer to rc
Rectangle *pD = &rc; // get pointer to rc

pB->ObjectID(); // calls Rectagle::ObjectID()
pD->ObjectID(); // calls Rectagle::ObjectID()
```

如果派生类没有该函数，则无论`pB->ObjectID();`还是`pD->ObjectID();`都调用Shape::ObjectID()。

- 纯虚函数虽然要求派生类必须实现该函数，但并不意味着基类就不可以实现。但需要用特殊的语法才能调用基类实现。

```c++
ps1->Shape::Draw(); // calls Shape::draw
```

基类和派生类都有该函数的情况与普通虚函数相同。

----

对`‘vtable for xxxx’`未定义的引用：

必须吐槽一下C++的错误提示，这个错误如果改成没有实现XXX虚函数，就直观的多了。

参考：

https://www.cnblogs.com/xinxue/p/5471708.html

C++11之override

# boost

## 安装&编译

boost直接安装：

`sudo apt install libboost-all-dev`

编译：

```bash
./bootstrap.sh
./b2 install link=static cxxflags=-fPIC --with-test --prefix=</path/to/install>
```

boost的组件有很多，这里只编译了test组件。

>注意：指定生成目录的时候，stage使用stagedir选项，而install使用prefix选项。

## boost::format

```cpp
cout << boost::format("%1%"
    "%1t 十进制 = [%2$d]\n"
    "%1t 格式化的十进制 = [%2$5d]\n"
    "%1t 格式化十进制，前补'0' = [%2$05d]\n"
    "%1t 十六进制 = [%2$x]\n"
    "%1t 八进制 = [%2$o]\n"
    "%1t 浮点 = [%3$f]\n"
    "%1t 格式化的浮点 = [%3$3.3f]\n"
    "%1t 科学计数 = [%3$e]\n"
    ) % "example :\n" % 15 % 15.01 << endl;
```

参考：

https://www.cnblogs.com/WuErPIng/archive/2005/04/21/142308.html

浅尝boost之format

## Boost.Parameter

该库可以支持命名参数，然而实现太复杂。期待新标准直接支持。

## Boost.MPL

元编程（Metaprogramming）是指某类计算机程序的编写，这类计算机程序编写或者操纵其他程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作。很多情况下与手工编写全部代码相比工作效率更高。编写元程序的语言称之为元语言，被操作的语言称之为目标语言。一门语言同时也是自身的元语言的能力称之为反射。

MPL可以看成是STL的编译期版本，或者说元编程版本。它同样也提供了各种容器，只不过容纳的对象不是数据，而是类型。

参考：

www.cppblog.com/jack-wang/archive/2010/10/04/128589.html

模板元编程---用MPL解决实际问题

https://mp.weixin.qq.com/s/5ireHbuWFrVY6T9qnvs3rQ

浅谈C++元编程

# Test framework

## boost.test

boost.test是一个C++的单元测试框架。

代码示例：

https://github.com/antkillerfarm/antkillerfarm_crazy/tree/master/cpp/boost_test

要点：

- 测试代码无须main函数。

- 编译：`-DBOOST_TEST_DYN_LINK`

- 链接：`-lboost_unit_test_framework`

打印所有的log：

`unit_test --log_level=all`

参考：

https://www.ibm.com/developerworks/cn/aix/library/au-ctools1_boost/

了解Boost单元测试框架

https://www.ibm.com/developerworks/cn/aix/library/au-ctools2_cppunit/index.html

了解CppUnit

https://www.ibm.com/developerworks/cn/aix/library/au-ctools3_ccptest/

了解CppTest。上面这3篇算是比较权威的C++单元测试工具的教程了，作者都是Arpan Sen。

https://my.oschina.net/vaero/blog/227528

C++单元测试：boost.test

https://remonstrate.wordpress.com/2011/07/06/boost-%e7%9a%84-unit-test/

boost的unit test

## googletest

安装：

`sudo apt install libgtest-dev`

代码：

https://github.com/google/googletest

`gtest_filter`是一个很有用的选项。

示例：

`./foo_test --gtest_filter=FooTest*.*-FooTest.Bar:FooTest2.Bar`

运行所有“测试案例名称(testcase_name)”为FooTest的案例，但是除了FooTest.Bar和FooTest2.Bar。

参考：

https://www.ibm.com/developerworks/cn/aix/library/au-googletestingframework.html

Google C++ Testing Framework简介

https://www.cnblogs.com/coderzh/archive/2009/04/06/1426755.html

玩转Google开源C++单元测试框架Google Test系列(gtest)

## CTest

CTest是CMake集成的一个测试工具。

参考：

https://www.cnblogs.com/457220157-FTD/p/4139149.html

CTest

# C#

## XmlReader

XmlReader是.NET中处理XML的类。之前的W3C已经提出了DOM和SAX两种模型。作为最早的模型，这两种模型在各种语言中都有相应的实现，关于它们的讨论也有很多，在此不再赘述。

XmlReader是一种快速、无缓冲、向前并只读的轻量级XML引擎，在这一点上它和SAX是相同的。它和SAX的主要区别在于它们的设计模式是不同的。SAX是push模式的XML引擎，它会在读到相应的节点时，触发消息并将之发送给调用程序。而XmlReader则是pull式的XML引擎，它更符合人们的通常的对文件顺序处理的习惯。当然除此之外，它还有其他的好处。参看MSDN的相关章节。

通常情况下，pull模型比push模型的效率高，但push模型的灵活性要高些。例如，Dos下的编程主要是一种顺序执行的pull模型结构，而Windows下的编程则是一种基于消息的push模型结构。所以，读取特定标签内容的XML文档，采用XmlReader比较好，而对于那些结构不固定或需要遍历的XML文档用SAX较好。

PS: XmlReader提出的pull方案，后来被libxml2采用，成为了GTK+的一部分。

## Microsoft.WindowsCE.Forms

这是一个Wince的类。由于.NET CF中的System.Windows.Forms.Form没有DefWndProc参数，所以要想接收窗体消息就要用到它。不过它的dll需要自己添（在.NET CF的安装路径下可以找到这个Microsoft.WindowsCE.Forms.dll），接收C++编程时的那些WM_开头的消息时需要用到这个模块中的MessageWindow类。

代码示例如下:

```c#
public class MsgWindow : MessageWindow
{
    public const int WM_CUSTOMMSG = 0x0400+3333;
    
    private Form1 msgform;//Form1是用于接收消息的那个窗体Form。
    public MsgWindow(Form1 msgform)
    {
        this.msgform = msgform;
    }
    protected override void WndProc(ref Message msg)
    {
        switch (msg.Msg)
        {
            case WM_CUSTOMMSG:
                //do sth
                break;
        }
        base.WndProc(ref msg);
    }
}
```

## C#中的发布功能

C#项目属性中有个publish标签是关于发布程序的功能的。用过Java的人都知道，Java的可移植性是很不错的，但Java程序的部署相对于一般 的本地程序来说就显得比较麻烦了。至少在本人的程序生涯中，就多次经历拿着JAR文件兴冲冲的跑去，却发现目标机没有JRE的情况。

C#中的发布功能除了能打包程序和.NET Framework之外，还有网络发布的功能。这里我主要讨论单机程序的打包。如果只有程序文件的话，情况比较简单，没什么难度。如果还有数据文件的话就 要注意了。在程序文件（Application Files）对话框中，每个文件有一个发布状态（Publish Status）的属性，如果你希望数据文件和程序文件在同一个文件夹下的话，最好选择包含（Include）而不是数据文件（Data File），后者会把你的数据文件部署到一个专门的数据文件夹下，这个文件夹可用 System.Deployment.Application.DataDirectory获得。

## Mono

.NET的跨平台一直不咋样，直到2014年MS推出的.NET core才有所改观。虽然.NET core可以开发C#应用，然而仅仅局限于非GUI的应用，所以目前更推荐使用Mono方案。

Mono早先是Xamarin推出的跨平台.NET替代项目，目前已经被MS收购，按照MS的路线图，Mono将作为非Windows平台的.NET方案而存在。它将和Windows平台的.NET方案共用.NET core的代码。

官网：

https://www.mono-project.com/

Mono有个IDE，叫做MonoDevelop。

官网：

https://www.monodevelop.com/

安装方面，尽管ubuntu的仓库已经有了Mono，但是却没有MonoDevelop，且该Mono版本与最新的MonoDevelop不兼容，因此还是老老实实采用官网的方案安装吧。

参考：

https://www.cnblogs.com/shanyou/p/4295163.html

.NET Core与.NET Framework、Mono之间的关系

https://www.cnblogs.com/wer-ltm/p/8776846.html#!comments

.NET：持续进化的统一开发平台

https://mp.weixin.qq.com/s/j5PFEkWd49SNKVdlWoqHiw

.NET Core很酷，你不得不知！

## NuGet

NuGet是C#项目的包管理工具，作用类似maven、pip。

官网：

https://www.nuget.org/

# Objective-C

## 环境搭建

PC上搭建Objective-C（以下简称OC）开发环境，主要借助GNUstep开源项目的成果。

以Ubuntu为例，步骤如下：

1.安装软件包。

`sudo apt-get install gnustep-devel libjpeg-dev libtiff5-dev gobjc-4.9`

2.设置环境变量。

`GNUSTEP_MAKEFILES=/usr/share/GNUstep/Makefiles`

# Haskell

官网：

https://www.haskell.org/

Haskell主要有两套包管理系统cabal和stack，它们的仓库都是一样的，只是前端语法不同。stack相对比较新，也是目前的首选。

Haskell的官方仓库：

http://hackage.haskell.org/

清华镜像：

https://mirrors.tuna.tsinghua.edu.cn/help/hackage/

Haskell的安装有多种模式，推荐Stack模式，直接使用Stack安装所需要的依赖。

Stack的官网：

https://www.haskellstack.org/

然而国内访问不了，幸好有github：

https://github.com/commercialhaskell/stack/releases/

# Kotlin

Kotlin是一门编程语言，由JetBrains公司开发，与Java 100%互通。

官网：

http://kotlinlang.org/

官网文档：

http://kotlinlang.org/docs/reference/android-overview.html

国内中文文档：

https://huanglizhuo.gitbooks.io/kotlin-in-chinese/content/

国内中文文档2：

http://www.liying-cn.net/kotlin/docs/reference/

国内中文文档3：

https://www.kotlincn.net/

官方示例：

https://github.com/Kotlin/kotlin-examples
