---
layout: post
title:  C/C++编程心得（四）, boost, Test framework
category: language 
---

* toc
{:toc}

# C/C++编程心得

## 虚函数

```cpp
class Shape {
public:
    virtual void Draw() const = 0;    // 1) 纯虚函数
    virtual void Error(const string& msg);  // 2) 普通虚函数
    int ObjectID() const;  // 3) 非虚函数
};

class Rectangle: public Shape { ... };
```
- 非虚函数：

基类和派生类都有该函数：

```cpp
Rectangel rc; // rc is an object of type Rectangle
Shape *pB = &rc; // get pointer to rc
Rectangle *pD = &rc; // get pointer to rc

pB->ObjectID(); // calls Shape::ObjectID()
pD->ObjectID(); // calls Rectagle::ObjectID()
```

如果派生类没有该函数，则无论`pB->ObjectID();`还是`pD->ObjectID();`都调用Shape::ObjectID()。

- 普通虚函数：

基类和派生类都有该函数：

```cpp
Rectangel rc; // rc is an object of type Rectangle
Shape *pB = &rc; // get pointer to rc
Rectangle *pD = &rc; // get pointer to rc

pB->ObjectID(); // calls Rectagle::ObjectID()
pD->ObjectID(); // calls Rectagle::ObjectID()
```

如果派生类没有该函数，则无论`pB->ObjectID();`还是`pD->ObjectID();`都调用Shape::ObjectID()。

- 纯虚函数虽然要求派生类必须实现该函数，但并不意味着基类就不可以实现。但需要用特殊的语法才能调用基类实现。

```cpp
ps1->Shape::Draw(); // calls Shape::draw
```

基类和派生类都有该函数的情况与普通虚函数相同。

----

这是override的4种错误情况：

```cpp
class Base {
public:
    virtual void mf1() const;
    virtual void mf2(int x);
    virtual void mf3() &;
    void mf4() const;// is not declared virtual in Base
};

class Derived: public Base {
public:
    virtual void mf1();// declared const in Base, but not in Derived.
    virtual void mf2(unsigned int x);// takes an int in Base, but an unsigned int in Derived
    virtual void mf3() &&;// is lvalue-qualified in Base, but rvalue-qualified in Derived.
    void mf4() const;
};
```

由于声明上的差异，这4种情况均无法override，且不易查找。

```cpp
class Derived: public Base {
public:
    virtual void mf1() const override;// adding "virtual" is OK, but not necessary
    virtual void mf2(int x) override;
    void mf3() & override;
    void mf4() const override; 
};
```
添加`override`关键字之后，就会去基类中查找是否有匹配成员函数，否则直接报错。

----

对`‘vtable for xxxx’`未定义的引用：

必须吐槽一下C++的错误提示，这个错误如果改成没有实现XXX虚函数，就直观的多了。

参考：

https://www.cnblogs.com/xinxue/p/5471708.html

C++11之override

## K&R风格

在C语言的函数定义上，我们通常用的函数定义方式为ANSI C的函数定义方式。但是在C语言之父创立C语言之时，函数的定义形式并非现在我们所见到的形式。

这种风格被称为K&R风格，多见于一些历史悠久的项目或者老的书籍中。出于兼容性考虑，现代的C编译器仍然支持K&R风格。

>记得大学学C语言，用的是谭浩强的书。当时，授课老师看不上谭的书，于是另外推荐了一本，那本书更古老，用的就是所谓的K&R风格。。。但在实际工作中，从来没见过K&R风格的代码。。。

详见：

http://blog.chinaunix.net/uid-7426920-id-2627743.html

ANSI和K&R两种函数定义风格

## 小细节

对于std::vector来说，begin()/end()返回iterator，而front()/back()返回的是element。此外，还有cbegin()/cend()返回const iterator。

```cpp
template< class InputIt >
vector( InputIt first, InputIt last,
        const Allocator& alloc = Allocator() );
```

这个构造函数很有意思，可以用于复制一个[first, last)区间的数据。

----

除了for循环遍历之外，C++还可以用std::for_each/std::find_if进行循环遍历，尤其是后者可以用于条件筛选。

```cpp
for(auto& item: list)
{
  //do sth
}
```

还有一些方法可用于统计：

std::all_of, std::any_of, std::none_of：全都是/至少有一个是/全都不是XXX。

std::count, std::count_if：计数。

----

std::map用二叉树实现，相当于Java中的TreeMap，而std::unordered_map用hash表实现，相当于Java中的HashMap。

C++11之前的一些非标准STL还实现了一种叫做hash_map的容器，原理上也是使用hash表，C++11标准为了不与之前的非标实现冲突，换了个名字而已。

----

map：存储key-value pair。`iterator->first`指向key，而`iterator->second`指向value。

set：只有value。set也有unordered_set这样的变种。

map和set都不允许重复值，如果需要重复的话，可以使用multiset和multimap。

----

```cpp
template<typename T>
struct S {
    template<typename U> void foo(){}
};
 
template<typename T>
void bar()
{
    S<T> s;
    s.foo<T>(); // error: < parsed as less than operator
    s.template foo<T>(); // OK
}
```

上面是`template`的一种特殊用法，本来`s.foo<T>()`也就行了，然而编译器会把它当作`s.foo<T`，所以需要加上`template`以示区分。

----

数字转字符串：

```cpp
double a = 123.32;
string res;
stringstream ss;
ss << a;
ss >> res;//Or res = ss.str();
```

字符串转数字：

```cpp
string a = "123.32";
double res;
stringstream ss;
ss << a;
ss >> res;
```

## POD

POD，全称plain old data，plain代表它是一个普通类型，old代表它可以与c兼容，可以使用比如memcpy()这类c中最原始函数进行操作。

POD数据类型主要用来解决C++与C之间数据类型的兼容性，以实现C++程序与C函数的交互。

参考：

https://blog.csdn.net/fu_zk/article/details/17028669

C++的POD数据类型

https://www.cnblogs.com/DswCnblog/p/6371071.html

C++11 POD类型

## 参考

https://mp.weixin.qq.com/s/Hpn7KqYlBKz0JdryiozqyQ

每个开发者都应该了解的一些C++特性

https://www.cnblogs.com/wuchanming/p/3913492.html

emplace_back与push_back的区别

https://zhuanlan.zhihu.com/p/82895086

当我们谈论C++时，我们在谈论什么？

https://mp.weixin.qq.com/s/pxyTlQn4wx-N_MaWZc0oAQ

漫谈C++的各种检查

https://mp.weixin.qq.com/s/LchYGGcSbIMVGxO0Uea0RA

深入C++回调

https://blog.csdn.net/hahahacff/article/details/39504699

Java中创建对象的时候代码执行顺序(这个问题C++应该也存在)

https://blog.csdn.net/msq19895070/article/details/7910969

嵌入式程序员应知道的几个基本问题

http://dev.yesky.com/393/3007393.shtml

深入理解C++中的mutable关键字

http://blog.csdn.net/apunix/archive/2008/01/14/2043945.aspx

UNREFERENCED_PARAMETER的作用

https://mp.weixin.qq.com/s/1ELGzBkIdO1xa6LZV80raQ

C++中Future和Promise的一种简单实现

https://www.zhihu.com/question/24301047

如何理解C++11的六种memory order？

https://mp.weixin.qq.com/s/en9T7WfQDvFan9tu1q8oRA

c++11与内存模型

# boost

## 安装&编译

boost直接安装：

`sudo apt install libboost-all-dev`

编译：

```bash
./bootstrap.sh
./b2 install link=static cxxflags=-fPIC --with-test --prefix=</path/to/install>
```

boost的组件有很多，这里只编译了test组件。

>注意：指定生成目录的时候，stage使用stagedir选项，而install使用prefix选项。

## boost::format

```cpp
cout << boost::format("%1%"
    "%1t 十进制 = [%2$d]\n"
    "%1t 格式化的十进制 = [%2$5d]\n"
    "%1t 格式化十进制，前补'0' = [%2$05d]\n"
    "%1t 十六进制 = [%2$x]\n"
    "%1t 八进制 = [%2$o]\n"
    "%1t 浮点 = [%3$f]\n"
    "%1t 格式化的浮点 = [%3$3.3f]\n"
    "%1t 科学计数 = [%3$e]\n"
    ) % "example :\n" % 15 % 15.01 << endl;
```

参考：

https://www.cnblogs.com/WuErPIng/archive/2005/04/21/142308.html

浅尝boost之format

## Boost.Parameter

该库可以支持命名参数，然而实现太复杂。期待新标准直接支持。

## Boost.MPL

元编程（Metaprogramming）是指某类计算机程序的编写，这类计算机程序编写或者操纵其他程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作。很多情况下与手工编写全部代码相比工作效率更高。编写元程序的语言称之为元语言，被操作的语言称之为目标语言。一门语言同时也是自身的元语言的能力称之为反射。

MPL可以看成是STL的编译期版本，或者说元编程版本。它同样也提供了各种容器，只不过容纳的对象不是数据，而是类型。

参考：

www.cppblog.com/jack-wang/archive/2010/10/04/128589.html

模板元编程---用MPL解决实际问题

https://mp.weixin.qq.com/s/5ireHbuWFrVY6T9qnvs3rQ

浅谈C++元编程

## BGL

Boost Graph Library是boost提供的一个和图论相关的工具库，集成了常见的图操作（如BFS和DFS）和图算法（最短路径、拓朴排序）。

官网：

https://www.boost.org/doc/libs/1_73_0/libs/graph/doc/

参考：

https://www.ibm.com/developerworks/cn/aix/library/au-aix-boost-graph/

探索Boost Graph Library

示例：

https://github.com/antkillerfarm/antkillerfarm_crazy/blob/master/cpp/boost/graph/main.cpp

test1：base。

test2：批量添加边+拓扑排序。

test3：顶点改为字符串数据类型，使用BGL API。

test4：顶点改为字符串数据类型，不使用BGL API。

# Test framework

## boost.test

boost.test是一个C++的单元测试框架。

代码示例：

https://github.com/antkillerfarm/antkillerfarm_crazy/tree/master/cpp/boost_test

要点：

- 测试代码无须main函数。

- 编译：`-DBOOST_TEST_DYN_LINK`

- 链接：`-lboost_unit_test_framework`

打印所有的log：

`unit_test --log_level=all`

参考：

https://www.ibm.com/developerworks/cn/aix/library/au-ctools1_boost/

了解Boost单元测试框架

https://www.ibm.com/developerworks/cn/aix/library/au-ctools2_cppunit/index.html

了解CppUnit

https://www.ibm.com/developerworks/cn/aix/library/au-ctools3_ccptest/

了解CppTest。上面这3篇算是比较权威的C++单元测试工具的教程了，作者都是Arpan Sen。

https://my.oschina.net/vaero/blog/227528

C++单元测试：boost.test

https://remonstrate.wordpress.com/2011/07/06/boost-%e7%9a%84-unit-test/

boost的unit test

## googletest

安装：

`sudo apt install libgtest-dev`

代码：

https://github.com/google/googletest

`gtest_filter`是一个很有用的选项。

示例：

`./foo_test --gtest_filter=FooTest*.*-FooTest.Bar:FooTest2.Bar`

运行所有“测试案例名称(testcase_name)”为FooTest的案例，但是除了FooTest.Bar和FooTest2.Bar。

`-`表示去除，`:`表示并列。

参考：

https://www.ibm.com/developerworks/cn/aix/library/au-googletestingframework.html

Google C++ Testing Framework简介

https://www.cnblogs.com/coderzh/archive/2009/04/06/1426755.html

玩转Google开源C++单元测试框架Google Test系列(gtest)

## CTest

CTest是CMake集成的一个测试工具。

参考：

https://www.cnblogs.com/457220157-FTD/p/4139149.html

CTest
