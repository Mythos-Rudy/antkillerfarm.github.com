---
layout: post
title:  深度强化学习（三）——A2C & A3C, DDPG
category: DRL 
---

# DQN进化史（续）

## Prioritised replay

采样优先级采用目标Q值与当前Q值的差值来表示：

$$| \color{blue}{r+\gamma \max_{a'}Q(s',a',w^-)}-Q(s,a,w) |$$

优先级越高，那么采样的概率就越高。

## Dueling Network

Dueling Network将Q网络分成了两个通道：

- Action无关的值函数：$$V(s,v)$$

- Action相关的值函数：$$A(s,a,w)$$

$$Q(s,a)=V(s,v)+A(s,a,w)$$

![](/images/img3/DuelDQN.png)

## NAF

传统RL任务：低维输入，低维离散输出。

Atari游戏：高维输入，低维离散输出。

通常的控制系统，除了离散控制之外，还有连续控制，然而DQN并不能直接用于连续域：因为它根本就没办法穷举每一个动作，也就无法计算最大的Q值对应的动作。

论文：

《Continuous Deep Q-Learning with Model-based Acceleration》

对于连续控制，由于我们已经无法选择动作，因此只能设计一种方法，使得我们输入状态，然后能够输出动作，并且保证输出动作对应的Q值是最大值。

这个时候，我们有两种选择：

- 弄两个神经网络，一个是Policy网络，输入状态，输出动作，另一个是Q网络，输入状态，输出Q值。这种做法其实就是Actor-Critic算法。

- 只弄一个神经网络，既能输出动作也能输出Q值。这就是本节所要使用的方法。

在《强化学习（八）》中，我们已经指出advantage function不改变策略梯度，但能有效约束variance。这里沿用了A函数定义：

$$A(s,a)=Q(s,a)-V(s)$$

作者设计了如下A函数：

$$A(x,\mu | \theta^A)=-\frac{1}{2}(u-\mu(x | \theta^\mu))^T P(x | \theta^P)(u-\mu(x | \theta^\mu))$$

其中x是状态，u是动作，$$\mu$$是神经网络的输出动作。

它的一阶矩阵形式等价于：$$A(a)=-P(a-x)^2$$

因此，这是一个正定二次型的相反数，即$$A\le 0$$。

我们的目标就是优化A函数，使之尽可能最大（即等于0）。这时A函数对应的动作即为最优动作。

以下是具体的网络结构图。

![](/images/img3/NAF.jpg)

其流程如下：

- 状态经过两层MLP之后（注意：第2层没有RELU），生成三个tensor：V、$$\mu$$、L0。

- 将L0转化为L。也就是将一个列向量转换为下三角矩阵，就是从新排列，然后把对角线的数exp对数化。

- 使用Cholesky分解构建P。

>若A为n阶对称正定矩阵，则存在唯一的主对角线元素都是正数的下三角阵L，使得$$A=LL^T$$，此分解式称为**正定矩阵的乔列斯基（Cholesky）分解**。

- 按照上图的步骤，依此构建A和Q。其中的Q正好可用于DQN的训练。

综上，NAF既可以输出action，也可产生Q值，而Q值可用于DQN训练，从而使算法可以进行下去。

>这里的构造逻辑和VAE很相似，都是假定构造方法成立，然后再用神经网络拟合构造所需的各要素，最后通过训练以达成构造的效果。

## Distributional DQN

Distributional DQN也叫做Categorical DQN。

![](/images/img3/Distributional_DQN.png)

cumulated reward（累计奖励）是一个孤立的值，它无法完全反映reward的全貌，比如上图中的两个reward，其累计值完全相同，但分布却有很大的差异。这一定程度上会对策略的选择产生影响。

![](/images/img3/Distributional_DQN_2.png)

传统DQN最后一层输出的是一个N维的向量，表示N个动作对应的价值，Categorical DQN输出的是N×M维的向量，表示的是N个动作在M个价值分布的支撑上的概率。（以上图为例，N=3，M=5。）

总结一下就是：传统价值函数的目标是近似地估计价值的期望，而Distributional RL的目标是近似地估计价值的分布（概率密度函数）。

Distributional RL不仅可用于DQN，亦可应用于Actor-Critic，这也就是D4PG的主要idea了。

参考：

https://zhang-yi-chi.github.io/2018/09/19/DistributionalRL/

Distributional Reinforcement Learning

## Rainbow

论文：

《Rainbow: Combining Improvements in Deep Reinforcement Learning》

Rainbow算是2017年比较火的一篇DRL方面的论文了。它没有提出新方法，而只是整合了6种DQN算法的变种，达到了SOTA的效果。

这6种DQN算法是：

- Double DQN
- Prioritized Experience Replay
- DuelingNet
- NoisyNet
- Distributional DQN(Categorical DQN)
- N-step Learning

参考：

https://mp.weixin.qq.com/s/SZHMyWOXHM8T3zp_aUt-6A

DeepMind提出Rainbow：整合DQN算法中的六种变体

https://github.com/Curt-Park/rainbow-is-all-you-need

手把手教你从DQN到Rainbow

https://zhuanlan.zhihu.com/p/36375292

最前沿：当我们以为Rainbow就是Atari游戏的巅峰时，Ape-X出来把Rainbow秒成了渣！

# A2C & A3C

Actor-Critic一般简称AC算法。针对它的一般用法参见《强化学习（八）》。

AC算法也可用于DRL领域，具体的做法和DQN类似：

- 一个Actor网络，用来近似V值。

- 一个Critic网络，用来近似Q值。

这里有个小技巧：

Actor网络和Critic网络可以共享网络参数，两者仅最后几层使用不同结构和参数。（参见下图A3C的图）

针对AC的改进，衍生出了A2C和A3C。

Advantage Actor-Critic（A2C）：advantage function + AC

Asynchronous Advantage Actor-Critic（A3C）：Async + A2C

advantage function的含义参见《强化学习（八）》，这里谈谈A3C。

## A3C

论文：

《Asynchronous Methods for Deep Reinforcement Learning》

在《强化学习（七）》的Experience Replay一节，我们指出训练数据间的相关性会影响算法收敛到最优解。

除了Experience Replay之外，异步更新也是一种有效的消除训练数据间相关性的方法。

![](/images/img3/A3C.jpg)

上图是A3C的网络结构图。它实际上就是将A2C放在了多个线程中进行同步训练。可以想象成几个人同时在玩一样的游戏，而他们玩游戏的经验都会同步上传到一个中央大脑。然后他们又从中央大脑中获取最新的玩游戏方法。

A3C的原始论文运行在CPU上，这里还有一个GPU版本：

《GA3C: Reinforcement Learning through Asynchronous Advantage Actor-Critic on a GPU》

代码：

https://github.com/NVlabs/GA3C

![](/images/img3/GA3C.png)

这是GA3C的网络结构图。

## AC vs. GAN

论文：

《Connecting Generative Adversarial Networks and Actor-Critic Methods》

| ![](/images/img3/AC_vs_GAN.png) | ![](/images/img3/AC_vs_GAN_2.png) |

左图是GAN，右图是AC。

| Method | GANs | AC |
|:--:|:--:|:--:|
| Freezing learning | yes | yes |
| Label smoothing | yes | no |
| Historical averaging | yes | no |
| Minibatch discrimination | yes | no |
| Batch normalization | yes | yes |
| Target networks | n/a | yes |
| Replay buffers | no | yes |
| Entropy regularization | no | yes |
| Compatibility | no | yes |

## 参考

https://zhuanlan.zhihu.com/p/51645768

强化学习AC、A2C、A3C算法原理与实现！

https://mp.weixin.qq.com/s/c4xoy4CJ_hsVdmGe1n3rTQ

A3C——一种异步强化学习方法

https://mp.weixin.qq.com/s/5kI72vg4JNAZWD93EYAUWA

直观的强化学习算法(A2C)

https://blog.csdn.net/u013236946/article/details/73195035

A3C

https://zhuanlan.zhihu.com/p/70360272

最前沿：深度解读Soft Actor-Critic算法

# DDPG

论文：

《Continuous control with deep reinforcement learning》

DDPG主要从：**PG->DPG->DDPG**发展而来。

Policy Gradient的概念参见《强化学习（七）》，这里不再赘述。

## DPG

Deterministic Policy Gradient是Deepmind的D.Silver等在2014年提出的，即确定性的行为策略，每一步的行为通过函数$$\mu$$直接获得确定的值：

$$a_{t} = \mu(s_{t} | \theta^{\mu})$$

换句话说就是：**PG的action是采样出来的，而DPG是算出来的。**

为何需要确定性的策略？简单来说，PG方法有以下缺点：

- 即使通过PG学习得到了随机策略之后，在每一步行为时，我们还需要对得到的最优策略概率分布进行采样，才能获得action的具体值；而action通常是高维的向量，比如25维、50维，在高维的action空间的频繁采样，无疑是很耗费计算能力的；

- 在PG的学习过程中，每一步计算policy gradient都需要在整个action space进行积分：

$$\triangledown_{\theta} =  \int_{\mathcal{S}} \int_{A} \rho(s) \pi_{\theta}(a|s)Q^{\pi} (s,a)\mathrm{d}a \mathrm{d}s$$

这个积分我们一般通过Monte Carlo 采样来进行估算，需要在高维的action空间进行采样，耗费计算能力。

- 如果采取简单的Greedy策略，即每一步求解$$\arg\max_a Q(s,a)$$也不可行，因为在连续的、高维度的action空间，如果每一步都求全局最优解，太耗费计算性能。

当然，反过来说，DPG也有一个缺点：无法探索环境。因此，在DPG的实际使用中，我们要采用其他策略来弥补这个缺点。

## Noisy

在介绍Rainbow的时候，我们提到了NoisyNet，但没有展开，这里可以说说Noisy在DRL中的作用。

Noisy在DRL中的用法主要有：

- Noise on Action。就是随机乱选。

- Noise on Parameters。这种方法由于网络结构不变，参数也不是全换，因此相当于是有约束的随机选择，或者说是有系统的尝试。

在DPG中，一般采用第二种方法。

需要注意的是，参数的改变意味着策略的改变，因此，Noise在episode中需要保持不变，这样才能检测随机策略的真正效果。否则就是无目的的乱抖了。（类似帕金森症）

产生噪声的方法有：

- Independent Gaussian noise。

- Factorised Gaussian noise。

## DDPG

Deepmind在2016年提出了DDPG（Deep Deterministic Policy Gradient）。从通俗角度看：**DDPG=DPG+A2C+Double DQN**。

![](/images/img3/DDPG.png)

上图是DDPG的网络结构图。仿照Double DQN的做法，DDPG分别为Actor和Critic各创建两个神经网络拷贝,一个叫做online，一个叫做target。即：

- Actor（策略网络） online network（动作估计网络）

- Actor（策略网络） target network（动作现实网络）

- Critic（Q网络） online network（状态估计网络）

- Critic（Q网络） target network（状态现实网络）

简单来说就是，Actor online network和Critic online network组成一对Actor-Critic；而Actor target network和Critic target networ组成另一对Actor-Critic。

当然，DDPG实际的步骤远比示意图复杂的多，可参见下图，这里不再赘述。

![](/images/img3/DDPG.jpg)

DDPG还有一个分布式版本。

论文：

《Distributed Distributional Deterministic Policy Gradients》
