---
layout: post
title:  Fedora, CentOS, diff&patch, bash, awk&sed&grep
category: linux 
---

# Fedora

Fedora作为主要的Linux发行版之一，我虽然用的不多，但实际上这却是我最早接触的Linux发行版。后来换用Ubuntu，很大的原因是因为：这是Google为Android选择的开发平台。

最近因为工作需要重新捡起了Fedora。但公司所用的版本太过古老，还是2009年的Fedora 12。所以想了一下，开始试用最新的Fedora 22(2015.2)。这里是使用过程中的一些操作笔记。

## 安装

https://getfedora.org/

这是官方的下载地址。这里我用的是Workstation版本。

Fedora 22的默认桌面是GNOME 3.16，这一版的外观借鉴了Mac OS X的一些设计，让人眼前一亮。

## 安装软件

Fedora 22使用dnf替代yum。因此安装基本gcc开发环境，可用如下命令：

`dnf install gcc kernel-devel patch bison flex subversion`

如果下载速度较慢的话，可以在/etc/dnf/dnf.conf最后添加：

`fastestmirror=true`

保存后，执行

{% highlight bash %}
$ sudo dnf clean all
$ sudo dnf makecache
{% endhighlight %}

此外，和Ubuntu一样，Fedora也有自己的网站可以查询软件包信息：

https://admin.fedoraproject.org/pkgdb/

## 共享文件夹

我用的是VirtualBox的虚拟环境，因此除了在VirtualBox中，设置共享文件夹之外，还需对Fedora进行如下操作：

1.添加用户到vboxsf中。

`usermod -a -G vboxsf <your user name>`

2.重启。（这一步必不可少，否则上面的配置不会生效。）

这样就可以在Fedora中浏览共享文件夹了。

# CentOS

## 关于repo设置

最近在数台PC上部署软件，系统都是CentOS 6。结果发现其中有一台机器无法使用yum安装软件。

解决办法：

1.进入/etc/yum.repos.d中删除CentOS6-Base.repo之外的所有文件。

2.`yum clean all`

第1步很重要，从事后情况来看，故障是由于某些之前的repo现在已经无法连接所致导致的。

## start-stop-daemon

start-stop-daemon是Ubuntu中用的比较多的工具，但是CentOS中并没有。由于start-stop-daemon在ubuntu的dpkg包中，和apt关系比较近，因此直接下载源码，也不是个好办法。

https://packagecloud.io/willgarcia/start-stop-daemon/install

上面的网页提供了一种办法。但是由于网络不好，中间步骤的文件有时需要手动下载才行。

## 关于epel

1.安装epel源

`yum install epel-release`

2.修改/etc/yum.repos.d/epel.repo

将mirrorlist中的https修改为http。否则，会报如下错误：

`Error: Cannot retrieve metalink for repository: epel`

## DNF

`yum install dnf`

这个似乎需要Cent OS 7以上，Cent OS 6反正是不行的。

## 关于VNC

1.安装

`yum install tightvnc-server`

这里虽然包名叫做tightvnc-server，但实际上用的是tigervnc-server，因此以后者为包名来安装也是可以的。

2.初次启动，设置密码

`vncpasswd`

3.配置分辨率、端口

修改/etc/sysconfig/vncservers：

{% highlight bash %}
## Single User ##
VNCSERVERS="1:<user name>"
VNCSERVERARGS[1]="-geometry 1280x1024"
{% endhighlight %}

默认端口一般是5900~5904。这里的数组下标表明它使用的端口是5901。

4.启动服务

`/etc/init.d/vncserver start`

参考：

http://www.tecmint.com/install-tightvnc-remote-desktop/

Install TightVNC Server in RHEL/CentOS and Fedora to Access Remote Desktops

# diff&patch

diff/patch这对工具在数学上来说，diff是对2个集合求差，patch是求和。

{% highlight bash %}
diff -uNr A B > C #生成A和B的diff文件C,-uNr为最常用的选项
patch A C #给A打上diff文件得到B
patch -R B C #B还原为A
{% endhighlight %}

## 给目录应用patch。

`patch -p1 <1.patch`

这种情况适合1.patch中包含对多个文件的修改时。

## 批量应用patch

有的时候，patch不是一个patch文件，而是一个目录中的若干个patch文件。这时可用如下办法：

`find . -name "*.patch">1.txt`

`sort 1.txt | xargs cat >2.patch`

`patch -p1 <2.patch`

# bash

手册：

https://www.gnu.org/software/bash/manual/bash.pdf

## 空格和TAB的细节

在大多数编程语言中，空格和TAB都不是有意义的字符，有没有或者有多少都无所谓。但Linux Shell不是这样的，尽管它看起来并没有如python那样的对缩进的强制语言规定。

以下是它在使用空格和TAB时的一些细节：

1.makefile文件中，规则定义部分的shell脚本命令需要使用TAB开头，使用空格会出错。

2.if命令的格式：

{% highlight bash %}
if [ "$yn" == "Y" ] || [ "$yn" == "y" ]; then
	echo "OK, continue"
fi
{% endhighlight %}

注意一下上面脚本中的表达式[]之间的部分。其中所使用的空格不可省略，否则会出错。bash在处理[]表达式的时候，实际上调用了`/usr/bin/[`命令。如果把`[`当作特殊名称的普通命令的话，就会发现这里的空格用法实际上并不奇怪。

## 查看当前使用的shell

实时查看：

`ps |  grep $$  |  awk '{print $4}'`

非实时查看：

`echo $SHELL`

## return和exit的区别

return用于函数的返回，它只能用在函数中。

exit用于整个shell脚本的退出。

## 预定义变量

`$?`: 上条命令的返回值

`$$`: 当前shell的PID。

## shell如何把多行内容输出到一个文件

一行一行echo重定向显然是个笨办法，这里可以使用Here Documents语法。

例子：

{% highlight bash %}
(
cat<<EOF
line 1
line 2
EOF
)>a.txt
{% endhighlight %}

参考：

https://linux.die.net/abs-guide/here-docs.html

Here Documents

## 目录切换

`cd -`：回到上一次所在的路径的命令。当需要在两个相隔较远的路径下，相互切换的时候，可以使用该命令。

`pushd <dir1>`：将dir1添加到一个栈顶。栈中每个目录都有一个序号（栈顶为0）。使用`pushd +n`将第n个目录切换到栈顶。（栈顶即为当前目录，所以无论添加还是切换栈顶，都可以切换当前目录）

`pushd -n`的含义刚好相反，它从栈底向栈顶方向计数。

`popd`和`popd +n`用于从栈中删除目录。

`dirs -v`用于查看栈中元素。

参考：

https://www.jianshu.com/p/53cccae3c443

Linux中的pushd和popd

## 参考

https://blog.csdn.net/iot_flower/article/details/69055590

shell脚本第一行：#!/bin/bash的含义

https://mp.weixin.qq.com/s/ZaIX8jv9LMWmrHQb4ew-dQ

写好shell脚本的13个技巧

http://www.ywnds.com/?p=12325

Shell版俄罗斯方块

https://mp.weixin.qq.com/s/SBVEo53irSZfI40sBFZXWQ

shift：解决shell编程中的入参问题

https://mp.weixin.qq.com/s/T_XwLS6CIrkXbgXJVIo2Jw

一文了解十大Linux命令行工具！

https://mp.weixin.qq.com/s/euTQJy0HFVQotAY-KI2OzA

10个实战及面试常用Shell脚本编写

https://github.com/jaywcjlove/linux-command

Linux命令大全搜索工具

https://mp.weixin.qq.com/s/xuC_pH1X_GmyK0vVWrBzWQ

10个实战与面试常用Shell脚本编写

# awk&sed&grep

这三个工具是文本处理中用的比较多的工具，各有各的特色，且都支持正则表达式。

一般来说，行处理优先考虑使用sed和grep，列处理优先考虑使用awk。通常情况下，组合使用多个命令，其命令编写的难度小于只使用一个命令。比如sed和grep也可以进行列处理，但语法难度远超awk，反之亦然。

这里不打算列出各个命令的选项，而仅列出使用它们的一些示例：

这里假设我们有一文件名为ab。

## awk

{% highlight bash %}
awk '{print $1}' ab #显示第一列
{% endhighlight %}

## sed

{% highlight bash %}
sed '1d' ab #删除第一行 
sed '$d' ab #删除最后一行
sed '1,2d' ab #删除第一行到第二行
sed '2,$d' ab #删除第二行到最后一行

sed -n '1p' ab    #显示第一行 
sed -n '$p' ab    #显示最后一行
sed -n '1,2p' ab  #显示第一行到第二行
sed -n '2,$p' ab  #显示第二行到最后一行

sed -n '/ruby/p' ab #查询包括关键字ruby所在所有行
sed -n '/\$/p' ab #查询包括关键字$所在所有行，使用反斜线\屏蔽特殊含义

sed -n '/ruby/p' ab | sed 's/ruby/bird/g'    #替换ruby为bird
sed -n '/ruby/p' ab | sed 's/ruby//g'        #删除ruby

sed -e 's/.$//' mydos.txt > myunix.txt #dos->unix
{% endhighlight %}

## grep

{% highlight bash %}
grep 'ruby' ab #查询包括关键字ruby所在所有行
grep -nri 'ruby' #n 显示行号，r 子目录搜索，i 忽略大小写
{% endhighlight %}

## 综合

{% highlight bash %}
ip addr show br-lan | grep 'inet ' | awk  '{print $2}' | sed 's/\/.*//g'
{% endhighlight %}

参考：

https://mp.weixin.qq.com/s/o1vuL3RrWz9tyUPguZeSWA

简单快捷的数据处理，数据科学需要注意的命令行
