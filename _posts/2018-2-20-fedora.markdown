---
layout: post
title:  Fedora, CentOS, bash, VS
category: linux 
---

# Fedora

Fedora作为主要的Linux发行版之一，我虽然用的不多，但实际上这却是我最早接触的Linux发行版。后来换用Ubuntu，很大的原因是因为：这是Google为Android选择的开发平台。

最近因为工作需要重新捡起了Fedora。但公司所用的版本太过古老，还是2009年的Fedora 12。所以想了一下，开始试用最新的Fedora 22(2015.2)。这里是使用过程中的一些操作笔记。

## 安装

https://getfedora.org/

这是官方的下载地址。这里我用的是Workstation版本。

Fedora 22的默认桌面是GNOME 3.16，这一版的外观借鉴了Mac OS X的一些设计，让人眼前一亮。

## 安装软件

Fedora 22使用dnf替代yum。因此安装基本gcc开发环境，可用如下命令：

`dnf install gcc kernel-devel patch bison flex subversion`

如果下载速度较慢的话，可以在/etc/dnf/dnf.conf最后添加：

`fastestmirror=true`

保存后，执行

```bash
$ sudo dnf clean all
$ sudo dnf makecache
```

此外，和Ubuntu一样，Fedora也有自己的网站可以查询软件包信息：

https://admin.fedoraproject.org/pkgdb/

## 共享文件夹

我用的是VirtualBox的虚拟环境，因此除了在VirtualBox中，设置共享文件夹之外，还需对Fedora进行如下操作：

1.添加用户到vboxsf中。

`usermod -a -G vboxsf <your user name>`

2.重启。（这一步必不可少，否则上面的配置不会生效。）

这样就可以在Fedora中浏览共享文件夹了。

# CentOS

## 关于repo设置

最近在数台PC上部署软件，系统都是CentOS 6。结果发现其中有一台机器无法使用yum安装软件。

解决办法：

1.进入/etc/yum.repos.d中删除CentOS6-Base.repo之外的所有文件。

2.`yum clean all`

第1步很重要，从事后情况来看，故障是由于某些之前的repo现在已经无法连接所致导致的。

## start-stop-daemon

start-stop-daemon是Ubuntu中用的比较多的工具，但是CentOS中并没有。由于start-stop-daemon在ubuntu的dpkg包中，和apt关系比较近，因此直接下载源码，也不是个好办法。

https://packagecloud.io/willgarcia/start-stop-daemon/install

上面的网页提供了一种办法。但是由于网络不好，中间步骤的文件有时需要手动下载才行。

## 关于epel

1.安装epel源

`yum install epel-release`

2.修改/etc/yum.repos.d/epel.repo

将mirrorlist中的https修改为http。否则，会报如下错误：

`Error: Cannot retrieve metalink for repository: epel`

## DNF

`yum install dnf`

这个似乎需要Cent OS 7以上，Cent OS 6反正是不行的。

## 关于VNC

1.安装

`yum install tightvnc-server`

这里虽然包名叫做tightvnc-server，但实际上用的是tigervnc-server，因此以后者为包名来安装也是可以的。

2.初次启动，设置密码

`vncpasswd`

3.配置分辨率、端口

修改/etc/sysconfig/vncservers：

```bash
## Single User ##
VNCSERVERS="1:<user name>"
VNCSERVERARGS[1]="-geometry 1280x1024"
```

默认端口一般是5900~5904。这里的数组下标表明它使用的端口是5901。

4.启动服务

`/etc/init.d/vncserver start`

参考：

http://www.tecmint.com/install-tightvnc-remote-desktop/

Install TightVNC Server in RHEL/CentOS and Fedora to Access Remote Desktops

# bash

手册：

https://www.gnu.org/software/bash/manual/bash.pdf

## 历史

![](/images/img3/sh.gif)

参考：

https://www.ibm.com/developerworks/cn/linux/l-linux-shells/

评估Linux中的shell

### Thompson shell

Ken Thompson于1971年开发了第一个用于UNIX的shell，名为V6 shell。该shell为重定向（< > 和 >>）和管道（| 或 ^）引入了一种紧凑的语法，并支持参数扩展的模式匹配，比如`*.txt`。但它缺少编写脚本的能力。

### bsh

Bourne shell，由AT&T公司的Steve Bourne开发（1977）。它引入了控制流、循环和变量，从而具备了脚本的能力。

>Stephen Richard "Steve" Bourne，1944年生，英国计算机学家。King's College London本科+Cambridge博士。先后工作于Bell Labs、Silicon Graphics, DEC, Sun和Cisco。ACM主席、皇家天文学会会员。除了bsh之外，他还发明了adb debugger for UNIX。

### csh

csh是Bill Joy设计的（1978），它的语法类似C语言，故名。主要改进是添加了历史记录。

>William (Bill) Nelson Joy，1954年生，美国计算机科学家。University of Michigan本科+UCB硕士（1979）。他的知名作品包括BSD、vi、csh、chroot、TCP/IP driver、Java、SPARC、Solaris、NFS。Sun创始人兼首席科学家。

### tcsh

tcsh由Ken Greer在CMU开发（1981），它在csh的基础上，提供了文件名补全的功能。后来Mike Ellis又加入了命令补全的功能（1983）。

### ksh

Korn shell (ksh) 由David Korn设计的（1983），它在bsh的基础上添加了一些csh、tcsh引入的功能。

### bash

Bourne-Again Shell（或 Bash）是一个开源 GNU 项目，旨在取代 Bourne shell。它由Brian Fox开发（1989），吸取了ksh、csh等的功能，现已成为世上最流行的shell。在通常语境中，如果没有特指的话，shell一般就是指的bash。

### zsh

zsh由Paul Falstad开发（1990）。它的功能极其强大，但也由于配置过于复杂，所以初期无人问津。直到有一天，国外有个穷极无聊的程序员开发出了一个能够让你快速上手的zsh项目，叫做“oh my zsh”：

https://github.com/ohmyzsh/ohmyzsh

参考：

https://zhuanlan.zhihu.com/p/19556676

终极Shell——ZSH

### Fish Shell

吸取了zsh的经验，Fish Shell主打的是开箱即用。

官网：

http://fishshell.com/

参考：

http://www.ruanyifeng.com/blog/2017/05/fish_shell.html

Fish shell入门教程

### BusyBox

BusyBox由Bruce Perens设计（1995），号称是“The Swiss Army knife of Embedded Linux”。

Thompson shell以及之后的shell，其设计思路是一个shell主程序+若干命令程序。这里的命令甚至包括shell中的一些语法成分，比如test和`[`。是的，你没看错，`[`也是一个应用程序。

而BusyBox为了发布和部署的方便，将一个shell和所有命令合并到一个可执行文件中。

官网：

https://busybox.net/

## 空格和TAB的细节

在大多数编程语言中，空格和TAB都不是有意义的字符，有没有或者有多少都无所谓。但Linux Shell不是这样的，尽管它看起来并没有如python那样的对缩进的强制语言规定。

以下是它在使用空格和TAB时的一些细节：

1.makefile文件中，规则定义部分的shell脚本命令需要使用TAB开头，使用空格会出错。

2.if命令的格式：

```bash
if [ "$yn" == "Y" ] || [ "$yn" == "y" ]; then
	echo "OK, continue"
fi
```

注意一下上面脚本中的表达式[]之间的部分。其中所使用的空格不可省略，否则会出错。bash在处理[]表达式的时候，实际上调用了`/usr/bin/[`命令。如果把`[`当作特殊名称的普通命令的话，就会发现这里的空格用法实际上并不奇怪。

## 查看当前使用的shell

实时查看：

`ps |  grep $$  |  awk '{print $4}'`

非实时查看：

`echo $SHELL`

## return和exit的区别

return用于函数的返回，它只能用在函数中。

exit用于整个shell脚本的退出。

## 预定义变量

`$?`: 上条命令的返回值

`$$`: 当前shell的PID。

## shell如何把多行内容输出到一个文件

一行一行echo重定向显然是个笨办法，这里可以使用Here Documents语法。

例子：

```bash
(
cat<<EOF
line 1
line 2
EOF
)>a.txt
```

参考：

https://linux.die.net/abs-guide/here-docs.html

Here Documents

## 目录切换

`cd -`：回到上一次所在的路径的命令。当需要在两个相隔较远的路径下，相互切换的时候，可以使用该命令。

`pushd <dir1>`：将dir1添加到一个栈顶。栈中每个目录都有一个序号（栈顶为0）。使用`pushd +n`将第n个目录切换到栈顶。（栈顶即为当前目录，所以无论添加还是切换栈顶，都可以切换当前目录）

`pushd -n`的含义刚好相反，它从栈底向栈顶方向计数。

`popd`和`popd +n`用于从栈中删除目录。

`dirs -v`用于查看栈中元素。

参考：

https://www.jianshu.com/p/53cccae3c443

Linux中的pushd和popd

## 批量修改后缀名

`rename 's/\.pgf/\.tex/' *`

## 快捷方式

复制：Ctrl+Shift+c

粘贴：Ctrl+Shift+v

历史命令搜索：Ctrl+r

## 彩色字符

https://mp.weixin.qq.com/s/DQzlfQXt4dV9PYwoVdomaw

如何开发多彩动感的终端UI应用

## 参考

https://github.com/dylanaraps/pure-bash-bible

本项目主要汇总了bash脚本经常会使用到的一些代码片段，并按照字符串、数组、正则表达式、文件处理、变量等常用功能进行分类，并给出了具体的Demo，非常适合初学者以及希望提升工作效率的朋友使用。

https://blog.csdn.net/iot_flower/article/details/69055590

shell脚本第一行：#!/bin/bash的含义

https://mp.weixin.qq.com/s/ZaIX8jv9LMWmrHQb4ew-dQ

写好shell脚本的13个技巧

http://www.ywnds.com/?p=12325

Shell版俄罗斯方块

https://mp.weixin.qq.com/s/SBVEo53irSZfI40sBFZXWQ

shift：解决shell编程中的入参问题

https://mp.weixin.qq.com/s/T_XwLS6CIrkXbgXJVIo2Jw

一文了解十大Linux命令行工具！

https://mp.weixin.qq.com/s/euTQJy0HFVQotAY-KI2OzA

10个实战及面试常用Shell脚本编写

https://github.com/jaywcjlove/linux-command

Linux命令大全搜索工具

https://mp.weixin.qq.com/s/xuC_pH1X_GmyK0vVWrBzWQ

10个实战与面试常用Shell脚本编写

https://zhuanlan.zhihu.com/p/84774691

bash下可控任务数的并发执行脚本

# VS

## 分栏显示

1.Window -> New Window

2.Window -> New Vertical Tab Group

## Visual Studio Tab转换为空格的设置

打开“Tools --> Options --> Text Editor”，如果是编写C/C++程序，就打开“C/C++-->Tabs”，在这里，选中“Insert spaces”即可。

## 离线安装

VS2015以后，MS不再提供VS的离线安装包，因为安装文件实在是太大了（10GB+），取而代之的是offline模式。

1.首先下载在线安装器vs_community.exe，打开命令行：

`vs_community.exe --layout D:\vs2017\offline --lang zh-CN`

2.安装证书。证书在offline\certificates下。

3.运行运行offline\vs_community.exe。
