---
layout: post
title:  Python（二）
category: language 
---

# Python

## with（续）

上述代码执行结果为：

{% highlight text %}
<h1>
hello
world
</h1>
{% endhighlight %}

with语句首先执行yield之前的语句，因此打印出<h1>；yield调用会执行with语句内部的所有语句，因此打印出hello和world；最后执行yield之后的语句，打印出</h1>。

参考：

https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001478651770626de401ff1c0d94f379774cabd842222ff000

contextlib

## `__init__.py`的作用

`__init__.py`文件的作用是将文件夹变为一个Python模块,Python中的每个模块的包中，都有`__init__.py`文件。

示例：

{% highlight python %}
# package
# __init__.py
import re
import urllib
import sys
import os

# a.py
import package 
print(package.re, package.urllib, package.sys, package.os)
{% endhighlight %}

`__init__.py`中还有一个重要的变量，`__all__`,它用来将模块全部导入。

{% highlight python %}
# __init__.py
__all__ = ['os', 'sys', 're', 'urllib']

# a.py
from package import *
{% endhighlight %}

参见：

http://www.cnblogs.com/Lands-ljk/p/5880483.html

Python `__init__.py`作用详解

## Slice

`L[3:10:2]`

第一个数表示切片开始的位置，第二个数表示切片到哪里结束，第三个数表示切片间隔数。

可以用负数做切片。负数用在从序列尾开始计算的位置。如果切片间隔数为负数，则表示倒序切片。

## 字符串格式化

目前python的字符串格式化，有两种style：Old Style和New Style。两者的区别详见：

https://pyformat.info/

这里仅给出几个简单示例：

Old Style：`'%s %s' % ('one', 'two')`

New Style：`'{} {}'.format('one', 'two')`

## 特殊语法：filter、map、reduce、lambda

**filter(function, sequence)**：对sequence中的item依次执行function(item)，将执行结果为True的item组成一个List/String/Tuple（取决于sequence的类型）返回。

{% highlight python %}
>>> def f(x): return x % 2 != 0 and x % 3 != 0 
>>> filter(f, range(2, 25)) 
[5, 7, 11, 13, 17, 19, 23]
{% endhighlight %}

**map(function, sequence) **：对sequence中的item依次执行function(item)，将执行结果组成一个List返回。

{% highlight python %}
>>> def cube(x): return x*x*x 
>>> map(cube, range(1, 11)) 
[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]
{% endhighlight %}

**reduce(function, sequence, starting_value)**：对sequence中的item顺序迭代调用function，如果有starting_value，还可以作为初始值调用，例如可以用来对List求和。

{% highlight python %}
>>> def add(x,y): return x + y 
>>> reduce(add, range(1, 11)) 
55 (PS: 1+2+3+4+5+6+7+8+9+10)
{% endhighlight %}

**lambda**：这是Python支持一种有趣的语法，它允许你快速定义单行的最小函数，类似与C语言中的宏，这些叫做lambda的函数，是从LISP借用来的，可以用在任何需要函数的地方： 

{% highlight python %}
>>> g = lambda x: x * 2 
>>> g(3)
6
>>> (lambda x: x * 2)(3) 
6
{% endhighlight %}

参考：

http://www.cnblogs.com/longdouhzt/archive/2012/05/19/2508844.html

Python特殊语法：filter、map、reduce、lambda

https://www.zhihu.com/question/20125256

Lambda表达式有何用处？如何使用？

## defaultdict()和namedtuple()

defaultdict()和namedtuple()是collections模块里面2个很实用的扩展类型。

`from collections import defaultdict, namedtuple`

defaultdict()：返回一个和dictionary类似的对象，和dict不同主要体现在2个方面：

1.可以指定key对应的value的类型。

2.不必为默认值担心，换句话说就是不必担心有key没有value这回事。总会有默认的value。

`d = defaultdict(list)`

该语句创建一个defaultdict类型（你可以想象为dict类型），value的类型是list。

namedtuple()：namedtuple创建一个和tuple类似的对象，而且对象拥有可以访问的属性。这对象更像带有数据属性的类，不过数据属性是只读的。

{% highlight python %}
>>> from collections import namedtuple
>>> TPoint = namedtuple('TPoint', ['x', 'y'])
>>> p = TPoint(x=10, y=10)
>>> p
TPoint(x=10, y=10)
>>> p.x
10
>>> p.y
10
{% endhighlight %}

PS：非常类似C语言的结构体，不过数据属性是只读的。

参考：

http://www.cnblogs.com/herbert/p/3468294.html

再谈collections模块defaultdict()和namedtuple()

## @的用法

@在python中是装饰器的意思，它的用法比较复杂。参见：

https://www.zhihu.com/question/26930016

如何理解Python装饰器？

https://mp.weixin.qq.com/s/1QjJqFfJNNych9b6ae5VUg

深入理解Python装饰器

https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143186781871161bc8d6497004764b398401a401d4cce000

使用@property

## @classmethod和@staticmethod

{% highlight python %}
class A(object):
    def foo(self, x):
        print("executing foo(%s,%s)" % (self, x))
        print('self:', self)
    @classmethod
    def class_foo(cls, x):
        print("executing class_foo(%s,%s)" % (cls, x))
        print('cls:', cls)
    @staticmethod
    def static_foo(x):
        print("executing static_foo(%s)" % x)
{% endhighlight %}

@classmethod类似于C++中的static，无须实例化就可以调用。@staticmethod则是普通成员函数的简写。python一般用cls表示类，而用self表示类的实例。当然，这只是编程规范的约束，而非编译器约束，使用其他名字也是可以的。

参考：

https://www.cnblogs.com/elie/p/5876210.html

python中@classmethod @staticmethod区别

## Python 2 to Python 3

https://www.linuxzen.com/qian-yi-dao-python-3.html

迁移到Python 3

https://www.zhihu.com/question/19698598

Python 2和Python 3有哪些主要区别？

https://mp.weixin.qq.com/s/Q3cqLuOZDSMOdAjVrCDrtQ

在Python 2.7即将停止支持时，我们为你准备了一份3.x迁移指南

文件print：

{% highlight python %}
Python2: print >>sys.stderr, "fatal error"
Python3: print("fatal error", file=sys.stderr)
{% endhighlight %}

dict切片：

{% highlight python %}
Python2: 
self._layers = net.blobs.keys()
self._layers = self._layers[1:] # TypeError: 'dict_keys' object is not subscriptable

Python3:
self._layers = list(net.blobs.keys())
self._layers = self._layers[1:]
{% endhighlight %}

检查某对象是否为字符串或Unicode对象：

{% highlight python %}
Python2: isinstance(anobj, basestring)
Python3: isinstance(anobj, str)
{% endhighlight %}

## six

six是一个专门用来兼容 Python 2 和 Python 3 的库。它解决了诸如 urllib 的部分方法不兼容， str 和 bytes 类型不兼容等“知名”问题。

代码：

https://bitbucket.org/gutworth/six

文档：

https://bitbucket.org/gutworth/six

## range & xrange

1.range会直接生成一个list对象。

2.xrange则不会直接生成一个list，而是每次调用返回其中的一个值。

所以xrange做循环的性能比range好，尤其是返回很大的时候，尽量用xrange吧，除非你是要返回一个列表。

>Python 3只有range，效果和Python 2的xrange相仿，且支持slicing。

参考：

http://www.cnblogs.com/zhangjing0502/archive/2012/05/16/2503880.html

Python的range和xrange

## enumerate

普通Iterator：

{% highlight python %}
for item in enumerate(list):
    print(item)
{% endhighlight %}

带index的Iterator：

{% highlight python %}
for index, item in enumerate(list):
    print(index, item)
{% endhighlight %}

## 时间、日期数据的格式处理

时间数据上的格式处理，主要指strftime和strptime函数。其中前者可将时间数据转换成指定格式的字符串，而后者则将字符串转换成时间数据。

{% highlight python %}
import time
a = "2013-10-10 23:40:00"
timeArray = time.strptime(a, "%Y-%m-%d %H:%M:%S")
otherStyleTime = time.strftime("%Y/%m/%d %H:%M:%S", timeArray)
{% endhighlight %}

日期方面也是类似的做法。

## 星期处理

`datetime(2002, 12, 4).isoweekday() == 3`

`datetime(2001, 12, 31).isocalendar() == (2002, 1, 1)#(year, week number, weekday)`

从上面的例子还可以看出，isocalendar可以完美的处理跨年问题。

## 处理eml文件

代码示例：

https://github.com/antkillerfarm/antkillerfarm_crazy/blob/master/python/misc/hello_eml.py

这个示例主要使用email包来解析eml文件。

同时为了处理其中的html的内容，还用到了Beautiful Soup包。其网址为：

https://www.crummy.com/software/BeautifulSoup/

参见：

https://mp.weixin.qq.com/s/p86yvl3uAm3FXw4V9NlNoA

一文带你上手Python网页抓取神器BeautifulSoup库

https://mp.weixin.qq.com/s/3o_T7Tyrstur6jkj0gexMA

BeautifulSoup的使用

## pickle

pickle提供了一个简单的持久化功能。可以将对象以文件（后缀名一般为*.pkl）的形式存放在磁盘上。

参考：

https://blog.csdn.net/sinat_29552923/article/details/70833455

Python pickle模块学习

## dill

dill是pickle的威力加强版。

## Sqlite

Ubuntu下的安装方法是：

`sudo apt-get install sqlite`

Python自带了pysqlite包，用于调用sqlite。

pysqlite的helloworld程序可参见：

https://github.com/antkillerfarm/antkillerfarm_crazy/blob/master/python/pysqlite-helloworld.py

可以使用sqlite_bro软件包，查看sqlite数据库。安装方法：

`sudo pip install sqlite_bro`

参考：

https://mp.weixin.qq.com/s/HcmOmwWQFBIOZs8p3nr7CQ

让Python更加充分的使用Sqlite3

## python调用GTK函数的一般规则

众所周知，GTK库是用C语言编写的，其相关的文档提供的也是C函数的接口，python接口的文档相对较少，获得也不太容易。因此有必要掌握一下这方面基本的命名规则。（这里只讲方法，对深层次的调用原理不做探究。）

1）类初始化函数

C:`GtkWidget * gtk_button_new (void);`

python:`button = Gtk.Button()`

这里除了把C函数式的写法，替换成python的类的写法之外，并无其他差异。

2）普通类成员函数

C:`void gtk_container_add (GtkContainer *container, GtkWidget *widget);`

python:`button.add(image)`

可以看出，C函数的第一个表示self类指针的参数被省略掉了。

3）回调函数

这里以按钮的click事件回调为例：

C:`void user_function (GtkButton *button, gpointer user_data)`

python:

`button.connect("clicked", self.playToggled)`

`def playToggled(self, w):`

这里的情况要复杂的多。首先在事件回调注册的时候，由于我们并没有给user_data赋值，因此照理说playToggled函数，只有button这一个参数。但实际传递给playToggled函数的有两个参数，self是一个用于占位的参数，w对应button，没有东西对应user_data。
