---
layout: post
title:  Jpeglib使用指南, 各种压缩包的压缩和解压方法
category: technology 
---

* toc
{:toc}

# Jpeglib使用指南

## 1.问题的由来

Jpeg图片在图像处理领域已经用的相当广泛了。但在编程领域，尤其是嵌入式编程领域使用的还不是很广。主要的原因是Jpeg的数据结构和算法远较bmp复杂，非图像算法的专业人士，通常是无法理解这些的。（我有个同事，他曾经花了半个月，研究过Jpeg的原理，还为此在team内部举办了一个讲座，讲了足足有一个小时，令众人对之仰慕万分，但他却说，仅得皮毛，未得要害。从此我对Jpeg的原理敬而远之。）

近来，因工作需要，要在wince平台下，为程序添加Jpeg支持。一般来说，此类问题最容易的解决方案是使用OS提供的相关库，毕竟现在不支持Jpeg的OS几乎没有。但在wince下这里出了个问题。目前绝大多数的wince设备是wince 4.X或5.X的，不过碰巧在图像处理这块，5.X和4.X的方法是不一样的。4.X提供的方法在IMGDECMP.DLL中，而5.X提供的方法在Imaging.DLL中，而且不止是链接库不同，库的接口也是完全两样的。因此，如果软件采用OS提供的相关库的话，在这里就要准备两套接口，非常的麻烦。况且，我们的软件不仅要在wince下部署，将来还打算推广到其他的平台，因此这种方案显然是不太好的。

这时我想到了JpegLib。JpegLib是Independent JPEG Group——一个非Jpeg官方组织推出的Jpeg库。这是个开源免费的库，支持多种平台和编译器，你可以在www.ijg.org中获得它的最新版本。在PC上它的效率比不了intel的Jpeg库，因为后者进行了汇编优化。但在wince上应该和系统库的效率相当。事实上如果查看系统的版权信息的话，Microsoft在wince中也使用了这个库。RISC的芯片也基本没有汇编优化的问题。

网上的中文资料以以下两篇文章最为详尽。

http://mobile.winfans.net/ccs/forums/516/PrintPost.aspx （文献A）

http://blog.csdn.net/zhao3728/archive/2007/08/22/1754877.aspx （文献B）

所以我的这篇文章主要作为补遗之用。

## 2.编译JpegLib库

文献A和B都是使用现成的JpegLib库，这样的库只在特定的平台下才能用，完全体现不出JpegLib的优势。所以掌握编译JpegLib库的方法，是很有必要的。

JpegLib库源代码的组成

1）makefile。JpegLib库中有很多文件名为makefile的文件。它的后缀名表示它所用于的平台或用途。随便打开一个，就可以看到JpegLib库源代码的组成。

2）makefile中LIBSOURCES变量所代表的文件是JpegLib的核心算法部分。

3）makefile中SYSDEPSOURCES变量所代表的文件是JpegLib中负责内存分配的部分。这部分是系统相关的，所以根据需要选用一个就行了。

4）makefile中APPSOURCES变量所代表的文件是JpegLib中提供诸如命令行压缩Jpeg之类的功能的部分，实际上就是一些小工具。不过在编译JpegLib库时，不要将之添加到工程中。

5）makefile中INCLUDES变量所代表的文件是源代码中用到的头文件。不是所有的头文件都被核心算法部分使用到，因此有些头文件在编译JpegLib库时，是不必要的，当然将之添加到工程中也不会出错。

6）makefile中DOCS变量所代表的文件是一些文档、测试用例之类的东西。其中最有用的是example.c，文献A和B的示例最重要的部分，就来自这里。

7）jconfig。JpegLib库中还有很多和makefile类似的jconfig，这是针对不同平台的类型声明。在使用时，应根据需要，将适当的jconfig文件的后缀名改为h。

以上这些内容更详细的说明见JpegLib库的文档，以及

http://blog.csdn.net/axlrosek/archive/2007/03/29/1545496.aspx

ijg jpeg函数库：文件列表

VC:不同版本的VC、EVC都差不多，参照文献A的步骤修改相关文件，然后新建一个空工程，然后打开JpegLib中的makefile.vc文件,将2）和3）、5）、7）中的文件添加到工程中。将生成文件的类型定为lib就行了。此外，还需要针对调用的情况选择适当的运行时库，否则可能会出LNK2005错误。

## 3.使用JpegLib库

JpegLib库的使用参照文献A和B，以及example.c就可以了。但文献A的示例是有问题的。

`bmpBuffer[start+i]=pBuffer[0];`

应改为

`bmpBuffer[start+i]=pBuffer[0][i];`

jpeg_read_scanlines(&cinfo, pBuffer, 1)执行之后，扫描线的内容被放到pBuffer[0]，而不是pBuffer中，用memcpy将扫描线的内容转移到其他的缓冲区就行了，无需用循环语句。

## 4.流输入的Jpeg的处理

上面的示例处理的都是从文件读入的Jpeg，在现实中，还存在流输入的Jpeg。在很多PC游戏中，程序的数据都被集中起来放入一个大文件之中，最典型的当属暴雪的mpq文件。当这些文件被读入内存时，就形成了字节流形式的文件。将之存为临时文件，然后再用之前的方法，显然是笨方法。这时可以采用jpeg_arr_src函数来替换jpeg_stdio_src函数。

这一点还可以参考以下文档，不过该文针对的好像是旧版本，使用时要注意。

http://blog.china.com/u/060803/5544/200608/15355.html

# stb_image

stb_image是一个C语言的图像解码库，支持JPG, PNG, TGA, BMP, PSD, GIF, HDR, PIC等格式。

代码：

https://github.com/nothings/stb

参考：

https://www.jianshu.com/p/5e4b99586282

简单易用的图像解码库介绍——stb_image

# 各种压缩包的压缩和解压方法

## 安装

安装 7zip：

`sudo apt-get install p7zip`

安装 rar:

`sudo apt-get install rar unrar`

rar比较奇怪，压缩和解压是使用不同的包，这点和7zip是不一样的。

常按Win键，会弹出Unity所用的键盘快捷键。

## .tar.gz和.tgz

解压：`tar zxvf FileName.tar.gz`

压缩：`tar zcvf FileName.tar.gz DirName`

PS:tar命令对于长选项和短选项的顺序有要求，例如，不覆盖已有文件的选项`--skip-old-files`:

`tar --skip-old-files -zxvf FileName.tar.gz  #正确`

`tar -zxvf --skip-old-files FileName.tar.gz  #错误`

## .tar

解包：`tar xvf FileName.tar`

打包：`tar cvf FileName.tar DirName`

（注：tar是打包，不是压缩！）

## .gz

解压1：`gunzip FileName.gz`

解压2：`gzip -d FileName.gz`

压缩：`gzip FileName`

## .bz2

解压1：`bzip2 -d FileName.bz2`

解压2：`bunzip2 FileName.bz2`

压缩： `bzip2 -z FileName`

## .tar.bz2

解压：`tar jxvf FileName.tar.bz2`

压缩：`tar jcvf FileName.tar.bz2 DirName`

## .bz

解压1：`bzip2 -d FileName.bz`

解压2：`bunzip2 FileName.bz`

## .tar.bz

解压：`tar jxvf FileName.tar.bz`

## .tar.xz

解压：`tar xvJf FileName.tar.xz`

压缩：`tar cvJf FileName.tar.xz DirName`

## .Z

解压：`uncompress FileName.Z`

压缩：`compress FileName`

## .tar.z

解压：`tar Zxvf FileName.tar.z`

压缩：`tar Zcvf FileName.tar.z DirName`

## .zip

解压：`unzip FileName.zip`

压缩：`zip FileName.zip DirName`

## .rar

解压：`rar x FileName.rar`

压缩：`rar a FileName.rar DirName`

## .lha

解压：`lha -e FileName.lha`

压缩：`lha -a FileName.lha FileName`

## .rpm

解包：`rpm2cpio FileName.rpm | cpio -div`

## .deb

解包：`ar p FileName.deb data.Tar.gz | Tar zxf -`

## 万能脚本

解压：`sEx x FileName.*`

压缩：`sEx a FileName.* FileName`

sEx只是调用相关程序，本身并无压缩、解压功能，请注意！

sEx官网：

http://sourceforge.net/projects/sex

## 7zip

7-Zip是Igor Pavlov于1999年开发的压缩软件。

官网：

https://sparanoid.com/lab/7z/

它虽然支持多种压缩算法，但最重要的还是LZMA（Lempel-Ziv-Markov chain-Algorithm）算法。

该算法的SDK：

https://sparanoid.com/lab/7z/sdk.html

参考：

https://mp.weixin.qq.com/s/NB12KQOHjso9wH8Ju1ueSA

ZIP也能边下载边解压？流式解压技术揭秘！

# 目标检测进阶+++++

https://mp.weixin.qq.com/s/iPx5K2cSs5jlCt9d9oKpww

VoVNet：实时目标检测的新backbone网络

https://mp.weixin.qq.com/s/FHHIdoXyaU4skX-zyZFQew

已开源！全新水下目标检测算法SWIPENet+IMA框架

https://mp.weixin.qq.com/s/-x9A1eG5BfGmqV31SdMCMg

目标检测算法之Light-Head R-CNN

https://mp.weixin.qq.com/s/On-pHCdGg3piTQtDV88kQA

特定场景下Yolo改进算法：Poly-Yolo

https://mp.weixin.qq.com/s/HW0SNf-NYjXqJwlungRFpg

综述：目标检测中的多尺度检测方法

https://zhuanlan.zhihu.com/p/158907507

From VanillaDet to AutoAssign

https://mp.weixin.qq.com/s/GL_q4VLCgbjTZq_zpTLq0w

Label Assign：提升目标检测上限

https://mp.weixin.qq.com/s/EO5h1zW4yrToqwTCnXtz4g

TTFNet: 最大程度提高训练效率的实时目标检测

https://mp.weixin.qq.com/s/6R3myLyAeMMS0lR1GSlvcA

细说物体检测中的Anchors

# 数学杂谈++

https://mp.weixin.qq.com/s/H1fvyQYRFcOe0pqclD-3yg

“最大数之父”葛立恒逝世，他是20世纪数学巨匠，也是一个杂技演员

https://mp.weixin.qq.com/s/rXbP1dvFmwl6QhVCDMr2Bw

神童、数学家、抑郁症患者，控制论之父诺伯特·维纳的一生

https://mp.weixin.qq.com/s/htCZU2de_7CCcL1q4v-NGg

比肩爱因斯坦的天才：如果再给他一次机会，他可能不会再熬夜了......（麦克斯韦）

https://mp.weixin.qq.com/s/BCszlYgbgvKUSkpJCSRQxg

电影院今天复工，应该如何排座位？这是个数学家研究了几百年的问题

https://mp.weixin.qq.com/s/R0nuIqlIefkEppr07Y8gnQ

用一中学数学公式，中了14次彩票头奖，多国彩票规则因他改变

https://mp.weixin.qq.com/s/FCysnxxWBFiGS027qCxHTw

世界上最伟大的十大公式

https://www.zhihu.com/question/20866833

为什么正多面体只有5种？

https://mp.weixin.qq.com/s/qfbfzToypKTxh7CxJ0ifHw

正十二面体的一个最基本谜题被破解了

https://mp.weixin.qq.com/s/uptfQb8ELfpb5P4ySvofpg

一个被我们“嫌弃”了23年的数学天才，累死才知道他的价值（陆家羲）

https://mp.weixin.qq.com/s/wMARrGbRanB2T0NIxISspA

有趣的数学可视化

https://mp.weixin.qq.com/s/T6ukSjODiTgC1T4pCZCY9g

2，29，541，7919，104729……（素数的故事）

https://mp.weixin.qq.com/s/YD6fnPYkqXwxTISjN99JxQ

美国数学能出很厉害的大神，为什么学的却比我们简单？看了他们的黑历史就明白了……
